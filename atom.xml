<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2014-08-19T15:02:21-07:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A ridiculous adder]]></title>
    <link href="http://agam.github.io/blog/2014/08/19/a-ridiculous-adder/"/>
    <updated>2014-08-19T14:32:09-07:00</updated>
    <id>http://agam.github.io/blog/2014/08/19/a-ridiculous-adder</id>
    <content type="html"><![CDATA[<p>Alright, the first example of <em>&ldquo;Ridiculous Concurrency&rdquo;</em> ! Here is a terribly inefficient adder that performs arithmetic on arbitrarily large integers.</p>

<p>See <a href="https://gist.github.com/agam/3d82745c84c8f44dd51c">this gist</a> for the complete source &hellip;</p>

<p>In case no one gets the joke, I&rsquo;ll be explicit: this is <em>not really</em> a way to implement a &ldquo;BigNum&rdquo;, it&rsquo;s a terrible way to do it, but it&rsquo;s a fun way to do it that can only be done with Go.</p>

<p>This is the <code>main</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">bignum</span> <span class="o">:=</span> <span class="nx">MakeBigNum</span><span class="p">([]</span><span class="kt">int</span><span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">})</span>
</span><span class='line'>     <span class="nb">print</span><span class="p">(</span><span class="nx">bignum</span><span class="p">)</span>
</span><span class='line'>     <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;\nAnd after adding ... \n&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">add</span><span class="p">(</span><span class="mi">100000</span><span class="p">,</span> <span class="nx">bignum</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>     <span class="nb">print</span><span class="p">(</span><span class="nx">bignum</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straightforward &hellip; and this is how you make the big number:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">addDigit</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Bignum</span><span class="p">,</span> <span class="nx">num</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">in</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span> <span class="kd">chan</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">new_out</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span>
</span><span class='line'>     <span class="nx">d</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Digit</span><span class="p">{</span><span class="nx">num</span><span class="p">,</span> <span class="nx">in</span><span class="p">,</span> <span class="nx">new_out</span><span class="p">}</span>
</span><span class='line'>     <span class="nx">b</span><span class="p">.</span><span class="nx">digits</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">digits</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span>
</span><span class='line'>     <span class="k">go</span> <span class="nx">carry</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">new_out</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">carry</span><span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">Digit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="k">for</span> <span class="nx">in_msg</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">d</span><span class="p">.</span><span class="nx">pull_carry</span> <span class="p">{</span>
</span><span class='line'>               <span class="nx">out_msg</span> <span class="o">:=</span> <span class="kc">false</span>
</span><span class='line'>       <span class="k">if</span> <span class="nx">in_msg</span> <span class="p">{</span>
</span><span class='line'>               <span class="nx">sum</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>           <span class="k">if</span> <span class="nx">sum</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="p">{</span>
</span><span class='line'>                       <span class="nx">d</span><span class="p">.</span><span class="nx">value</span> <span class="p">=</span> <span class="nx">sum</span> <span class="o">-</span> <span class="mi">10</span>
</span><span class='line'>                   <span class="nx">out_msg</span> <span class="p">=</span> <span class="kc">true</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                   <span class="nx">d</span><span class="p">.</span><span class="nx">value</span> <span class="p">=</span> <span class="nx">sum</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>       <span class="nx">d</span><span class="p">.</span><span class="nx">push_carry</span> <span class="o">&lt;-</span> <span class="nx">out_msg</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">sentinel</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Bignum</span><span class="p">,</span> <span class="nx">in</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">msg</span> <span class="p">=</span> <span class="o">&lt;-</span><span class="nx">in</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">msg</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">last_out</span> <span class="o">:=</span> <span class="nx">addDigit</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">in</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">go</span> <span class="nx">sentinel</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">last_out</span><span class="p">)</span>
</span><span class='line'>                  <span class="nx">last_out</span> <span class="o">&lt;-</span> <span class="kc">false</span>
</span><span class='line'>              <span class="k">break</span>
</span><span class='line'>                 <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">b</span><span class="p">.</span><span class="nx">stable</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">MakeBigNum</span><span class="p">(</span><span class="nx">num_arr</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">Bignum</span> <span class="p">{</span>
</span><span class='line'>         <span class="kd">var</span> <span class="nx">digits</span> <span class="p">[]</span><span class="o">*</span><span class="nx">Digit</span>
</span><span class='line'>         <span class="nx">last_out</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>         <span class="nx">stable</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span>
</span><span class='line'>         <span class="nx">b</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Bignum</span><span class="p">{</span><span class="nx">digits</span><span class="p">,</span> <span class="nx">last_out</span><span class="p">,</span> <span class="nx">stable</span><span class="p">}</span>
</span><span class='line'>         <span class="nx">l</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">num_arr</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>                 <span class="nx">last_out</span> <span class="p">=</span> <span class="nx">addDigit</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">num_arr</span><span class="p">[</span><span class="nx">l</span><span class="o">-</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">last_out</span><span class="p">)</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">go</span> <span class="nx">sentinel</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">last_out</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">return</span> <span class="nx">b</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yup, <em>every digit</em> is a Goroutine here!</p>

<p>Each digit is connected to the one on its left and the one on its right, and has channels open to each. It listens in on one (<code>pull_carry</code>) and increments itself if necessary. If it overflows, it lets the next one know.</p>

<p>The last digit is always a &ldquo;sentinel&rdquo;, which on receiving a carry signal (i.e. when the overall big number grows in size), creates a new &ldquo;digit&rdquo; (spawning a goroutine for it) and makes <em>that</em> one the new sentinel.</p>

<p>With this arrangement, the actual task of addition is boring:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">add</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">b</span> <span class="o">*</span><span class="nx">Bignum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">sent</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="nx">done</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">done_sending</span><span class="p">:</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>           <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>           <span class="k">case</span> <span class="nx">b</span><span class="p">.</span><span class="nx">add</span> <span class="o">&lt;-</span> <span class="kc">true</span><span class="p">:</span>
</span><span class='line'>               <span class="nx">sent</span><span class="o">++</span>
</span><span class='line'>           <span class="k">if</span> <span class="nx">sent</span> <span class="o">==</span> <span class="nx">n</span> <span class="p">{</span>
</span><span class='line'>                   <span class="k">break</span> <span class="nx">done_sending</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">b</span><span class="p">.</span><span class="nx">stable</span><span class="p">:</span>
</span><span class='line'>               <span class="nx">done</span><span class="o">++</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">for</span> <span class="p">;</span> <span class="nx">done</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">done</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>           <span class="o">&lt;-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">stable</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, alright, not <em>that</em> boring. <code>b.add</code> is nothing other than the <code>pull_carry</code> channel of the <em>first</em> digit. We just pump that channel as many times as the size of the number we&rsquo;re adding, and wait for the number to &ldquo;stabilize&rdquo; at the end. <code>b.stable</code> is the flip side of <code>b.add</code>: it&rsquo;s the <code>push_carry</code> channel of the <em>last</em> digit.</p>

<p>The small trick here is to start receiving the results in parallel, to avoid deadlock. Another option would be to provide buffered channels, but I prefer it this way so I don&rsquo;t have to think about how much buffer space to allocate. This is just as correct.</p>

<p>That&rsquo;s pretty much it &hellip; here are the data types we used in our adder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Bignum</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>         <span class="nx">digits</span>   <span class="p">[]</span><span class="o">*</span><span class="nx">Digit</span>
</span><span class='line'>         <span class="nx">add</span>      <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">bool</span>
</span><span class='line'>         <span class="nx">stable</span>   <span class="kd">chan</span> <span class="kt">bool</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Digit</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>         <span class="nx">value</span>      <span class="kt">int</span>
</span><span class='line'>         <span class="nx">pull_carry</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">bool</span>
</span><span class='line'>         <span class="nx">push_carry</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">bool</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This isn&rsquo;t really about adding numbers, creating a reasonably complex (statically typed!) asynchronous model like this would be hard in any other language (yes, I&rsquo;m aware of <code>core.async</code>, and it has <code>go</code>, <code>|&gt;</code>, <code>&lt;|</code> and so on, and using <code>alts!!</code> might result in something similar, but it feels a bit clunkier to play around with).</p>

<p>Here&rsquo;s another great perk of #golang &hellip; you don&rsquo;t have to take my word for all this: try out this example live at <a href="http://play.golang.org/p/dOK16qov1e">the Go Playground</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command-line Gists]]></title>
    <link href="http://agam.github.io/blog/2014/08/19/command-line-gists/"/>
    <updated>2014-08-19T14:25:25-07:00</updated>
    <id>http://agam.github.io/blog/2014/08/19/command-line-gists</id>
    <content type="html"><![CDATA[<p>Every once in a while I need to share some code snippets, and <a href="https://gist.github.com/">Gist</a> has been the best way to do this so far. Using the browser wastes a few mouseclicks, especially if you already have the intended contents (either entirely or partially) in a text file, so here&rsquo;s a better way to do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo gem install gist
</span><span class='line'>
</span><span class='line'>gist --login
</span><span class='line'>
</span><span class='line'>gist myfile
</span></code></pre></td></tr></table></div></figure>


<p>A new gist containing the contents of <code>myfile</code> (along with the <em>appropriate source formatting</em>) will be created, and you should see something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://gist.github.com/3d82745c84c8f44dd51c
</span></code></pre></td></tr></table></div></figure>


<p>indicating success.</p>

<p><strong>Note:</strong> If you want to upload anonymously, try <code>gist -a myfile</code> instead of the above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang setup]]></title>
    <link href="http://agam.github.io/blog/2014/08/12/golang-setup/"/>
    <updated>2014-08-12T15:21:15-07:00</updated>
    <id>http://agam.github.io/blog/2014/08/12/golang-setup</id>
    <content type="html"><![CDATA[<p>Just some basic personal notes here.</p>

<p>Obviously, get the <code>go-mode</code> for Emacs. It has useful shortcuts, like <code>C-c C-a</code> to import a package while you&rsquo;re editing some code and don&rsquo;t want to scroll up and add this, or <code>C-c C-d</code> to show the signature of the function at point. There are other useful functions (for which you can add your own shortcuts), such as <code>gofmt</code> which does what you&rsquo;d expect, and <code>go-play-region</code>, which is nifty (but perhaps not that useful): it sends the selected code to <a href="http://play.golang.org/">the Go Playground</a>, and displays the result.</p>

<p>It&rsquo;ll also be useful to get <code>godef</code>. So, just <code>go get code.google.com/p/rog-go/exp/cmd/godef</code> (remember to set <code>$GOPATH</code> first &mdash; I use <code>~/Golang/Packages</code>).</p>

<p>If you&rsquo;re enthusiastic about further Emacs-Go integration, you can try out <a href="http://github.com/dougm/goflymake"><code>goflymake</code></a> &mdash; I haven&rsquo;t used it myself (the compile step is nearly-instantaneous for me anyway), but I&rsquo;ve heard its good, so YMMV.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ridiculous Concurrency]]></title>
    <link href="http://agam.github.io/blog/2014/08/12/ridiculous-concurrency/"/>
    <updated>2014-08-12T15:09:01-07:00</updated>
    <id>http://agam.github.io/blog/2014/08/12/ridiculous-concurrency</id>
    <content type="html"><![CDATA[<p>Ok, so I went through the <a href="http://tour.golang.org/">Go Tour</a>, and it&rsquo;s pretty impressive; having this sort of super-fast edit-compile-run cycle is something usually associated with Javascript-ish languages, certainly not a statically compiled systems language.</p>

<p>One of the big selling points of Go (apart from its &ldquo;familiar&rdquo; yet clean syntax) is the ubiquitous concurrency primitives available. Yes, you could obviously do the same in other languages (see a good <a href="http://blog.drewolson.org/blog/2013/07/04/clojure-core-dot-async-and-go-a-code-comparison/">Clojure translation here</a>), but channels and goroutines being first-class objects in Go, passing them is as normal as ints and strings.</p>

<p>Except its not really that normal, is it? But it <em>should</em> be. So I thought, why not try out something that I called &ldquo;ridiculous concurrency&rdquo;, a sort of roundabout way of doing normal stuff, while <em>overusing</em> concurrency.</p>

<p>This isn&rsquo;t meant to be a good way of showing how to do anything, but rather <strong>making it easy to <em>abuse</em> concurrency, so that you can later <em>use</em> it</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala/Haskell/Go]]></title>
    <link href="http://agam.github.io/blog/2014/08/04/scala-slash-haskell-slash-go/"/>
    <updated>2014-08-04T12:33:51-07:00</updated>
    <id>http://agam.github.io/blog/2014/08/04/scala-slash-haskell-slash-go</id>
    <content type="html"><![CDATA[<p>Ok, Scala is neat. It&rsquo;s certainly the <em>only</em> way I can bring myself to use the JVM. The idea of everything being an object is a good one. You can &lsquo;cheat&rsquo; a bit since you can use statements, mix in side effects, do whatever, but I understand the compromises for Java-interop, without which it would would have been just another unused academic language.</p>

<p>It seems to be a <em>completely unopinionated</em> language, which IMO seems not so great since there are too many ways to do anything, so in practice you&rsquo;d have to pick some subset of features and stick with that, enforced as a style guide rather than by the compiler (much like all reasonable C++ programming is done today).</p>

<p>Even if you never plan to use Scala, the two courses on Coursera are recommended viewing.</p>

<p>Having done that, would I still use Scala? If I needed to use the JVM or existing Java libraries, this is a no-brainer. But without that constraint? Not quite sure. One of Haskell (for the type safety) or Go (for the reactive concurrency) might fit the bill just as well.</p>

<p>Anyway, I&rsquo;m still working through these videos and I&rsquo;ve yet to build anything half-way complex with it, so take all this with a grain of salt.</p>

<p>One open question I do have is whether Scala benefits from subtyping (which Haskell lacks). I&rsquo;ve heard/read many viewpoints on this but haven&rsquo;t come to a conclusion yet &hellip;</p>

<p><strong>Update</strong>: I got some feedback to the effect of &ldquo;you&rsquo;re an idiot, you should just drop everything and use Go instead&rdquo;, so I&rsquo;m going to try that for a while and report back in &hellip; many months? Maybe.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Possibly unevaluated variables]]></title>
    <link href="http://agam.github.io/blog/2014/07/31/possibly-unevaluated-variables/"/>
    <updated>2014-07-31T16:11:40-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/31/possibly-unevaluated-variables</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">loop</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="n">loop</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">10</span><span class="k">:</span> <span class="kt">warning:</span> <span class="kt">method</span> <span class="kt">loop</span> <span class="kt">does</span> <span class="kt">nothing</span> <span class="kt">other</span> <span class="kt">than</span> <span class="kt">call</span> <span class="kt">itself</span> <span class="kt">recursively</span>
</span><span class='line'>       <span class="k">def</span> <span class="n">loop</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="n">loop</span>
</span><span class='line'>                           <span class="o">^</span>
</span><span class='line'><span class="n">loop</span><span class="k">:</span> <span class="kt">Boolean</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="kc">true</span> <span class="o">||</span> <span class="n">loop</span>
</span><span class='line'><span class="n">res34</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="n">loop</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="kt">need</span> <span class="kt">to</span> <span class="kt">Ctrl-C</span> <span class="kt">out</span> <span class="kt">at</span> <span class="kt">this</span> <span class="kt">point</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>(I like that warning message!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala: var, val, def]]></title>
    <link href="http://agam.github.io/blog/2014/07/31/scala-var/"/>
    <updated>2014-07-31T13:04:30-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/31/scala-var</id>
    <content type="html"><![CDATA[<p>Using all three (<code>val</code>, <code>var</code>, `d</p>

<p>ef<code>), I initialize, and then attempt to reassign. Only</code>var` succeeds (as it should), but the other two fail in different ways.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="mi">6</span>
</span><span class='line'><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">6</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">x</span> <span class="k">=</span> <span class="mi">7</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">11</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">reassignment</span> <span class="kt">to</span> <span class="kt">val</span>
</span><span class='line'>       <span class="n">x</span> <span class="k">=</span> <span class="mi">7</span>
</span><span class='line'>         <span class="o">^</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">var</span> <span class="n">x</span> <span class="k">=</span> <span class="mi">6</span>
</span><span class='line'><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">6</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">x</span> <span class="k">=</span> <span class="mi">7</span>
</span><span class='line'><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">x</span> <span class="k">=</span> <span class="mi">6</span>
</span><span class='line'><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">x</span> <span class="k">=</span> <span class="mi">7</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">11</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">value</span> <span class="kt">x_=</span> <span class="kt">is</span> <span class="kt">not</span> <span class="kt">a</span> <span class="kt">member</span> <span class="kt">of</span> <span class="kt">object</span> <span class="kt">$iw</span>
</span><span class='line'>       <span class="n">x</span> <span class="k">=</span> <span class="mi">7</span>
</span><span class='line'>       <span class="o">^</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deceptively similar at first, but I suppose you get used to it. Also, what the heck is <code>$iw</code> ?? (I&rsquo;m guessing it&rsquo;s an internal Java representation of the <code>Int</code> class)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Up and Running: Scala, Sbt, Ensime]]></title>
    <link href="http://agam.github.io/blog/2014/07/30/up-and-running-with-scala/"/>
    <updated>2014-07-30T12:31:30-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/30/up-and-running-with-scala</id>
    <content type="html"><![CDATA[<p>The &ldquo;Getting started&rdquo; section of the &ldquo;Functional Programming with Scala&rdquo; course mentions using Eclipse to build the first &lsquo;hello world&rsquo; kind of project, but if you&rsquo;d rather not get out of your Emacs comfort zone, there is a different way to do the same (credits to numerous online sources).</p>

<ul>
<li><p>Install <code>sbt</code> (<code>sudo apt-get install sbt</code>) and <code>scala</code> (download <a href="http://www.scala-lang.org/download/">from here</a>)</p></li>
<li><p>Install the <code>ensime</code> plugin for <code>sbt</code>: Create a directory <code>~/.sbt/0.13/plugins</code>, and create <code>plugins.sbt</code></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">resolvers</span> <span class="o">+=</span> <span class="s">&quot;Sonatype releases&quot;</span> <span class="n">at</span> <span class="s">&quot;https://oss.sonatype.org/content/repositories/releases&quot;</span>
</span><span class='line'><span class="n">addSbtPlugin</span><span class="o">(</span><span class="s">&quot;org.ensime&quot;</span> <span class="o">%</span> <span class="s">&quot;ensime-sbt-cmd&quot;</span> <span class="o">%</span> <span class="s">&quot;0.1.2&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Install the <code>scala-mode2</code> Emacs: if you have Emacs24, this is as straightforward as running <code>M-x package-list-packages</code> and finding it)</p></li>
<li><p>Install <code>ensime</code>: <a href="https://github.com/ensime/ensime-server/downloads">Download</a> the latest <code>.tar.gz</code>, and install it somewhere under <code>.emacs.d</code>, then modify your <code>.emacs</code> to load the appropriate paths:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="n">add</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">list</span> <span class="-Symbol">&#39;load</span><span class="o">-</span><span class="n">path</span> <span class="s">&quot;~/.emacs.d/ensime/elisp&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">(</span><span class="n">require</span> <span class="-Symbol">&#39;ensime</span><span class="o">)</span>
</span><span class='line'><span class="o">(</span><span class="n">add</span><span class="o">-</span><span class="n">hook</span> <span class="-Symbol">&#39;scala</span><span class="o">-</span><span class="n">mode</span><span class="o">-</span><span class="n">hook</span> <span class="-Symbol">&#39;ensime</span><span class="o">-</span><span class="n">scala</span><span class="o">-</span><span class="n">mode</span><span class="o">-</span><span class="n">hook</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Create a new directory: <code>mkdir helloworld; cd helloworld</code></p></li>
<li><p>Initialize the project: Create <code>build.sbt</code> with the following</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">name</span> <span class="o">:=</span> <span class="s">&quot;hello_world&quot;</span>
</span><span class='line'><span class="n">version</span> <span class="o">:=</span> <span class="s">&quot;1.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Set up <code>ensime</code>: <code>sbt ensime generate</code></p></li>
<li><p>Open a file (say) <code>Main.scala</code></p></li>
<li><p>Start <code>ensime</code> in Emacs: <code>M-x ensime</code> (say &lsquo;yes&rsquo; to various prompts). You should see something like &ldquo;ENSIME ready. May the _ be with you.&rdquo; in the minibuffer.</p></li>
<li><p>Add something in the file, e.g. (copying from the tutorial)</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">greeter</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Hello</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Hit <code>C-c C-b v</code>, this brings up an <code>sbt</code> console <em>inside Emacs</em> (similar to how Slime works with Lisp)</p></li>
<li><p>Type <code>run</code> in the console, you should see something like</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&gt;</span> <span class="n">run</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Compiling</span> <span class="mi">1</span> <span class="nc">Scala</span> <span class="n">source</span> <span class="n">to</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">agam</span><span class="o">/</span><span class="nc">Scala</span><span class="o">/</span><span class="n">hello</span><span class="o">-</span><span class="n">world</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">scala</span><span class="o">-</span><span class="mf">2.10</span><span class="o">/</span><span class="n">classes</span><span class="o">...</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Running</span> <span class="n">greeter</span><span class="o">.</span><span class="nc">Hello</span>
</span><span class='line'><span class="nc">Hello</span> <span class="nc">World</span>
</span><span class='line'><span class="o">[</span><span class="kt">success</span><span class="o">]</span> <span class="nc">Total</span> <span class="n">time</span><span class="k">:</span> <span class="err">2</span> <span class="kt">s</span><span class="o">,</span> <span class="n">completed</span> <span class="nc">Jul</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">2014</span> <span class="mi">5</span><span class="k">:</span><span class="err">03</span><span class="kt">:</span><span class="err">35</span> <span class="kt">PM</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and that&rsquo;s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Other Languages]]></title>
    <link href="http://agam.github.io/blog/2014/07/30/learning-other-languages/"/>
    <updated>2014-07-30T12:23:33-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/30/learning-other-languages</id>
    <content type="html"><![CDATA[<p>I spent some time learning a decent amount of Common Lisp last year. Nothing fancy, but I&rsquo;m comfortable using quicklisp, playing around with libraries, modelling stuff, etc. I&rsquo;ve read through <a href="http://www.gigamonkeys.com/book/">PCL</a> and <a href="http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node1.html">ClTl2</a> (though unfortunately, not <a href="http://norvig.com/paip.html">PAIP</a> (not yet!)).</p>

<p>They&rsquo;ve been a bunch of other new (as in, the last 7 years ?) languages that I&rsquo;ve looked at off and on. Gone through a few tutorials, read (no, lightly skimmed) some suggested material (learn you a X, learn Y in Z minutes, etc). I <em>love</em> Common Lisp (enough to simply call it &ldquo;Lisp&rdquo; to the exclusion of the gazillion varieties of scheme (and yes, Clojure too (!))), but yeah, the lack of libraries does get to be a pain point.</p>

<p>So someone suggested I try Clojure, but I&rsquo;ll pass. I don&rsquo;t want to look at stuff ending with &ldquo;))]))})]})&rdquo;. If I need reader macros for hash-tables, <a href="http://cl21.org/">cl21</a> has it, though I think <a href="https://github.com/vseloved/rutils/blob/master/docs/ann-rutils.md">rutils</a> should suffice for a nice superset of useful library add-ons (OTOH the Overtone/Quil/ShaderTone combo does make me salivate, and I definitely <em>will</em> check try them out at some point).</p>

<p>If I <em>have</em> to work with the JVM, I figure I might as well learn something new/different that isn&rsquo;t trying too hard to be <em>Lisp</em>. Hence, <a href="http://www.scala-lang.org/">Scala</a>. I may regret this later (but how bad can it be). I hear people loved the <a href="https://www.coursera.org/course/progfun">MOOC</a> on it last year, and looks like I <em>just</em> missed the one this year, but this being Coursera (yay) I can still do the videos and the assignments.</p>

<p>Also <a href="https://www.dartlang.org/">Dart</a> because it&rsquo;s nice to get basic web UI stuff going when needed (and no, I don&rsquo;t want to know Javascript). So we&rsquo;ll see how that goes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R vs Python]]></title>
    <link href="http://agam.github.io/blog/2014/07/25/r-vs-python/"/>
    <updated>2014-07-25T16:22:39-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/25/r-vs-python</id>
    <content type="html"><![CDATA[<p>A lot of virtual ink has been spilled on whether R or Python is better suited to the needs of <a href="http://www.analyticbridge.com/profiles/blogs/the-death-of-the-statistician">&ldquo;data scientists&rdquo;</a>.</p>

<p>Numerous people (no, <em>evangelicals</em>) have weighed in <a href="http://inside-bigdata.com/2013/12/09/data-science-wars-python-vs-r/">with</a> <a href="http://readwrite.com/2013/11/25/python-displacing-r-as-the-programming-language-for-data-science">their</a> <a href="http://redmonk.com/sogrady/2013/11/26/python-r/">polemics</a> (summarized, briefly as &ldquo;R is not really a language!&rdquo;, &ldquo;Python is displacing R!&rdquo;, and &ldquo;Will Python kill R?&rdquo;).</p>

<p>So, it&rsquo;s confusing (i.e., if you happen to care at all, though you don&rsquo;t have to; this is the internet, where the less people know or care about something, the stronger their opinions on it), but luckily someone did come up with a <em>data-driven approach</em> to solving this problem. Check it out:</p>

<ul>
<li><a href="http://www.theswarmlab.com/r-vs-python-round-1/">Round 1</a></li>
<li>Round 2 (<a href="http://www.theswarmlab.com/r-vs-python-round-2/">part 1</a> and <a href="http://www.theswarmlab.com/r-vs-python-round-2-22/">part 2</a>)</li>
</ul>


<p>Now you can <em>make up your own damn mind</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On moving from development to writing]]></title>
    <link href="http://agam.github.io/blog/2014/07/25/on-moving-from-development-to-writing/"/>
    <updated>2014-07-25T13:11:30-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/25/on-moving-from-development-to-writing</id>
    <content type="html"><![CDATA[<p>From <a href="http://mattgemmell.com/confessions-of-an-ex-developer/">Matt Gemmell</a>. I have to say I&rsquo;ve been feeling the same way for some time now!</p>

<blockquote><p>We’ve had our (latest) software Renaissance in the form of the mobile platforms and their App Stores, and I think the software biz is now starting to slide back towards consolidation and mega-corps again. <em>It’s not a particularly great time to be an indie app developer anymore.</em></p>

<p>Small shops are closing. Three-person companies are dropping back to sole proprietorships all over the place. Products are being acquired every week, usually just for their development teams, and then discarded.</p>

<p><strong>The implacable, crushing wheels of industry, slow to move because of their size, have at last arrived on the frontier</strong>. Our frontier, or at least yours now. I’ve relinquished my claim.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple game of life]]></title>
    <link href="http://agam.github.io/blog/2014/07/25/simple-game-of-life/"/>
    <updated>2014-07-25T13:10:46-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/25/simple-game-of-life</id>
    <content type="html"><![CDATA[<p>(Just for fun)</p>

<div><script src='https://gist.github.com/a832613064f958641330.js'></script>
<noscript><pre><code>(defpackage :game-of-life
  (:use :cl))
(in-package :game-of-life)

(defparameter *board-size* 10)
(defparameter *game-board* nil)

(defparameter *space* #\ )
(defparameter *life* #\#)

(defun make-new-board ()
  (make-array (list *board-size* *board-size*)
          :element-type &#39;(mod 2)
          :initial-element 0))

(defun start-game ()
  (setf *game-board* (make-new-board)))


(defun print-board ()
  (dotimes (i *board-size*)
    (dotimes (j *board-size*)
      (if (= 0 (aref *game-board* i j))
      (princ *space*)
      (princ *life*)))
    (terpri)))

(defun add-life (x y)
  (setf (aref *game-board* x y) 1))

(defparameter *environment-radius* 1)

(defun get-environment (x y)
  &quot;Create a matrix of size 2*radius + 1, with the element
itself implicitly at (radius,radius) set to 0&quot;
  (let* ((env-size (1+ (* 2 *environment-radius*)))
     (env (make-array (list env-size env-size)
             :element-type &#39;(mod 2)
             :initial-element 0)))
    (dotimes (i env-size)
      (dotimes (j env-size)
    (let ((x-offset (+ x (- i *environment-radius*)))
          (y-offset (+ y (- j *environment-radius*))))
      (if (and (&gt; x-offset 0) (&lt; x-offset *board-size*)
           (&gt; y-offset 0) (&lt; y-offset *board-size*))
          (setf (aref env i j) (aref *game-board* x-offset y-offset))
          (setf (aref env i j) 0)))))
    env))

(defun count-living-neighbors (env)
  (let* ((num 0)
     (env-size (1+ (* 2 *environment-radius*))))
    (dotimes (i env-size)
      (dotimes (j env-size)
    (when (and (= 1 (aref env i j))
           (or (/= i *environment-radius*)
               (/= j *environment-radius*)))
      (incf num))))
    num))

(defparameter *birth-number* 3)
(defparameter *lonely-number* 1)
(defparameter *crowded-number* 4)

(defun can-be-born (neighbors)
  (= *birth-number* neighbors))

(defun will-survive (neighbors)
  (and (&gt; neighbors *lonely-number*)
       (&lt; neighbors *crowded-number*)))

(defun live-or-die (env)
  (let ((current (aref env *environment-radius* *environment-radius*))
    (living-neighbors (count-living-neighbors env)))
    ;;(format t &quot;~%Debug: Current = ~S, num-neighbors = ~S&quot; current living-neighbors)
    (if (= 0 current)
    (can-be-born living-neighbors)
    (will-survive living-neighbors))))

(defun cell-representation (truth)
  (if truth
      1
      0))

(defun step-board ()
  &quot;Iterate the board by one time step, growing or shrinking life as appropriate&quot;
  (let ((next-board (make-new-board)))
    (dotimes (i *board-size*)
      (dotimes (j *board-size*)
    (let* ((environment (get-environment i j))
           (next (cell-representation (live-or-die environment))))
      ;;(format t &quot;Debug: Cell: ~S, Environment: ~S, Next: ~S~%&quot; (aref *game-board* i j) environment next)
      (setf (aref next-board i j) next))))
    (setf *game-board* next-board)))</code></pre></noscript></div>


<p>Maybe I&rsquo;ll add a GUI and some tools later, but for now you have to do something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(start-game)
</span><span class='line'>(add-life 4 5)
</span><span class='line'>(add-life 5 5)
</span><span class='line'>(add-life 6 5)
</span><span class='line'>(print-board)
</span><span class='line'>(step-board)
</span><span class='line'>(print-board)</span></code></pre></td></tr></table></div></figure>


<p>which should show</p>

<pre>



    #
    #
    #



</pre>


<p>followed by</p>

<pre>



    ###





</pre>


<p>and so on &hellip;</p>

<p><em>Update:</em></p>

<p>It&rsquo;s easy to try out patterns. Here are a few typical ones:</p>

<div><script src='https://gist.github.com/527c5fa85b316c84e9ba.js'></script>
<noscript><pre><code>
;;; Useful helpers to add stuff to the board. Describe a pattern as a list.
(defun add-life (x y)
  (setf (aref *game-board* y x) 1))

(defun draw-pattern (x y pattern)
  &quot;Assuming &#39;pattern&#39; is specified as a row-major set of 1s and 0s, replicates that on the board&quot;
  (mapindex #&#39;(lambda (row-num row)
        (mapindex #&#39;(lambda (col-num entry)
                  (let ((x-eff (+ x col-num))
                    (y-eff (+ y row-num)))
                (when (and (&lt; x-eff *board-size*)
                       (&lt; y-eff *board-size*))
                  (setf (aref *game-board* y-eff x-eff) entry))))
              row))
        pattern))
    

;; Sample oscillating patterns
(defun draw-blinker (x y)
  (draw-pattern x y
        &#39;((1)
          (1)
          (1))))

(defun draw-toad (x y)
  (draw-pattern x y
        &#39;((0 1 1 1)
          (1 1 1 0))))

(defun draw-beacon (x y)
  (draw-pattern x y
        &#39;((1 1 0 0)
          (1 1 0 0)
          (0 0 1 1)
          (0 0 1 1))))

;; Sample fixed patterns
(defun draw-loaf (x y)
  (draw-pattern x y
        &#39;((0 1 1 0)
          (1 0 0 1)
          (0 1 0 1)
          (0 0 1 0))))

(defun draw-block (x y)
  (draw-pattern x y
        &#39;((1 1)
          (1 1))))

;; Sample moving pattern
(defun draw-glider-moving-right (x y)
  (draw-pattern x y
        &#39;((0 1 0)
          (0 0 1)
          (1 1 1))))

(defun draw-glider-moving-left (x y)
  (draw-pattern x y
        &#39;((0 1 0)
          (1 0 0)
          (1 1 1))))</code></pre></noscript></div>


<p>Then you can do something like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(loop repeat 5 do (print-board) (step-board))</span></code></pre></td></tr></table></div></figure>


<p>and watch a few iterations. Of course, this is probably better implemented as a mobile app, I suppose. But yeah, still fun. Try out a <a href="http://wwwhomes.uni-bielefeld.de/achim/moving.html">few other spaceships</a> if you like &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to Github]]></title>
    <link href="http://agam.github.io/blog/2014/07/25/back-to-github/"/>
    <updated>2014-07-25T13:06:07-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/25/back-to-github</id>
    <content type="html"><![CDATA[<p>Ok, I&rsquo;ve been talked back off the ledge. Perhaps I over-reacted a bit when I fled to <a href="http://agamposts.tumblr.com/">Tumblr</a> and then to Wordpress.</p>

<p>I will undo some of that and continue living here for a while. Until the next catastrophe, I suppose. Or maybe I won&rsquo;t call it that.</p>

<p>So I&rsquo;ll move a couple of the posts I created there back here and delete that blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grumbling about Jekyll]]></title>
    <link href="http://agam.github.io/blog/2014/07/14/grumbling-about-jekyll/"/>
    <updated>2014-07-14T12:48:00-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/14/grumbling-about-jekyll</id>
    <content type="html"><![CDATA[<p>Yeah, not happy about how these dependencies keep breaking. It&rsquo;s a reminder about how fragile these scripting ecosystems are.</p>

<p>Seeing &#8220;Gem::LoadError: You have already activated rake 10.2.2, but your Gemfile requires rake 0.9.6.&#8220;` once is enough.</p>

<p>I tried a bunch of stuff and none of it worked. Eventually I gave up, deleted <code>Gemfile.lock</code>, ran <code>bundle install</code>, and just switched my workflow over to using <code>bundle exec rake ...</code> instead of just <code>rake ...</code>. Which grates on me now, but whatever.</p>

<p>Oh wait, no that changed <em>nothing</em>. Bundle is still using <code>rake 0.9.6</code>. Do I need to muck around in the Gemfile now? Why can&rsquo;t it just, you know use this &ldquo;activated version&rdquo; instead?</p>

<p>Nooo &hellip; I have an old version of ruby. I know, I&rsquo;ll use <code>rvm</code>, which I used when I got started with all this. Except &hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RVM is not a function, selecting rubies with 'rvm use ...' will not work.
</span><span class='line'>
</span><span class='line'>You need to change your terminal emulator preferences to allow login shell.
</span><span class='line'>Sometimes it is required to use `/bin/bash --login` as the command.
</span><span class='line'>Please visit https://rvm.io/integration/gnome-terminal/ for a example.</span></code></pre></td></tr></table></div></figure>


<p>There <em>must</em> be a way out. Doesn&rsquo;t Ubuntu update ruby? Let&rsquo;s try <code>sudo apt-get upgrade ruby</code>. No, it&rsquo;s already the &ldquo;latest version&rdquo;.</p>

<p>What? Ah yes, the breakdown in sensible versioning: different versions are just different names here, let&rsquo;s try <code>sudo apt-get install ruby1.9</code> instead.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The following packages have unmet dependencies:
</span><span class='line'> libodbc-ruby1.9.1 : Depends: ruby-odbc but it is not going to be installed
</span><span class='line'> libodbc-ruby1.9.1-dbg : Depends: ruby-odbc-dbg but it is not going to be installed
</span><span class='line'>E: Unable to correct problems, you have held broken packages.</span></code></pre></td></tr></table></div></figure>


<p>I have &ldquo;held broken packages&rdquo;! Indeed! Regardless, something seems to have happened, so <code>sudo ln -sf /usr/bin/ruby1.9.1 /usr/bin/ruby</code> might do something ?</p>

<p>Alriiite! Let&rsquo;s try to use <code>rake</code> again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake generate
</span><span class='line'>Could not find rake-0.9.6 in any of the sources</span></code></pre></td></tr></table></div></figure>


<p>Hmm, perhaps I need to rerun <code>bundle update</code> ?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Installing RedCloth (4.2.9) with native extensions /usr/lib/ruby/1.9.1/rubygems/installer.rb:552:in `rescue in block in build_extensions': ERROR: Failed to build gem native extension. (Gem::Installer::ExtensionBuildError)
</span><span class='line'>
</span><span class='line'>        /usr/bin/ruby1.9.1 extconf.rb 
</span><span class='line'>/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require': cannot load such file -- mkmf (LoadError)
</span><span class='line'>                           from /usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
</span><span class='line'>                           from extconf.rb:1:in `&lt;main&gt;'
</span></code></pre></td></tr></table></div></figure>


<p>Clearly, I am the stupid n00b here. I&rsquo;ve managed to end up worse off than where I started. Help!</p>

<p>Time to try something different. Overwrite the Gemfile with <a href="https://github.com/imathis/octopress/blob/master/Gemfile">the octopress master copy</a> and run <code>bundle install</code> again.</p>

<p>BTW, did I mention how long this step takes? No? Too bad. You&rsquo;ll just have to find out for yourself.</p>

<p><lolrus>Nooo! I still be getting error!</lolrus></p>

<p>What does the great and benevolent <a href="http://stackoverflow.com/questions/12149503/snorby-setup-redcloth-error">Stackoverflow suggest</a>? <code>sudo apt-get install ruby1.9.1-dev</code></p>

<p>At this point the magnitude of my true dependencies was revealed to me:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Fetching source index for https://rubygems.org/
</span><span class='line'>Using rake (10.3.2) 
</span><span class='line'>Installing RedCloth (4.2.9) with native extensions 
</span><span class='line'>Installing blankslate (2.1.2.4) 
</span><span class='line'>Installing timers (1.1.0) 
</span><span class='line'>Installing celluloid (0.15.2) 
</span><span class='line'>Installing chunky_png (1.3.1) 
</span><span class='line'>Installing fast-stemmer (1.0.2) with native extensions 
</span><span class='line'>Installing classifier (1.3.4) 
</span><span class='line'>Installing coffee-script-source (1.7.1) 
</span><span class='line'>Installing execjs (2.2.1) 
</span><span class='line'>Installing coffee-script (2.3.0) 
</span><span class='line'>Installing colorator (0.1) 
</span><span class='line'>Installing fssm (0.2.10) 
</span><span class='line'>Installing sass (3.2.19) 
</span><span class='line'>Installing compass (0.12.6) 
</span><span class='line'>Installing ffi (1.9.3) with native extensions 
</span><span class='line'>Installing tilt (1.4.1) 
</span><span class='line'>Installing haml (4.0.5) 
</span><span class='line'>Installing jekyll-coffeescript (1.0.0) 
</span><span class='line'>Installing jekyll-gist (1.1.0) 
</span><span class='line'>Installing jekyll-paginate (1.0.0) 
</span><span class='line'>Installing jekyll-sass-converter (1.0.0) 
</span><span class='line'>Installing rb-fsevent (0.9.4) 
</span><span class='line'>Installing rb-inotify (0.9.5) 
</span><span class='line'>Installing listen (2.7.9) 
</span><span class='line'>Installing jekyll-watch (1.0.0) 
</span><span class='line'>Installing kramdown (1.4.0) 
</span><span class='line'>Installing liquid (2.6.1) 
</span><span class='line'>Installing mercenary (0.3.4) 
</span><span class='line'>Installing posix-spawn (0.3.8) with native extensions 
</span><span class='line'>Installing yajl-ruby (1.1.0) with native extensions 
</span><span class='line'>Installing pygments.rb (0.6.0) 
</span><span class='line'>Installing redcarpet (3.1.2) with native extensions 
</span><span class='line'>Installing safe_yaml (1.0.3) 
</span><span class='line'>Installing parslet (1.5.0) 
</span><span class='line'>Installing toml (0.1.1) 
</span><span class='line'>Installing jekyll (2.1.1) 
</span><span class='line'>Installing jekyll-date-format (1.0.0) 
</span><span class='line'>Installing jekyll-page-hooks (1.3.0) 
</span><span class='line'>Installing jekyll-sitemap (0.5.0) 
</span><span class='line'>Installing rack (1.5.2) 
</span><span class='line'>Installing rack-protection (1.5.3) 
</span><span class='line'>Installing rdiscount (2.0.7.3) with native extensions 
</span><span class='line'>Installing rubypants (0.2.0) 
</span><span class='line'>Installing sass-globbing (1.0.0) 
</span><span class='line'>Installing sinatra (1.4.5) 
</span><span class='line'>Installing stringex (1.4.0) 
</span><span class='line'>Using bundler (1.0.15) 
</span><span class='line'>Your bundle is complete! It was installed into ./liquid</span></code></pre></td></tr></table></div></figure>


<p>After that cheeful status update, I thought I&rsquo;d start by trying out the old workflow again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>Could not find rake-10.3.2 in any of the sources
</span><span class='line'>Run `bundle install` to install missing gems.</span></code></pre></td></tr></table></div></figure>


<p>Too optimistic too soon, eh?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake generate
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>overwrite source/stylesheets/screen.css 
</span><span class='line'>/usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/execjs-2.2.1/lib/execjs/runtimes.rb:51:in `autodetect': Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes. (ExecJS::RuntimeUnavailable)
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/execjs-2.2.1/lib/execjs.rb:5:in `&lt;module:ExecJS&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/execjs-2.2.1/lib/execjs.rb:4:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/coffee-script-2.3.0/lib/coffee_script.rb:1:in `require'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/coffee-script-2.3.0/lib/coffee_script.rb:1:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/coffee-script-2.3.0/lib/coffee-script.rb:1:in `require'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/coffee-script-2.3.0/lib/coffee-script.rb:1:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-coffeescript-1.0.0/lib/jekyll-coffeescript.rb:2:in `require'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-coffeescript-1.0.0/lib/jekyll-coffeescript.rb:2:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-2.1.1/lib/jekyll.rb:75:in `require'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-2.1.1/lib/jekyll.rb:75:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-2.1.1/bin/jekyll:6:in `require'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-2.1.1/bin/jekyll:6:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/bin/jekyll:19:in `load'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/bin/jekyll:19:in `&lt;main&gt;'</span></code></pre></td></tr></table></div></figure>


<p>Obviously, there&rsquo;s one dependency missing from the list above. What, you say, you <em>didn&rsquo;t</em> know you need to install <code>Node.js</code> too?</p>

<p><code>sudo apt-get install nodejs</code></p>

<p><strong>Are we there yet?</strong> The suspense is killing me. Nope, running <code>bundle exec rake generate</code> just (very helpfully!) shows me</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake generate
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>jekyll 2.1.1 -- Jekyll is a blog-aware, static site generator in Ruby
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  jekyll &lt;subcommand&gt; [options]
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>        -s, --source [DIR]  Source directory (defaults to ./)
</span><span class='line'>        -d, --destination [DIR]  Destination directory (defaults to ./_site)
</span><span class='line'>            --safe         Safe mode (defaults to false)
</span><span class='line'>        -p, --plugins PLUGINS_DIR1[,PLUGINS_DIR2[,...]]  Plugins directory (defaults to ./_plugins)
</span><span class='line'>            --layouts DIR  Layouts directory (defaults to ./_layouts)
</span><span class='line'>        -h, --help         Show this message
</span><span class='line'>        -v, --version      Print the name and version
</span><span class='line'>        -t, --trace        Show the full backtrace when an error occurs
</span><span class='line'>
</span><span class='line'>Subcommands:
</span><span class='line'>  build                 Build your site
</span><span class='line'>  docs                  Launch local server with docs for Jekyll v2.1.1
</span><span class='line'>  new                   Creates a new Jekyll site scaffold in PATH
</span><span class='line'>  serve, server         Serve your site locally
</span><span class='line'>  doctor, hyde          Search site and print specific deprecation warnings</span></code></pre></td></tr></table></div></figure>


<p>Yes, I knew Jekyll was under that somewhere. That&rsquo;s sort of why I started using all this in the first place. Thanks for reminding me though. When I started writing this post I thought it would be a couple of lines, a quick edit-save-post, all done in five minutes. Cue evil laughter.</p>

<p><em>What, give up now? In our moment of triumph?</em> I overwrote the Gemfile earlier; what about doing the same for the Rakefile?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake generate
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>Configuration file: /usr/local/google/home/agam/Documents/agam.github.io/_config.yml
</span><span class='line'>       Deprecation: The 'pygments' configuration option has been renamed to 'highlighter'. Please update your config file accordingly. The allowed values are 'rouge', 'pygments' or null.
</span><span class='line'>            Source: source
</span><span class='line'>       Destination: public
</span><span class='line'>      Generating... 
</span><span class='line'>jekyll 2.1.1 | Error:  undefined method `published' for &lt;Post: /blog/2013/06/26/data-structures-haskell-vs-cpp&gt;:Jekyll::Post</span></code></pre></td></tr></table></div></figure>


<p>Now I&rsquo;ve <em>retroactively</em> broken stuff.</p>

<p>Finally, a light dawns: I should have done the following right at the beginning: <code>git pull origin master</code>. And of course, doing this now gives merge conflicts galore.</p>

<p>&hellip; many tens of minutes pass &hellip;</p>

<p>I realized there is no alternative to delve into the source here. <code>lib/jekyll/post.rb' has a</code>published?<code>method, perhaps this is being called without the trailing</code>?` somewhere? (BTW this is EXACTLY why I <strong>hate</strong> dynamically-typed, uncompiled languages!).</p>

<p><code>plugins/preview_unpublished.rb</code> shows a match &hellip; so I deleted it.</p>

<p>Now we have a new problem &hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jekyll 2.1.1 | Error:  undefined method `subclasses' for Jekyll::PostFilter:Class</span></code></pre></td></tr></table></div></figure>


<p>&hellip; but at least the old one is gone! We&rsquo;re getting closer!</p>

<p>Sure enough, it&rsquo;s another plugin: <code>plugins/post_filters.rb</code>. At this point I realize there may be many more, so I see the list of plugins <a href="https://github.com/imathis/octopress/tree/master/plugins">that should exist by default</a> and get rid of any others. Turns out, it&rsquo;s just one more: <code>plugins/sitemap_generator.rb</code>.</p>

<p>No luck yet.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Liquid Exception: undefined method `deep_merge' for #&lt;Hash:0x0000000277cb38&gt; in sitemap.xml</span></code></pre></td></tr></table></div></figure>


<p>Now I&rsquo;m getting impatient. I just want to post a &ldquo;Goodbye&rdquo; post. One last post. I&rsquo;ll render it myself if I have to.</p>

<p>Ok, it&rsquo;s the plugins again. I got rid of <code>plugins/date.rb</code> and updated <code>plugins/octopress_filters.rb</code>.</p>

<p>IT WORKS! Oh god it works!</p>

<p>Ok, my custom theme is gone and all, but that&rsquo;s ok, I won&rsquo;t complain. <em>Update</em>: Needless to say, I got it back (after all this, surely &hellip;)</p>

<p>All&rsquo;s well that ends well, you say? <em>WTF!</em> Nothing new here &hellip; the whole point of relying on stuff like this is after all to engage in this periodic ritual sacrifice of time. Which is great when you&rsquo;re <em>12</em>, not so much now.</p>

<p>I could just leave things as they are, or &hellip; the other option is to switch away to Wordpress or Ghost or Tumblr or whatever else (thought I don&rsquo;t want to migrate my posts <em>again</em>, so if I do something like that I&rsquo;ll just leave all this stuff here, with a pointer to it &hellip;).</p>

<p><em><strong>Update</strong></em>: I realized I had once started <a href="http://agamposts.tumblr.com">a Tumblr blog</a> (or is that a <em>tumblog</em> ?), so might as well repurpose it for something other than just snippets. If you&rsquo;re one of the two people who read this blog (aha! I had Google Analytics enabled!), you can &ldquo;add&rdquo; me, or &ldquo;follow&rdquo; me there. Or whatever the cool kids are calling it these days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying Out Prose]]></title>
    <link href="http://agam.github.io/blog/2014/05/07/trying-out-prose/"/>
    <updated>2014-05-07T00:00:00-07:00</updated>
    <id>http://agam.github.io/blog/2014/05/07/trying-out-prose</id>
    <content type="html"><![CDATA[<h2>Trying out Prose.IO</h2>

<p>Hmm &hellip; let&rsquo;s see if this works. Would make the whole workflow much faster and much easier.</p>

<p>OTOH my last update was way, way, <em>way</em> back. Yes, I should post more as myself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Cloud ... again !]]></title>
    <link href="http://agam.github.io/blog/2014/04/02/google-cloud-dot-dot-dot-again/"/>
    <updated>2014-04-02T14:06:00-07:00</updated>
    <id>http://agam.github.io/blog/2014/04/02/google-cloud-dot-dot-dot-again</id>
    <content type="html"><![CDATA[<p>If you didn&rsquo;t watch the recent Google Cloud Live presentation, you missed out twice. First, you missed learning about some awesome price reductions as well as some cool features; and <em>second</em>, you missed a possible $500 credit for signing up to watch it!</p>

<p>(Though if you did, kudos, I hope you put that credit to good use!)</p>

<p>So anyway, if this credit goes through, I might spin up a VM and give this whole thing a shot again once the price reduction is confirmed &hellip;</p>

<p><strong>Edit</strong>: The credit expires in July :(</p>

<p><strong>Edit</strong>: Amazon actually has a <a href="http://aws.amazon.com/free">free tier</a> which effectively amounts to the same thing</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Lisp exercises]]></title>
    <link href="http://agam.github.io/blog/2014/03/31/some-lisp-exercises/"/>
    <updated>2014-03-31T10:25:00-07:00</updated>
    <id>http://agam.github.io/blog/2014/03/31/some-lisp-exercises</id>
    <content type="html"><![CDATA[<p>Reading through ANSI Common Lisp, and doing some of the exercises as I come across them. Here are a few from Ch 4 and 5:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">rotate-square-array</span> <span class="p">(</span><span class="nv">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">dim</span> <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">array-dimensions</span> <span class="nv">arr</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">newarr</span> <span class="p">(</span><span class="nb">make-array</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">dim</span> <span class="nv">dim</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">dotimes</span> <span class="p">(</span><span class="nv">i</span> <span class="nv">dim</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">dotimes</span> <span class="p">(</span><span class="nv">j</span> <span class="nv">dim</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">aref</span> <span class="nv">newarr</span> <span class="nv">j</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">dim</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">i</span><span class="p">)))</span> <span class="p">(</span><span class="nb">aref</span> <span class="nv">arr</span> <span class="nv">i</span> <span class="nv">j</span><span class="p">))))</span>
</span><span class='line'>    <span class="nv">newarr</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">rev-l</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">elem</span> <span class="nv">acc</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">acc</span> <span class="nv">elem</span><span class="p">))</span> <span class="nv">lst</span> <span class="ss">:initial-value</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">copy-l</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">elem</span> <span class="nv">acc</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">elem</span> <span class="nv">acc</span><span class="p">))</span> <span class="nv">lst</span>
</span><span class='line'>    <span class="ss">:initial-value</span> <span class="no">nil</span> <span class="ss">:from-end</span> <span class="no">t</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">alist-to-ht</span> <span class="p">(</span><span class="nv">alist</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">ht</span> <span class="p">(</span><span class="nb">make-hash-table</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">mapcar</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">kvpair</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">gethash</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">kvpair</span><span class="p">)</span> <span class="nv">ht</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">kvpair</span><span class="p">)))</span>
</span><span class='line'>      <span class="nv">alist</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">ht</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">ht-to-alist</span> <span class="p">(</span><span class="nv">ht</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">alist</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">maphash</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">k</span> <span class="nv">v</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">setf</span> <span class="nv">alist</span> <span class="p">(</span><span class="nb">acons</span> <span class="nv">k</span> <span class="nv">v</span> <span class="nv">alist</span><span class="p">)))</span>
</span><span class='line'>       <span class="nv">ht</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">alist</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">precedes-iter</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">pos-list</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">do*</span> <span class="p">((</span><span class="nv">last-pos</span> <span class="p">(</span><span class="nb">position</span> <span class="nv">obj</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">position</span> <span class="nv">obj</span> <span class="nv">vec</span> <span class="ss">:start</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">last-pos</span><span class="p">))))</span>
</span><span class='line'>   <span class="p">((</span><span class="nb">eql</span> <span class="nv">last-pos</span> <span class="no">nil</span><span class="p">)</span> <span class="nv">pos-list</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">last-pos</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">elem</span> <span class="p">(</span><span class="nb">elt</span> <span class="nv">vec</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">last-pos</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">setf</span> <span class="nv">pos-list</span> <span class="p">(</span><span class="nb">adjoin</span> <span class="nv">elem</span> <span class="nv">pos-list</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">precedes-recur</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">precedes-helper</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">vec</span> <span class="nv">pos-list</span> <span class="nv">start-pos</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">next-pos</span> <span class="p">(</span><span class="nb">position</span> <span class="nv">obj</span> <span class="nv">vec</span> <span class="ss">:start</span> <span class="nv">start-pos</span><span class="p">)))</span>
</span><span class='line'>         <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">next-pos</span><span class="p">)</span>
</span><span class='line'>         <span class="nv">pos-list</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">precedes-helper</span> <span class="nv">obj</span> <span class="nv">vec</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">adjoin</span> <span class="p">(</span><span class="nb">elt</span> <span class="nv">vec</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">next-pos</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>                      <span class="nv">pos-list</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">1+</span> <span class="nv">next-pos</span><span class="p">))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">precedes-helper</span> <span class="nv">obj</span> <span class="nv">vec</span> <span class="o">&#39;</span><span class="p">()</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">intersperse-recur</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">intersperse-helper</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>       <span class="no">nil</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons</span> <span class="nv">obj</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nv">intersperse-helper</span> <span class="nv">obj</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)</span> <span class="p">(</span><span class="nv">intersperse-helper</span> <span class="nv">obj</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">intersperse-iter</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">iter-lst</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">iter-lst</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">result</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">))</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">iter-lst</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">obj</span> <span class="nv">result</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null</span> <span class="nv">iter-lst</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">reverse</span> <span class="nv">result</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">within-one</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">y</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">=</span> <span class="nv">y</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">x</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">orderedlistp-recur</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">ordered-list-helper</span> <span class="p">(</span><span class="nv">elem</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>       <span class="no">t</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">x</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)))</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">within-one</span> <span class="nv">elem</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">ordered-list-helper</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">ordered-list-helper</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">orderedlistp-iter</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do*</span> <span class="p">((</span><span class="nv">ordered</span> <span class="no">t</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">within-one</span> <span class="nv">first-elem</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">remaining</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">first-elem</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">car</span> <span class="nv">remaining</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">remaining</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">cdr</span> <span class="nv">remaining</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">((</span><span class="nb">or</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">remaining</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">not</span> <span class="nv">ordered</span><span class="p">))</span>
</span><span class='line'>  <span class="nv">ordered</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">orderedlistp-map</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">flet</span> <span class="p">((</span><span class="nv">ordered-list-mapper</span> <span class="p">(</span><span class="nv">elem1</span> <span class="nv">elem2</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nv">within-one</span> <span class="nv">elem1</span> <span class="nv">elem2</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="k">return-from</span> <span class="nv">orderedlistp-map</span> <span class="no">nil</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">mapc</span> <span class="nf">#&#39;</span><span class="nv">ordered-list-mapper</span> <span class="nv">lst</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">))</span>
</span><span class='line'>  <span class="no">t</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">max-and-min</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">max-min-helper</span> <span class="p">(</span><span class="nv">lst</span> <span class="nv">curmin</span> <span class="nv">curmax</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">values</span> <span class="nv">curmin</span> <span class="nv">curmax</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">elem</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">))</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">rest</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)))</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">cond</span>
</span><span class='line'>           <span class="p">((</span><span class="nb">and</span> <span class="p">(</span><span class="nb">eql</span> <span class="nv">curmin</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">eql</span> <span class="nv">curmax</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">max-min-helper</span> <span class="nb">rest</span> <span class="nv">elem</span> <span class="nv">elem</span><span class="p">))</span>
</span><span class='line'>           <span class="p">((</span><span class="nb">&gt;</span> <span class="nv">elem</span> <span class="nv">curmax</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">max-min-helper</span> <span class="nb">rest</span> <span class="nv">curmin</span> <span class="nv">elem</span><span class="p">))</span>
</span><span class='line'>           <span class="p">((</span><span class="nb">&lt;</span> <span class="nv">elem</span> <span class="nv">curmin</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">max-min-helper</span> <span class="nb">rest</span> <span class="nv">elem</span> <span class="nv">curmax</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="no">t</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">max-min-helper</span> <span class="nb">rest</span> <span class="nv">curmin</span> <span class="nv">curmax</span><span class="p">)))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">max-min-helper</span> <span class="nv">lst</span> <span class="no">nil</span> <span class="no">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Living Pseudonymously]]></title>
    <link href="http://agam.github.io/blog/2014/02/19/living-pseudonymously/"/>
    <updated>2014-02-19T01:29:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/02/19/living-pseudonymously</id>
    <content type="html"><![CDATA[<p>For various reasons, this blog is going to be focussed just on C++ programming, as boring as that may sound.</p>

<p>I&rsquo;ll try not to make it <em>too</em> boring, but we&rsquo;ll see.</p>

<p>Meanwhile everything <em>else</em> will still exist, just not here. Starting with the last two posts.</p>

<p>If you want to try to find me you still can; but I&rsquo;m just not going to advertise it, that&rsquo;s all.</p>

<p><strong>Edit</strong>: Ok, It doesn&rsquo;t <em>entirely</em> have to be limited to that, I can still share some additional stuff, perhaps just not the <em>interesting</em> stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How fast can you factor ?]]></title>
    <link href="http://agam.github.io/blog/2014/02/04/how-fast-can-you-factor/"/>
    <updated>2014-02-04T18:52:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/02/04/how-fast-can-you-factor</id>
    <content type="html"><![CDATA[<p>For no other reason than <em>because it&rsquo;s there</em>, here is the result of asking Mathematica to factor <a href="http://en.wikipedia.org/wiki/RSA_numbers#RSA-100">RSA 100</a>.</p>

<p>In 1991,</p>

<blockquote><p>&hellip; the factorization took a few days using the multiple-polynomial quadratic sieve algorithm on a MasPar parallel computer.</p></blockquote>

<p>and now,</p>

<blockquote><p>It takes four hours to repeat this factorization using the program Msieve on a 2200 MHz Athlon 64 processor.</p></blockquote>

<p>In comparison, Mathematica took little more than an hour. Unfortunately, it was not able to parallelize it (for a <em>real</em> comparison, the <a href="http://sourceforge.net/projects/msieve/files/msieve/Msieve%20v1.51/">Msieve code</a> would have to be ported over).</p>

<p><img class="center" src="http://farm6.staticflickr.com/5510/12309071334_575cda01f9_z_d.jpg" title="" ></p>

<p><strong>Update:</strong> This has been much better documented on <a href="http://mathematica.stackexchange.com/questions/14964/time-approximation-of-decrypting-rsa-algorithm">this StackExchange thread</a>, which also links to <a href="http://reference.wolfram.com/mathematica/tutorial/SomeNotesOnInternalImplementation.html#12915">notes on internal implementation</a>, in case you&rsquo;re interested:</p>

<blockquote><p>FactorInteger switches between trial division, Pollard , Pollard rho, elliptic curve, and quadratic sieve algorithms.</p></blockquote>

<p>Finally, more on RSA Numbers, as well as a Mathematica Notebook, <a href="http://mathworld.wolfram.com/RSANumber.html">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Fun: Graph distances]]></title>
    <link href="http://agam.github.io/blog/2014/02/03/programming-fun-graph-distances/"/>
    <updated>2014-02-03T23:12:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/02/03/programming-fun-graph-distances</id>
    <content type="html"><![CDATA[<p>Interesting <a href="http://www.reddit.com/r/dailyprogrammer/comments/1tiz4z/122313_challenge_140_intermediate_graph_radius/">problem</a>: given a graph, find out the <em>minimum distance between any two nodes</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Input Description
</span><span class='line'>-----------------
</span><span class='line'>On standard console input you will be given an integer N, followed by an
</span><span class='line'>Adjacency matrix. The graph is not directed, so the matrix will always be
</span><span class='line'>reflected about the main diagonal.
</span><span class='line'>
</span><span class='line'>Output Description
</span><span class='line'>------------------
</span><span class='line'>Print the radius of the graph as an integer.</span></code></pre></td></tr></table></div></figure>


<p>There are a few ways to do this &mdash; you can run <a href="http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra&rsquo;s algorithm</a> or <a href="http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm">Floyd-Warshall algorithm</a> on the graph to find the path from each node to each other node. I sort of took a short cut &mdash; when the graph is represented as a matrix (as it is here), multiplying the matrix with itself (and adding the result to itself, so as not to lose the <em>0-step</em> info) can be used as a way of checking whether or not two nodes are connected.</p>

<p>Concretely, after <code>k</code> steps, if <code>Graph[i][j]</code> is <code>0</code> this means there is no path from <code>i</code> to <code>j</code> in <code>k</code> steps. So if you repeat this multiplication and stop when there are no zero elements, the number of multiplication steps is the minimum distance you need.</p>

<div><script src='https://gist.github.com/8794234.js'></script>
<noscript><pre><code>// Omitting headers

using namespace std;

void MatrixMultiply(
    const vector&lt;vector&lt;uint64_t&gt;&gt;&amp; source_mat1,
    const vector&lt;vector&lt;uint64_t&gt;&gt;&amp; source_mat2,
    int N,
    vector&lt;vector&lt;uint64_t&gt;&gt;* dest_mat) {
  for (int i = 0; i &lt; N; ++i) {
    vector&lt;uint64_t&gt; row;
    for (int j = 0; j &lt; N; ++j) {
      uint64_t sum = source_mat1[i][j];
      for (int k = 0; k &lt; N; ++k) {
        sum += (source_mat1[i][k] * source_mat2[k][j]);
      }
      row.push_back(sum);
    }
    dest_mat-&gt;push_back(row);
  }
}

bool AllVerticesReachable(const vector&lt;vector&lt;uint64_t&gt;&gt;&amp; mat, int N) {
  for (int i = 0; i &lt; N; ++i) {
    for (int j = 0; j &lt; N; ++j) {
      if (mat[i][j] == 0) {
        return false;
      }
    }
  }
  return true;
}

int main(int argc, char* argv[]) {
  int graph_size;
  cin &gt;&gt; graph_size;
  vector&lt;vector&lt;uint64_t&gt;&gt; graph;
  for (int i = 0; i &lt; graph_size; ++i) {
    int num;
    vector&lt;uint64_t&gt; row;
    for (int j = 0; j &lt; graph_size; ++j) {
      cin &gt;&gt; num;
      row.push_back(num);
    }
    graph.push_back(row);
  }

  // Multiply the matrix with itself
  int num_edges = 1;
  vector&lt;vector&lt;uint64_t&gt;&gt; multiplied_graph = graph;
  do {
    vector&lt;vector&lt;uint64_t&gt;&gt; temp_graph;
    MatrixMultiply(graph, multiplied_graph, graph_size, &amp;temp_graph);
    multiplied_graph = temp_graph;

    if (AllVerticesReachable(multiplied_graph, graph_size)) {
      break;
    }

    ++num_edges;
  } while (num_edges &lt; graph_size);
  cout &lt;&lt; &quot;Radius = &quot; &lt;&lt; num_edges + 1 &lt;&lt; endl;
}
</code></pre></noscript></div>


<p>[I&rsquo;m a little bored of these daily programmer questions now :( I&rsquo;ll do one more hard one and then find a new theme here.]</p>
]]></content>
  </entry>
  
</feed>
