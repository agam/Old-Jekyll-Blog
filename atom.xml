<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2014-07-30T12:28:50-07:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Other Languages]]></title>
    <link href="http://agam.github.io/blog/2014/07/30/learning-other-languages/"/>
    <updated>2014-07-30T12:23:33-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/30/learning-other-languages</id>
    <content type="html"><![CDATA[<p>I spent some time learning a decent amount of Common Lisp last year. Nothing fancy, but I&rsquo;m comfortable using quicklisp, playing around with libraries, modelling stuff, etc. I&rsquo;ve read through <a href="http://www.gigamonkeys.com/book/">PCL</a> and <a href="http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node1.html">ClTl2</a> (though unfortunately, not <a href="http://norvig.com/paip.html">PAIP</a> (not yet!)).</p>

<p>They&rsquo;ve been a bunch of other new (as in, the last 7 years ?) languages that I&rsquo;ve looked at off and on. Gone through a few tutorials, read (no, lightly skimmed) some suggested material (learn you a X, learn Y in Z minutes, etc). I <em>love</em> Common Lisp (enough to simply call it &ldquo;Lisp&rdquo; to the exclusion of the gazillion varieties of scheme (and yes, Clojure too (!))), but yeah, the lack of libraries does get to be a pain point.</p>

<p>So someone suggested I try Clojure, but I&rsquo;ll pass. I don&rsquo;t want to look at stuff ending with &ldquo;))]))})]})&rdquo;. If I need reader macros for hash-tables, <a href="http://cl21.org/">cl21</a> has it, though I think <a href="https://github.com/vseloved/rutils/blob/master/docs/ann-rutils.md">rutils</a> should suffice for a nice superset of useful library add-ons (OTOH the Overtone/Quil/ShaderTone combo does make me salivate, and I definitely <em>will</em> check try them out at some point).</p>

<p>If I <em>have</em> to work with the JVM, I figure I might as well learn something new/different that isn&rsquo;t trying too hard to be <em>Lisp</em>. Hence, <a href="http://www.scala-lang.org/">Scala</a>. I may regret this later (but how bad can it be). I hear people loved the <a href="https://www.coursera.org/course/progfun">MOOC</a> on it last year, and looks like I <em>just</em> missed the one this year, but this being Coursera (yay) I can still do the videos and the assignments.</p>

<p>Also <a href="https://www.dartlang.org/">Dart</a> because it&rsquo;s nice to get basic web UI stuff going when needed (and no, I don&rsquo;t want to know Javascript). So we&rsquo;ll see how that goes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R vs Python]]></title>
    <link href="http://agam.github.io/blog/2014/07/25/r-vs-python/"/>
    <updated>2014-07-25T16:22:39-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/25/r-vs-python</id>
    <content type="html"><![CDATA[<p>A lot of virtual ink has been spilled on whether R or Python is better suited to the needs of <a href="http://www.analyticbridge.com/profiles/blogs/the-death-of-the-statistician">&ldquo;data scientists&rdquo;</a>.</p>

<p>Numerous people (no, <em>evangelicals</em>) have weighed in <a href="http://inside-bigdata.com/2013/12/09/data-science-wars-python-vs-r/">with</a> <a href="http://readwrite.com/2013/11/25/python-displacing-r-as-the-programming-language-for-data-science">their</a> <a href="http://redmonk.com/sogrady/2013/11/26/python-r/">polemics</a> (summarized, briefly as &ldquo;R is not really a language!&rdquo;, &ldquo;Python is displacing R!&rdquo;, and &ldquo;Will Python kill R?&rdquo;).</p>

<p>So, it&rsquo;s confusing (i.e., if you happen to care at all, though you don&rsquo;t have to; this is the internet, where the less people know or care about something, the stronger their opinions on it), but luckily someone did come up with a <em>data-driven approach</em> to solving this problem. Check it out:</p>

<ul>
<li><a href="http://www.theswarmlab.com/r-vs-python-round-1/">Round 1</a></li>
<li>Round 2 (<a href="http://www.theswarmlab.com/r-vs-python-round-2/">part 1</a> and <a href="http://www.theswarmlab.com/r-vs-python-round-2-22/">part 2</a>)</li>
</ul>


<p>Now you can <em>make up your own damn mind</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On moving from development to writing]]></title>
    <link href="http://agam.github.io/blog/2014/07/25/on-moving-from-development-to-writing/"/>
    <updated>2014-07-25T13:11:30-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/25/on-moving-from-development-to-writing</id>
    <content type="html"><![CDATA[<p>From <a href="http://mattgemmell.com/confessions-of-an-ex-developer/">Matt Gemmell</a>. I have to say I&rsquo;ve been feeling the same way for some time now!</p>

<blockquote><p>We’ve had our (latest) software Renaissance in the form of the mobile platforms and their App Stores, and I think the software biz is now starting to slide back towards consolidation and mega-corps again. <em>It’s not a particularly great time to be an indie app developer anymore.</em></p>

<p>Small shops are closing. Three-person companies are dropping back to sole proprietorships all over the place. Products are being acquired every week, usually just for their development teams, and then discarded.</p>

<p><strong>The implacable, crushing wheels of industry, slow to move because of their size, have at last arrived on the frontier</strong>. Our frontier, or at least yours now. I’ve relinquished my claim.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple game of life]]></title>
    <link href="http://agam.github.io/blog/2014/07/25/simple-game-of-life/"/>
    <updated>2014-07-25T13:10:46-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/25/simple-game-of-life</id>
    <content type="html"><![CDATA[<p>(Just for fun)</p>

<div><script src='https://gist.github.com/a832613064f958641330.js'></script>
<noscript><pre><code>(defpackage :game-of-life
  (:use :cl))
(in-package :game-of-life)

(defparameter *board-size* 10)
(defparameter *game-board* nil)

(defparameter *space* #\ )
(defparameter *life* #\#)

(defun make-new-board ()
  (make-array (list *board-size* *board-size*)
          :element-type &#39;(mod 2)
          :initial-element 0))

(defun start-game ()
  (setf *game-board* (make-new-board)))


(defun print-board ()
  (dotimes (i *board-size*)
    (dotimes (j *board-size*)
      (if (= 0 (aref *game-board* i j))
      (princ *space*)
      (princ *life*)))
    (terpri)))

(defun add-life (x y)
  (setf (aref *game-board* x y) 1))

(defparameter *environment-radius* 1)

(defun get-environment (x y)
  &quot;Create a matrix of size 2*radius + 1, with the element
itself implicitly at (radius,radius) set to 0&quot;
  (let* ((env-size (1+ (* 2 *environment-radius*)))
     (env (make-array (list env-size env-size)
             :element-type &#39;(mod 2)
             :initial-element 0)))
    (dotimes (i env-size)
      (dotimes (j env-size)
    (let ((x-offset (+ x (- i *environment-radius*)))
          (y-offset (+ y (- j *environment-radius*))))
      (if (and (&gt; x-offset 0) (&lt; x-offset *board-size*)
           (&gt; y-offset 0) (&lt; y-offset *board-size*))
          (setf (aref env i j) (aref *game-board* x-offset y-offset))
          (setf (aref env i j) 0)))))
    env))

(defun count-living-neighbors (env)
  (let* ((num 0)
     (env-size (1+ (* 2 *environment-radius*))))
    (dotimes (i env-size)
      (dotimes (j env-size)
    (when (and (= 1 (aref env i j))
           (or (/= i *environment-radius*)
               (/= j *environment-radius*)))
      (incf num))))
    num))

(defparameter *birth-number* 3)
(defparameter *lonely-number* 1)
(defparameter *crowded-number* 4)

(defun can-be-born (neighbors)
  (= *birth-number* neighbors))

(defun will-survive (neighbors)
  (and (&gt; neighbors *lonely-number*)
       (&lt; neighbors *crowded-number*)))

(defun live-or-die (env)
  (let ((current (aref env *environment-radius* *environment-radius*))
    (living-neighbors (count-living-neighbors env)))
    ;;(format t &quot;~%Debug: Current = ~S, num-neighbors = ~S&quot; current living-neighbors)
    (if (= 0 current)
    (can-be-born living-neighbors)
    (will-survive living-neighbors))))

(defun cell-representation (truth)
  (if truth
      1
      0))

(defun step-board ()
  &quot;Iterate the board by one time step, growing or shrinking life as appropriate&quot;
  (let ((next-board (make-new-board)))
    (dotimes (i *board-size*)
      (dotimes (j *board-size*)
    (let* ((environment (get-environment i j))
           (next (cell-representation (live-or-die environment))))
      ;;(format t &quot;Debug: Cell: ~S, Environment: ~S, Next: ~S~%&quot; (aref *game-board* i j) environment next)
      (setf (aref next-board i j) next))))
    (setf *game-board* next-board)))</code></pre></noscript></div>


<p>Maybe I&rsquo;ll add a GUI and some tools later, but for now you have to do something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(start-game)
</span><span class='line'>(add-life 4 5)
</span><span class='line'>(add-life 5 5)
</span><span class='line'>(add-life 6 5)
</span><span class='line'>(print-board)
</span><span class='line'>(step-board)
</span><span class='line'>(print-board)</span></code></pre></td></tr></table></div></figure>


<p>which should show</p>

<pre>



    #
    #
    #



</pre>


<p>followed by</p>

<pre>



    ###





</pre>


<p>and so on &hellip;</p>

<p><em>Update:</em></p>

<p>It&rsquo;s easy to try out patterns. Here are a few typical ones:</p>

<div><script src='https://gist.github.com/527c5fa85b316c84e9ba.js'></script>
<noscript><pre><code>
;;; Useful helpers to add stuff to the board. Describe a pattern as a list.
(defun add-life (x y)
  (setf (aref *game-board* y x) 1))

(defun draw-pattern (x y pattern)
  &quot;Assuming &#39;pattern&#39; is specified as a row-major set of 1s and 0s, replicates that on the board&quot;
  (mapindex #&#39;(lambda (row-num row)
        (mapindex #&#39;(lambda (col-num entry)
                  (let ((x-eff (+ x col-num))
                    (y-eff (+ y row-num)))
                (when (and (&lt; x-eff *board-size*)
                       (&lt; y-eff *board-size*))
                  (setf (aref *game-board* y-eff x-eff) entry))))
              row))
        pattern))
    

;; Sample oscillating patterns
(defun draw-blinker (x y)
  (draw-pattern x y
        &#39;((1)
          (1)
          (1))))

(defun draw-toad (x y)
  (draw-pattern x y
        &#39;((0 1 1 1)
          (1 1 1 0))))

(defun draw-beacon (x y)
  (draw-pattern x y
        &#39;((1 1 0 0)
          (1 1 0 0)
          (0 0 1 1)
          (0 0 1 1))))

;; Sample fixed patterns
(defun draw-loaf (x y)
  (draw-pattern x y
        &#39;((0 1 1 0)
          (1 0 0 1)
          (0 1 0 1)
          (0 0 1 0))))

(defun draw-block (x y)
  (draw-pattern x y
        &#39;((1 1)
          (1 1))))

;; Sample moving pattern
(defun draw-glider-moving-right (x y)
  (draw-pattern x y
        &#39;((0 1 0)
          (0 0 1)
          (1 1 1))))

(defun draw-glider-moving-left (x y)
  (draw-pattern x y
        &#39;((0 1 0)
          (1 0 0)
          (1 1 1))))</code></pre></noscript></div>


<p>Then you can do something like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(loop repeat 5 do (print-board) (step-board))</span></code></pre></td></tr></table></div></figure>


<p>and watch a few iterations. Of course, this is probably better implemented as a mobile app, I suppose. But yeah, still fun. Try out a <a href="http://wwwhomes.uni-bielefeld.de/achim/moving.html">few other spaceships</a> if you like &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to Github]]></title>
    <link href="http://agam.github.io/blog/2014/07/25/back-to-github/"/>
    <updated>2014-07-25T13:06:07-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/25/back-to-github</id>
    <content type="html"><![CDATA[<p>Ok, I&rsquo;ve been talked back off the ledge. Perhaps I over-reacted a bit when I fled to <a href="http://agamposts.tumblr.com/">Tumblr</a> and then to Wordpress.</p>

<p>I will undo some of that and continue living here for a while. Until the next catastrophe, I suppose. Or maybe I won&rsquo;t call it that.</p>

<p>So I&rsquo;ll move a couple of the posts I created there back here and delete that blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grumbling about Jekyll]]></title>
    <link href="http://agam.github.io/blog/2014/07/14/grumbling-about-jekyll/"/>
    <updated>2014-07-14T12:48:00-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/14/grumbling-about-jekyll</id>
    <content type="html"><![CDATA[<p>Yeah, not happy about how these dependencies keep breaking. It&rsquo;s a reminder about how fragile these scripting ecosystems are.</p>

<p>Seeing &#8220;Gem::LoadError: You have already activated rake 10.2.2, but your Gemfile requires rake 0.9.6.&#8220;` once is enough.</p>

<p>I tried a bunch of stuff and none of it worked. Eventually I gave up, deleted <code>Gemfile.lock</code>, ran <code>bundle install</code>, and just switched my workflow over to using <code>bundle exec rake ...</code> instead of just <code>rake ...</code>. Which grates on me now, but whatever.</p>

<p>Oh wait, no that changed <em>nothing</em>. Bundle is still using <code>rake 0.9.6</code>. Do I need to muck around in the Gemfile now? Why can&rsquo;t it just, you know use this &ldquo;activated version&rdquo; instead?</p>

<p>Nooo &hellip; I have an old version of ruby. I know, I&rsquo;ll use <code>rvm</code>, which I used when I got started with all this. Except &hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RVM is not a function, selecting rubies with 'rvm use ...' will not work.
</span><span class='line'>
</span><span class='line'>You need to change your terminal emulator preferences to allow login shell.
</span><span class='line'>Sometimes it is required to use `/bin/bash --login` as the command.
</span><span class='line'>Please visit https://rvm.io/integration/gnome-terminal/ for a example.</span></code></pre></td></tr></table></div></figure>


<p>There <em>must</em> be a way out. Doesn&rsquo;t Ubuntu update ruby? Let&rsquo;s try <code>sudo apt-get upgrade ruby</code>. No, it&rsquo;s already the &ldquo;latest version&rdquo;.</p>

<p>What? Ah yes, the breakdown in sensible versioning: different versions are just different names here, let&rsquo;s try <code>sudo apt-get install ruby1.9</code> instead.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The following packages have unmet dependencies:
</span><span class='line'> libodbc-ruby1.9.1 : Depends: ruby-odbc but it is not going to be installed
</span><span class='line'> libodbc-ruby1.9.1-dbg : Depends: ruby-odbc-dbg but it is not going to be installed
</span><span class='line'>E: Unable to correct problems, you have held broken packages.</span></code></pre></td></tr></table></div></figure>


<p>I have &ldquo;held broken packages&rdquo;! Indeed! Regardless, something seems to have happened, so <code>sudo ln -sf /usr/bin/ruby1.9.1 /usr/bin/ruby</code> might do something ?</p>

<p>Alriiite! Let&rsquo;s try to use <code>rake</code> again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake generate
</span><span class='line'>Could not find rake-0.9.6 in any of the sources</span></code></pre></td></tr></table></div></figure>


<p>Hmm, perhaps I need to rerun <code>bundle update</code> ?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Installing RedCloth (4.2.9) with native extensions /usr/lib/ruby/1.9.1/rubygems/installer.rb:552:in `rescue in block in build_extensions': ERROR: Failed to build gem native extension. (Gem::Installer::ExtensionBuildError)
</span><span class='line'>
</span><span class='line'>        /usr/bin/ruby1.9.1 extconf.rb 
</span><span class='line'>/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require': cannot load such file -- mkmf (LoadError)
</span><span class='line'>                           from /usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
</span><span class='line'>                           from extconf.rb:1:in `&lt;main&gt;'
</span></code></pre></td></tr></table></div></figure>


<p>Clearly, I am the stupid n00b here. I&rsquo;ve managed to end up worse off than where I started. Help!</p>

<p>Time to try something different. Overwrite the Gemfile with <a href="https://github.com/imathis/octopress/blob/master/Gemfile">the octopress master copy</a> and run <code>bundle install</code> again.</p>

<p>BTW, did I mention how long this step takes? No? Too bad. You&rsquo;ll just have to find out for yourself.</p>

<p><lolrus>Nooo! I still be getting error!</lolrus></p>

<p>What does the great and benevolent <a href="http://stackoverflow.com/questions/12149503/snorby-setup-redcloth-error">Stackoverflow suggest</a>? <code>sudo apt-get install ruby1.9.1-dev</code></p>

<p>At this point the magnitude of my true dependencies was revealed to me:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Fetching source index for https://rubygems.org/
</span><span class='line'>Using rake (10.3.2) 
</span><span class='line'>Installing RedCloth (4.2.9) with native extensions 
</span><span class='line'>Installing blankslate (2.1.2.4) 
</span><span class='line'>Installing timers (1.1.0) 
</span><span class='line'>Installing celluloid (0.15.2) 
</span><span class='line'>Installing chunky_png (1.3.1) 
</span><span class='line'>Installing fast-stemmer (1.0.2) with native extensions 
</span><span class='line'>Installing classifier (1.3.4) 
</span><span class='line'>Installing coffee-script-source (1.7.1) 
</span><span class='line'>Installing execjs (2.2.1) 
</span><span class='line'>Installing coffee-script (2.3.0) 
</span><span class='line'>Installing colorator (0.1) 
</span><span class='line'>Installing fssm (0.2.10) 
</span><span class='line'>Installing sass (3.2.19) 
</span><span class='line'>Installing compass (0.12.6) 
</span><span class='line'>Installing ffi (1.9.3) with native extensions 
</span><span class='line'>Installing tilt (1.4.1) 
</span><span class='line'>Installing haml (4.0.5) 
</span><span class='line'>Installing jekyll-coffeescript (1.0.0) 
</span><span class='line'>Installing jekyll-gist (1.1.0) 
</span><span class='line'>Installing jekyll-paginate (1.0.0) 
</span><span class='line'>Installing jekyll-sass-converter (1.0.0) 
</span><span class='line'>Installing rb-fsevent (0.9.4) 
</span><span class='line'>Installing rb-inotify (0.9.5) 
</span><span class='line'>Installing listen (2.7.9) 
</span><span class='line'>Installing jekyll-watch (1.0.0) 
</span><span class='line'>Installing kramdown (1.4.0) 
</span><span class='line'>Installing liquid (2.6.1) 
</span><span class='line'>Installing mercenary (0.3.4) 
</span><span class='line'>Installing posix-spawn (0.3.8) with native extensions 
</span><span class='line'>Installing yajl-ruby (1.1.0) with native extensions 
</span><span class='line'>Installing pygments.rb (0.6.0) 
</span><span class='line'>Installing redcarpet (3.1.2) with native extensions 
</span><span class='line'>Installing safe_yaml (1.0.3) 
</span><span class='line'>Installing parslet (1.5.0) 
</span><span class='line'>Installing toml (0.1.1) 
</span><span class='line'>Installing jekyll (2.1.1) 
</span><span class='line'>Installing jekyll-date-format (1.0.0) 
</span><span class='line'>Installing jekyll-page-hooks (1.3.0) 
</span><span class='line'>Installing jekyll-sitemap (0.5.0) 
</span><span class='line'>Installing rack (1.5.2) 
</span><span class='line'>Installing rack-protection (1.5.3) 
</span><span class='line'>Installing rdiscount (2.0.7.3) with native extensions 
</span><span class='line'>Installing rubypants (0.2.0) 
</span><span class='line'>Installing sass-globbing (1.0.0) 
</span><span class='line'>Installing sinatra (1.4.5) 
</span><span class='line'>Installing stringex (1.4.0) 
</span><span class='line'>Using bundler (1.0.15) 
</span><span class='line'>Your bundle is complete! It was installed into ./liquid</span></code></pre></td></tr></table></div></figure>


<p>After that cheeful status update, I thought I&rsquo;d start by trying out the old workflow again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>Could not find rake-10.3.2 in any of the sources
</span><span class='line'>Run `bundle install` to install missing gems.</span></code></pre></td></tr></table></div></figure>


<p>Too optimistic too soon, eh?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake generate
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>overwrite source/stylesheets/screen.css 
</span><span class='line'>/usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/execjs-2.2.1/lib/execjs/runtimes.rb:51:in `autodetect': Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes. (ExecJS::RuntimeUnavailable)
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/execjs-2.2.1/lib/execjs.rb:5:in `&lt;module:ExecJS&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/execjs-2.2.1/lib/execjs.rb:4:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/coffee-script-2.3.0/lib/coffee_script.rb:1:in `require'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/coffee-script-2.3.0/lib/coffee_script.rb:1:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/coffee-script-2.3.0/lib/coffee-script.rb:1:in `require'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/coffee-script-2.3.0/lib/coffee-script.rb:1:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-coffeescript-1.0.0/lib/jekyll-coffeescript.rb:2:in `require'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-coffeescript-1.0.0/lib/jekyll-coffeescript.rb:2:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-2.1.1/lib/jekyll.rb:75:in `require'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-2.1.1/lib/jekyll.rb:75:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-2.1.1/bin/jekyll:6:in `require'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/gems/jekyll-2.1.1/bin/jekyll:6:in `&lt;top (required)&gt;'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/bin/jekyll:19:in `load'
</span><span class='line'>                                                            from /usr/local/google/home/agam/Documents/agam.github.io/liquid/ruby/1.9.1/bin/jekyll:19:in `&lt;main&gt;'</span></code></pre></td></tr></table></div></figure>


<p>Obviously, there&rsquo;s one dependency missing from the list above. What, you say, you <em>didn&rsquo;t</em> know you need to install <code>Node.js</code> too?</p>

<p><code>sudo apt-get install nodejs</code></p>

<p><strong>Are we there yet?</strong> The suspense is killing me. Nope, running <code>bundle exec rake generate</code> just (very helpfully!) shows me</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake generate
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>jekyll 2.1.1 -- Jekyll is a blog-aware, static site generator in Ruby
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  jekyll &lt;subcommand&gt; [options]
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>        -s, --source [DIR]  Source directory (defaults to ./)
</span><span class='line'>        -d, --destination [DIR]  Destination directory (defaults to ./_site)
</span><span class='line'>            --safe         Safe mode (defaults to false)
</span><span class='line'>        -p, --plugins PLUGINS_DIR1[,PLUGINS_DIR2[,...]]  Plugins directory (defaults to ./_plugins)
</span><span class='line'>            --layouts DIR  Layouts directory (defaults to ./_layouts)
</span><span class='line'>        -h, --help         Show this message
</span><span class='line'>        -v, --version      Print the name and version
</span><span class='line'>        -t, --trace        Show the full backtrace when an error occurs
</span><span class='line'>
</span><span class='line'>Subcommands:
</span><span class='line'>  build                 Build your site
</span><span class='line'>  docs                  Launch local server with docs for Jekyll v2.1.1
</span><span class='line'>  new                   Creates a new Jekyll site scaffold in PATH
</span><span class='line'>  serve, server         Serve your site locally
</span><span class='line'>  doctor, hyde          Search site and print specific deprecation warnings</span></code></pre></td></tr></table></div></figure>


<p>Yes, I knew Jekyll was under that somewhere. That&rsquo;s sort of why I started using all this in the first place. Thanks for reminding me though. When I started writing this post I thought it would be a couple of lines, a quick edit-save-post, all done in five minutes. Cue evil laughter.</p>

<p><em>What, give up now? In our moment of triumph?</em> I overwrote the Gemfile earlier; what about doing the same for the Rakefile?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake generate
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>Configuration file: /usr/local/google/home/agam/Documents/agam.github.io/_config.yml
</span><span class='line'>       Deprecation: The 'pygments' configuration option has been renamed to 'highlighter'. Please update your config file accordingly. The allowed values are 'rouge', 'pygments' or null.
</span><span class='line'>            Source: source
</span><span class='line'>       Destination: public
</span><span class='line'>      Generating... 
</span><span class='line'>jekyll 2.1.1 | Error:  undefined method `published' for &lt;Post: /blog/2013/06/26/data-structures-haskell-vs-cpp&gt;:Jekyll::Post</span></code></pre></td></tr></table></div></figure>


<p>Now I&rsquo;ve <em>retroactively</em> broken stuff.</p>

<p>Finally, a light dawns: I should have done the following right at the beginning: <code>git pull origin master</code>. And of course, doing this now gives merge conflicts galore.</p>

<p>&hellip; many tens of minutes pass &hellip;</p>

<p>I realized there is no alternative to delve into the source here. <code>lib/jekyll/post.rb' has a</code>published?<code>method, perhaps this is being called without the trailing</code>?` somewhere? (BTW this is EXACTLY why I <strong>hate</strong> dynamically-typed, uncompiled languages!).</p>

<p><code>plugins/preview_unpublished.rb</code> shows a match &hellip; so I deleted it.</p>

<p>Now we have a new problem &hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jekyll 2.1.1 | Error:  undefined method `subclasses' for Jekyll::PostFilter:Class</span></code></pre></td></tr></table></div></figure>


<p>&hellip; but at least the old one is gone! We&rsquo;re getting closer!</p>

<p>Sure enough, it&rsquo;s another plugin: <code>plugins/post_filters.rb</code>. At this point I realize there may be many more, so I see the list of plugins <a href="https://github.com/imathis/octopress/tree/master/plugins">that should exist by default</a> and get rid of any others. Turns out, it&rsquo;s just one more: <code>plugins/sitemap_generator.rb</code>.</p>

<p>No luck yet.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Liquid Exception: undefined method `deep_merge' for #&lt;Hash:0x0000000277cb38&gt; in sitemap.xml</span></code></pre></td></tr></table></div></figure>


<p>Now I&rsquo;m getting impatient. I just want to post a &ldquo;Goodbye&rdquo; post. One last post. I&rsquo;ll render it myself if I have to.</p>

<p>Ok, it&rsquo;s the plugins again. I got rid of <code>plugins/date.rb</code> and updated <code>plugins/octopress_filters.rb</code>.</p>

<p>IT WORKS! Oh god it works!</p>

<p>Ok, my custom theme is gone and all, but that&rsquo;s ok, I won&rsquo;t complain. <em>Update</em>: Needless to say, I got it back (after all this, surely &hellip;)</p>

<p>All&rsquo;s well that ends well, you say? <em>WTF!</em> Nothing new here &hellip; the whole point of relying on stuff like this is after all to engage in this periodic ritual sacrifice of time. Which is great when you&rsquo;re <em>12</em>, not so much now.</p>

<p>I could just leave things as they are, or &hellip; the other option is to switch away to Wordpress or Ghost or Tumblr or whatever else (thought I don&rsquo;t want to migrate my posts <em>again</em>, so if I do something like that I&rsquo;ll just leave all this stuff here, with a pointer to it &hellip;).</p>

<p><em><strong>Update</strong></em>: I realized I had once started <a href="http://agamposts.tumblr.com">a Tumblr blog</a> (or is that a <em>tumblog</em> ?), so might as well repurpose it for something other than just snippets. If you&rsquo;re one of the two people who read this blog (aha! I had Google Analytics enabled!), you can &ldquo;add&rdquo; me, or &ldquo;follow&rdquo; me there. Or whatever the cool kids are calling it these days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying Out Prose]]></title>
    <link href="http://agam.github.io/blog/2014/05/07/trying-out-prose/"/>
    <updated>2014-05-07T00:00:00-07:00</updated>
    <id>http://agam.github.io/blog/2014/05/07/trying-out-prose</id>
    <content type="html"><![CDATA[<h2>Trying out Prose.IO</h2>

<p>Hmm &hellip; let&rsquo;s see if this works. Would make the whole workflow much faster and much easier.</p>

<p>OTOH my last update was way, way, <em>way</em> back. Yes, I should post more as myself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Cloud ... again !]]></title>
    <link href="http://agam.github.io/blog/2014/04/02/google-cloud-dot-dot-dot-again/"/>
    <updated>2014-04-02T14:06:00-07:00</updated>
    <id>http://agam.github.io/blog/2014/04/02/google-cloud-dot-dot-dot-again</id>
    <content type="html"><![CDATA[<p>If you didn&rsquo;t watch the recent Google Cloud Live presentation, you missed out twice. First, you missed learning about some awesome price reductions as well as some cool features; and <em>second</em>, you missed a possible $500 credit for signing up to watch it!</p>

<p>(Though if you did, kudos, I hope you put that credit to good use!)</p>

<p>So anyway, if this credit goes through, I might spin up a VM and give this whole thing a shot again once the price reduction is confirmed &hellip;</p>

<p><strong>Edit</strong>: The credit expires in July :(</p>

<p><strong>Edit</strong>: Amazon actually has a <a href="http://aws.amazon.com/free">free tier</a> which effectively amounts to the same thing</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Lisp exercises]]></title>
    <link href="http://agam.github.io/blog/2014/03/31/some-lisp-exercises/"/>
    <updated>2014-03-31T10:25:00-07:00</updated>
    <id>http://agam.github.io/blog/2014/03/31/some-lisp-exercises</id>
    <content type="html"><![CDATA[<p>Reading through ANSI Common Lisp, and doing some of the exercises as I come across them. Here are a few from Ch 4 and 5:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">rotate-square-array</span> <span class="p">(</span><span class="nv">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">dim</span> <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">array-dimensions</span> <span class="nv">arr</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">newarr</span> <span class="p">(</span><span class="nb">make-array</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">dim</span> <span class="nv">dim</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">dotimes</span> <span class="p">(</span><span class="nv">i</span> <span class="nv">dim</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">dotimes</span> <span class="p">(</span><span class="nv">j</span> <span class="nv">dim</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">aref</span> <span class="nv">newarr</span> <span class="nv">j</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">dim</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">i</span><span class="p">)))</span> <span class="p">(</span><span class="nb">aref</span> <span class="nv">arr</span> <span class="nv">i</span> <span class="nv">j</span><span class="p">))))</span>
</span><span class='line'>    <span class="nv">newarr</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">rev-l</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">elem</span> <span class="nv">acc</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">acc</span> <span class="nv">elem</span><span class="p">))</span> <span class="nv">lst</span> <span class="ss">:initial-value</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">copy-l</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">elem</span> <span class="nv">acc</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">elem</span> <span class="nv">acc</span><span class="p">))</span> <span class="nv">lst</span>
</span><span class='line'>    <span class="ss">:initial-value</span> <span class="no">nil</span> <span class="ss">:from-end</span> <span class="no">t</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">alist-to-ht</span> <span class="p">(</span><span class="nv">alist</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">ht</span> <span class="p">(</span><span class="nb">make-hash-table</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">mapcar</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">kvpair</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">gethash</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">kvpair</span><span class="p">)</span> <span class="nv">ht</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">kvpair</span><span class="p">)))</span>
</span><span class='line'>      <span class="nv">alist</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">ht</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">ht-to-alist</span> <span class="p">(</span><span class="nv">ht</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">alist</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">maphash</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">k</span> <span class="nv">v</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">setf</span> <span class="nv">alist</span> <span class="p">(</span><span class="nb">acons</span> <span class="nv">k</span> <span class="nv">v</span> <span class="nv">alist</span><span class="p">)))</span>
</span><span class='line'>       <span class="nv">ht</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">alist</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">precedes-iter</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">pos-list</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">do*</span> <span class="p">((</span><span class="nv">last-pos</span> <span class="p">(</span><span class="nb">position</span> <span class="nv">obj</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">position</span> <span class="nv">obj</span> <span class="nv">vec</span> <span class="ss">:start</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">last-pos</span><span class="p">))))</span>
</span><span class='line'>   <span class="p">((</span><span class="nb">eql</span> <span class="nv">last-pos</span> <span class="no">nil</span><span class="p">)</span> <span class="nv">pos-list</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">last-pos</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">elem</span> <span class="p">(</span><span class="nb">elt</span> <span class="nv">vec</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">last-pos</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">setf</span> <span class="nv">pos-list</span> <span class="p">(</span><span class="nb">adjoin</span> <span class="nv">elem</span> <span class="nv">pos-list</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">precedes-recur</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">precedes-helper</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">vec</span> <span class="nv">pos-list</span> <span class="nv">start-pos</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">next-pos</span> <span class="p">(</span><span class="nb">position</span> <span class="nv">obj</span> <span class="nv">vec</span> <span class="ss">:start</span> <span class="nv">start-pos</span><span class="p">)))</span>
</span><span class='line'>         <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">next-pos</span><span class="p">)</span>
</span><span class='line'>         <span class="nv">pos-list</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">precedes-helper</span> <span class="nv">obj</span> <span class="nv">vec</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">adjoin</span> <span class="p">(</span><span class="nb">elt</span> <span class="nv">vec</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">next-pos</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>                      <span class="nv">pos-list</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">1+</span> <span class="nv">next-pos</span><span class="p">))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">precedes-helper</span> <span class="nv">obj</span> <span class="nv">vec</span> <span class="o">&#39;</span><span class="p">()</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">intersperse-recur</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">intersperse-helper</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>       <span class="no">nil</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons</span> <span class="nv">obj</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nv">intersperse-helper</span> <span class="nv">obj</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)</span> <span class="p">(</span><span class="nv">intersperse-helper</span> <span class="nv">obj</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">intersperse-iter</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">iter-lst</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">iter-lst</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">result</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">))</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">iter-lst</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">obj</span> <span class="nv">result</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null</span> <span class="nv">iter-lst</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">reverse</span> <span class="nv">result</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">within-one</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">y</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">=</span> <span class="nv">y</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">x</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">orderedlistp-recur</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">ordered-list-helper</span> <span class="p">(</span><span class="nv">elem</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>       <span class="no">t</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">x</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)))</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">within-one</span> <span class="nv">elem</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">ordered-list-helper</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">ordered-list-helper</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">orderedlistp-iter</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do*</span> <span class="p">((</span><span class="nv">ordered</span> <span class="no">t</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">within-one</span> <span class="nv">first-elem</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">remaining</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">first-elem</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">car</span> <span class="nv">remaining</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">remaining</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">cdr</span> <span class="nv">remaining</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">((</span><span class="nb">or</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">remaining</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">not</span> <span class="nv">ordered</span><span class="p">))</span>
</span><span class='line'>  <span class="nv">ordered</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">orderedlistp-map</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">flet</span> <span class="p">((</span><span class="nv">ordered-list-mapper</span> <span class="p">(</span><span class="nv">elem1</span> <span class="nv">elem2</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nv">within-one</span> <span class="nv">elem1</span> <span class="nv">elem2</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="k">return-from</span> <span class="nv">orderedlistp-map</span> <span class="no">nil</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">mapc</span> <span class="nf">#&#39;</span><span class="nv">ordered-list-mapper</span> <span class="nv">lst</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">))</span>
</span><span class='line'>  <span class="no">t</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">max-and-min</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">max-min-helper</span> <span class="p">(</span><span class="nv">lst</span> <span class="nv">curmin</span> <span class="nv">curmax</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">lst</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">values</span> <span class="nv">curmin</span> <span class="nv">curmax</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">elem</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">))</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">rest</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)))</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">cond</span>
</span><span class='line'>           <span class="p">((</span><span class="nb">and</span> <span class="p">(</span><span class="nb">eql</span> <span class="nv">curmin</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">eql</span> <span class="nv">curmax</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">max-min-helper</span> <span class="nb">rest</span> <span class="nv">elem</span> <span class="nv">elem</span><span class="p">))</span>
</span><span class='line'>           <span class="p">((</span><span class="nb">&gt;</span> <span class="nv">elem</span> <span class="nv">curmax</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">max-min-helper</span> <span class="nb">rest</span> <span class="nv">curmin</span> <span class="nv">elem</span><span class="p">))</span>
</span><span class='line'>           <span class="p">((</span><span class="nb">&lt;</span> <span class="nv">elem</span> <span class="nv">curmin</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">max-min-helper</span> <span class="nb">rest</span> <span class="nv">elem</span> <span class="nv">curmax</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="no">t</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">max-min-helper</span> <span class="nb">rest</span> <span class="nv">curmin</span> <span class="nv">curmax</span><span class="p">)))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">max-min-helper</span> <span class="nv">lst</span> <span class="no">nil</span> <span class="no">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Living Pseudonymously]]></title>
    <link href="http://agam.github.io/blog/2014/02/19/living-pseudonymously/"/>
    <updated>2014-02-19T01:29:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/02/19/living-pseudonymously</id>
    <content type="html"><![CDATA[<p>For various reasons, this blog is going to be focussed just on C++ programming, as boring as that may sound.</p>

<p>I&rsquo;ll try not to make it <em>too</em> boring, but we&rsquo;ll see.</p>

<p>Meanwhile everything <em>else</em> will still exist, just not here. Starting with the last two posts.</p>

<p>If you want to try to find me you still can; but I&rsquo;m just not going to advertise it, that&rsquo;s all.</p>

<p><strong>Edit</strong>: Ok, It doesn&rsquo;t <em>entirely</em> have to be limited to that, I can still share some additional stuff, perhaps just not the <em>interesting</em> stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How fast can you factor ?]]></title>
    <link href="http://agam.github.io/blog/2014/02/04/how-fast-can-you-factor/"/>
    <updated>2014-02-04T18:52:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/02/04/how-fast-can-you-factor</id>
    <content type="html"><![CDATA[<p>For no other reason than <em>because it&rsquo;s there</em>, here is the result of asking Mathematica to factor <a href="http://en.wikipedia.org/wiki/RSA_numbers#RSA-100">RSA 100</a>.</p>

<p>In 1991,</p>

<blockquote><p>&hellip; the factorization took a few days using the multiple-polynomial quadratic sieve algorithm on a MasPar parallel computer.</p></blockquote>

<p>and now,</p>

<blockquote><p>It takes four hours to repeat this factorization using the program Msieve on a 2200 MHz Athlon 64 processor.</p></blockquote>

<p>In comparison, Mathematica took little more than an hour. Unfortunately, it was not able to parallelize it (for a <em>real</em> comparison, the <a href="http://sourceforge.net/projects/msieve/files/msieve/Msieve%20v1.51/">Msieve code</a> would have to be ported over).</p>

<p><img class="center" src="http://farm6.staticflickr.com/5510/12309071334_575cda01f9_z_d.jpg" title="" ></p>

<p><strong>Update:</strong> This has been much better documented on <a href="http://mathematica.stackexchange.com/questions/14964/time-approximation-of-decrypting-rsa-algorithm">this StackExchange thread</a>, which also links to <a href="http://reference.wolfram.com/mathematica/tutorial/SomeNotesOnInternalImplementation.html#12915">notes on internal implementation</a>, in case you&rsquo;re interested:</p>

<blockquote><p>FactorInteger switches between trial division, Pollard , Pollard rho, elliptic curve, and quadratic sieve algorithms.</p></blockquote>

<p>Finally, more on RSA Numbers, as well as a Mathematica Notebook, <a href="http://mathworld.wolfram.com/RSANumber.html">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Fun: Graph distances]]></title>
    <link href="http://agam.github.io/blog/2014/02/03/programming-fun-graph-distances/"/>
    <updated>2014-02-03T23:12:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/02/03/programming-fun-graph-distances</id>
    <content type="html"><![CDATA[<p>Interesting <a href="http://www.reddit.com/r/dailyprogrammer/comments/1tiz4z/122313_challenge_140_intermediate_graph_radius/">problem</a>: given a graph, find out the <em>minimum distance between any two nodes</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Input Description
</span><span class='line'>-----------------
</span><span class='line'>On standard console input you will be given an integer N, followed by an
</span><span class='line'>Adjacency matrix. The graph is not directed, so the matrix will always be
</span><span class='line'>reflected about the main diagonal.
</span><span class='line'>
</span><span class='line'>Output Description
</span><span class='line'>------------------
</span><span class='line'>Print the radius of the graph as an integer.</span></code></pre></td></tr></table></div></figure>


<p>There are a few ways to do this &mdash; you can run <a href="http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra&rsquo;s algorithm</a> or <a href="http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm">Floyd-Warshall algorithm</a> on the graph to find the path from each node to each other node. I sort of took a short cut &mdash; when the graph is represented as a matrix (as it is here), multiplying the matrix with itself (and adding the result to itself, so as not to lose the <em>0-step</em> info) can be used as a way of checking whether or not two nodes are connected.</p>

<p>Concretely, after <code>k</code> steps, if <code>Graph[i][j]</code> is <code>0</code> this means there is no path from <code>i</code> to <code>j</code> in <code>k</code> steps. So if you repeat this multiplication and stop when there are no zero elements, the number of multiplication steps is the minimum distance you need.</p>

<div><script src='https://gist.github.com/8794234.js'></script>
<noscript><pre><code>// Omitting headers

using namespace std;

void MatrixMultiply(
    const vector&lt;vector&lt;uint64_t&gt;&gt;&amp; source_mat1,
    const vector&lt;vector&lt;uint64_t&gt;&gt;&amp; source_mat2,
    int N,
    vector&lt;vector&lt;uint64_t&gt;&gt;* dest_mat) {
  for (int i = 0; i &lt; N; ++i) {
    vector&lt;uint64_t&gt; row;
    for (int j = 0; j &lt; N; ++j) {
      uint64_t sum = source_mat1[i][j];
      for (int k = 0; k &lt; N; ++k) {
        sum += (source_mat1[i][k] * source_mat2[k][j]);
      }
      row.push_back(sum);
    }
    dest_mat-&gt;push_back(row);
  }
}

bool AllVerticesReachable(const vector&lt;vector&lt;uint64_t&gt;&gt;&amp; mat, int N) {
  for (int i = 0; i &lt; N; ++i) {
    for (int j = 0; j &lt; N; ++j) {
      if (mat[i][j] == 0) {
        return false;
      }
    }
  }
  return true;
}

int main(int argc, char* argv[]) {
  int graph_size;
  cin &gt;&gt; graph_size;
  vector&lt;vector&lt;uint64_t&gt;&gt; graph;
  for (int i = 0; i &lt; graph_size; ++i) {
    int num;
    vector&lt;uint64_t&gt; row;
    for (int j = 0; j &lt; graph_size; ++j) {
      cin &gt;&gt; num;
      row.push_back(num);
    }
    graph.push_back(row);
  }

  // Multiply the matrix with itself
  int num_edges = 1;
  vector&lt;vector&lt;uint64_t&gt;&gt; multiplied_graph = graph;
  do {
    vector&lt;vector&lt;uint64_t&gt;&gt; temp_graph;
    MatrixMultiply(graph, multiplied_graph, graph_size, &amp;temp_graph);
    multiplied_graph = temp_graph;

    if (AllVerticesReachable(multiplied_graph, graph_size)) {
      break;
    }

    ++num_edges;
  } while (num_edges &lt; graph_size);
  cout &lt;&lt; &quot;Radius = &quot; &lt;&lt; num_edges + 1 &lt;&lt; endl;
}
</code></pre></noscript></div>


<p>[I&rsquo;m a little bored of these daily programmer questions now :( I&rsquo;ll do one more hard one and then find a new theme here.]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minsky Turing Lecture: Part 2]]></title>
    <link href="http://agam.github.io/blog/2014/02/01/minsky-turing-lecture-part-2/"/>
    <updated>2014-02-01T08:55:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/02/01/minsky-turing-lecture-part-2</id>
    <content type="html"><![CDATA[<p>(This picks up where <a href="http://agam.github.io/blog/2014/01/26/minsky-turing-lecture-part-1/">Part 1</a> left off)</p>

<p>If you thought Minsky cared a lot about how programming languages work, he cares even more about how education &ldquo;works&rdquo;. I recently picked up <a href="http://www.amazon.com/The-Society-Mind-Marvin-Minsky/dp/0671657135">The Society of the Mind</a> so it seems a little less surprising, but read on &hellip;</p>

<h2>Computer Science and Educational models</h2>

<blockquote><p>He [the computer scientist] perceives his principal function to provide programs and machines for use in old and new educational schemes. Well and good, but I believe he has a more complex responsibility &mdash; to work out and communicate models of the process of education itself.</p></blockquote>

<p>And lest anyone doubt this &hellip;</p>

<blockquote><p>We cannot digress here to answer skeptics who feel it too simpleminded (if not impious, or obscene) to compare minds with programs. We can refer many such critics to <a href="http://www.loebner.net/Prizef/TuringArticle.html">Turing&rsquo;s paper</a>. For those who feel that the answer cannot lie in any machine, digital or otherwise, one can argue that machines, when they become intelligent, very likely will feel the same way.</p></blockquote>

<p>(If I might digress a bit, there is a very interesting footnote here by Minsky that might completely change the image in your head of <a href="http://en.wikipedia.org/wiki/Alan_Turing">Turing</a>: &ldquo; <strong>Turing was quite good at debugging hardware</strong>. He would leave the power on, so as not to lose the &lsquo;feel&rsquo; of the thing. Everyone does that today, but it is not the same thing now that the <em>circuits all work on three or five volts</em>.&rdquo;)</p>

<blockquote><p>There is a fundamental pragmatic point in favor of our propositions. The child needs models &hellip;
&hellip;
But to model his own self he <em>cannot</em> use the engine or the organism or the city or the telephone switchboard; <em>nothing will serve at all but the computer with its programs and their bugs</em></p></blockquote>

<h2>Children and Mathematics</h2>

<blockquote><p>Imagine a small child &hellip;
&hellip;
If we extrapolate today&rsquo;s trend, his mathematical education will be conducted by poorly oriented teachers and, partly, <em>by poorly programmed machines</em>; neither will be able to respond to much beyond &ldquo;correct&rdquo; and &ldquo;wrong&rdquo; answers, let alone to make reasonable interpretations of what the child does or says, because neither will contain good models of the children, or good theories of children&rsquo;s intellectual development.</p></blockquote>

<p>He goes on to give examples of how the child&rsquo;s geometric world is <em>so different</em> from ours, such as some numbers having a different <em>weight</em> or <em>depth</em> than others, or not knowing how squares and diamonds are the same shape, as shown below:</p>

<p><img class="center" src="http://farm6.staticflickr.com/5529/12246677434_860cbfa222_z_d.jpg"></p>

<p>This builds up to something I really like (if I may let my personal biases show, I like it because it validates some of my own beliefs): the idea that computational analogies can (and indeed <em>should!</em>) be more generally used to describe patterns of thought and behavior.</p>

<blockquote><p>Before computation, the community of ideas about the nature of thought was too feeble to support an effective theory of learning and development. Neither the finite-state models of the Behaviorists, the hydraulic and economic analogies of the Freudians, nor the rabbit-in-the-hat insights of the Gestaltists supplied enough ingredients to understand so intricate a subject. It needs <em>a substrate of already debugged theories and solutions</em> of related but simpler problems. Now we have a flood of such ideas, <em>well defined and implemented</em>, for <strong>thinking about thinking</strong>; only a fraction are represented in traditional psychology:</p></blockquote>

<p>Some of the ideas listed are</p>

<ul>
<li>microprogram</li>
<li>interrupt</li>
<li>garbage collection</li>
<li>macro</li>
<li>symbol table</li>
</ul>


<p>He goes on:</p>

<blockquote><p>All these serve today as tools of a curious and intricate craft, <strong>programming</strong>. But just as astronomy succeeded astrology, following Kepler&rsquo;s regularities, the discovery of <em>principles in empirical explorations of intellectual process in machines</em> should lead to a science.</p></blockquote>

<p>This finally brings him to a polemic against the nature of math education itself.</p>

<h2>Against the &ldquo;New Mathematics&rdquo; curriculum</h2>

<p>What Minsky seems to be railing here is the excessive formalism in Mathematics introduced early on, where abstract concepts like sets are introduced before trying to create a <em>familiarity</em> with numbers.</p>

<blockquote><p>Because of the formalistic approach the teacher will not be able to help the child very much with problems of formulation. For she will feel insecure herself as she drills him on such matters as the <em>difference between the empty set and nothing</em>, or the distinction between the &ldquo;numeral&rdquo; 3+5 and the numeral 8 which is the &ldquo;common name&rdquo; of the number eight, hoping he will not ask what is the common name of the fraction 8/1, which is probably different from the rational 8/1 and different from the quotient 8/1 &hellip;</p></blockquote>

<p>Here, the fractions, quotients and rationals obviously <em>should</em> be identified with each other, rather than siloed and separated by this &ldquo;maze of formalism&rdquo;. Also &hellip;</p>

<blockquote><p>It is very bad to insist that the child keep his knowledge in a simple ordered hierarchy. In order to retrieve what he needs, he must have a multiply connected network, so that he can try several ways to do each thing &hellip; Emphasis on the &ldquo;formal proof&rdquo; is destructive at this stage, because the <strong>knowledge needed for finding proofs, and for understanding them, is far more complex (and less useful) than the knowledge mentioned <em>in</em> proofs.</strong></p></blockquote>

<p>Minsky suggests that this might stem from a misconception of the form &ldquo;You can teach a child anything, if you just get the definitions precise enough&rdquo;.</p>

<p>He doesn&rsquo;t care too much about overly focusing on set theory either:</p>

<blockquote><p>Set theory is not, as the logicians and publishers would have it, <em>the</em> only and true foundation of mathematics; it is a viewpoint that is pretty good for investigating the transfinite, <em>but undistinguished for comprehending the real numbers, and quite substandard for learning about arithmetic, algebra, and geometry</em>.</p></blockquote>

<p>If there is a way to sum up his argument with one line, it is probably this:</p>

<blockquote><p>The child is expected to learn how to solve problems but we do not teach him what we know, either about the subject, or about problem-solving.</p></blockquote>

<h2>Contradiction and Solution</h2>

<blockquote><p>There is a real conflict between the logician&rsquo;s goal and the educator&rsquo;s. The logical wants to minimize the variety of ideas, and doesn&rsquo;t mind a long, thin path. The educator (rightly) wants to make the paths short and doesn&rsquo;t mind &mdash; in fact, prefers &mdash; connection to many other ideas. <em>And he cares almost not at all about the directions of the links.</em></p></blockquote>

<p>So where does the computer scientist come in to this ? In a heroic way !</p>

<blockquote><p>The computer scientist thus has a responsibility to education. Not as he thinks, <em>because he will have to program the teaching machines</em>. Certainly not because he is a skilled user of &ldquo;finite mathematics&rdquo;. <em>He knows how to debug programs</em>; he must tell the educators how to help the children to debug their own problem-solving processes. <em>He knows how procedures depend on their data structures</em>; he can tell educators how to prepare children for new ideas.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with the exponential curve]]></title>
    <link href="http://agam.github.io/blog/2014/02/01/playing-with-the-exponential-curve/"/>
    <updated>2014-02-01T06:35:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/02/01/playing-with-the-exponential-curve</id>
    <content type="html"><![CDATA[<p>I remember hearing about the <a href="http://britton.disted.camosun.bc.ca/jbchessgrain.htm">apocryphal story</a> about doubling grains of rice on a chessboard. I even tried writing powers of 2 (which at my age then just meant adding <code>2+2</code> then <code>4+4</code> etc).</p>

<p><img class="center" src="http://britton.disted.camosun.bc.ca/firdau1.jpg"></p>

<p>This is obviously the <a href="http://www.wolframalpha.com/input/?i=e+%5E+x"><code>e^x</code></a> curve, but when you normally see it drawn its self-similarity is not obvious. Mathematica&rsquo;s <code>Manipulate</code> function can help in this regard &hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Manipulate[ListPlot[Table[Power[2, i], {i, 1, n}]], {n, 1, 64}]</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://farm3.staticflickr.com/2853/12244178256_251f9fcfae_d.jpg">
<img class="center" src="http://farm6.staticflickr.com/5496/12243600435_e6faac3bbb_d.jpg">
<img class="center" src="http://farm6.staticflickr.com/5547/12244178226_2258c2c2ce_d.jpg">
<img class="center" src="http://farm3.staticflickr.com/2882/12243785163_3822d7299b_d.jpg">
<img class="center" src="http://farm8.staticflickr.com/7332/12243785183_6243378edf_d.jpg"></p>

<p>These are screenshots for increasing values of <code>n</code>: Note how they all look the same (except for the first one, where the curve is just starting out), over several orders of magnitude!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change That Font!]]></title>
    <link href="http://agam.github.io/blog/2014/02/01/change-that-font/"/>
    <updated>2014-02-01T06:25:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/02/01/change-that-font</id>
    <content type="html"><![CDATA[<p>You don&rsquo;t have to be chained to <code>Monaco</code> if you don&rsquo;t like it. I changed it to <code>Inconsolata</code>, which is as simply as <a href="http://www.levien.com/type/myfonts/inconsolata.html">downloading it</a> (click on the <em>Open Type File</em> link).</p>

<p><img class="center" src="http://farm6.staticflickr.com/5509/12246575643_d92ae27492_z_d.jpg"></p>

<p>Once you click on the downloaded file, the <strong>Font Book</strong> app should open up automatically, showing the font face and with a <code>Install</code> button.</p>

<p>Once you do this (I love this part) <em>any open font selection windows will refresh automatically</em>, and you can pick this new font for your terminal (which, by the way, I hope is <a href="http://iterm.sourceforge.net/">iTerm</a> because &hellip; if not, why?)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mathematica: 1/9998]]></title>
    <link href="http://agam.github.io/blog/2014/01/30/mathematica-1-slash-9998/"/>
    <updated>2014-01-30T23:00:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/01/30/mathematica-1-slash-9998</id>
    <content type="html"><![CDATA[<p>I saw this piece about how <code>1/1998</code> was approximated by series of powers of <code>2</code>, which raised the question, &ldquo;Can Mathematica help confirm this?&rdquo; (<em>of course it can!</em>)</p>

<p>First, a gut check to see the decimal expansion</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>N[1/9998, 100]</span></code></pre></td></tr></table></div></figure>


<p>which shows</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0.00010002000400080016003200640128025605121024204840968193638727745549 \
</span><span class='line'>10982196439287857571514302860572114</span></code></pre></td></tr></table></div></figure>


<p>(if you don&rsquo;t specify the <code>100</code> in the argument to <code>N[]</code>, it will show you just <code>0.00010002</code> by default)</p>

<p>This can be visualized as</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0.0001 +
</span><span class='line'>0.00000002 +
</span><span class='line'>0.000000000004 +
</span><span class='line'>0.0000000000000008 +
</span><span class='line'>0.00000000000000000016 +
</span><span class='line'>...
</span><span class='line'>0.000000000000000000000000000000000256 +
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>All right, so we do see these powers of 2! They seem to be in &ldquo;groups&rdquo; &mdash; <code>0004</code>, <code>0016</code>, <code>1024</code> and so on.</p>

<p>So we want to check if something like <code>2^i/10000^i</code> can add up to this number.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Parallelize[
</span><span class='line'> Table[1/9998 - Total[Table[2^i/10000^i, {i, 1, n}]], {n, 1, 10000}] ]</span></code></pre></td></tr></table></div></figure>


<p>I initially tried this <em>without</em> <code>Parallelize[]</code>, but that kept going <em>for a while</em>, so I had to abort it (<code>Evaluation</code>&ndash;><code>Abort Evaluation</code>) and try this version instead.</p>

<p>Anyway, so this whirs for a while. As this <code>htop</code> output shows, it really does use as many cores as possible.</p>

<p><img class="center" src="http://farm6.staticflickr.com/5504/12227941034_4ce9d69db4_z_d.jpg"></p>

<p>Eventually when it&rsquo;s done, we can <code>ListPlot</code> it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ListPlot[%118, Frame -&gt; True, FrameStyle -&gt; Black, 
</span><span class='line'> PlotRange -&gt; { {1, 10000}, {-0.000105, -0.000095} }]</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://farm6.staticflickr.com/5535/12227532975_ee70979b52_z_d.jpg"></p>

<p>As this graph shows, the result is remarkably close to a constant value of <code>-0.0001</code> !!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mathematica: A simple ant]]></title>
    <link href="http://agam.github.io/blog/2014/01/30/mathematica-a-simple-ant/"/>
    <updated>2014-01-30T18:16:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/01/30/mathematica-a-simple-ant</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a simple, exploratory sketch: Imagine an ant which can either move left or right, or stay in its place.</p>

<p>For simplicity, we&rsquo;ll imagine the ant starts at the center of a scale from <code>1</code> to <code>100</code>, and moves one unit at a time.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ant[k_, u_] := 
</span><span class='line'> If[ u &lt; 1/3, Min[k + 1, 100], If[u &gt; 2/3, Max[0, k - 1], k]]
</span><span class='line'>
</span><span class='line'>RecAnt[k_] := Ant[k, RandomReal[]]</span></code></pre></td></tr></table></div></figure>


<p> <img class="center" src="http://farm8.staticflickr.com/7351/12224251723_4d24311967_d.jpg"></p>

<p> <code>
 ListPlot[NestList[RecAnt, 50, 100000], ImageSize -&gt; Large, Background -&gt; LightGray]
</code></p>

<p> <img class="center" src="http://farm8.staticflickr.com/7418/12224482144_6ef516fd03_z_d.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with clojure: Part 1]]></title>
    <link href="http://agam.github.io/blog/2014/01/29/getting-started-with-clojure-part-1/"/>
    <updated>2014-01-29T18:04:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/01/29/getting-started-with-clojure-part-1</id>
    <content type="html"><![CDATA[<p>(Just a personal log so I don&rsquo;t forget some basic steps here. There may or may not be a Part 2)</p>

<h2>Setting up the REPL</h2>

<p>First, install relevant stuff. This is usually, at the minimum, something like <code>sudo apt-get install clojure1.4</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ java -cp /usr/share/java/clojure-1.4.jar clojure.main
</span><span class='line'>Clojure 1.4.0
</span><span class='line'>user=&gt; </span></code></pre></td></tr></table></div></figure>


<h2>First steps</h2>

<p>Basic Arithmetic</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (+ 2 3)
</span><span class='line'>5</span></code></pre></td></tr></table></div></figure>


<p>Basic string operation</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; "foo"
</span><span class='line'>"foo"
</span><span class='line'>
</span><span class='line'>user=&gt; (concat "foo" "bar")
</span><span class='line'>(\f \o \o \b \a \r)</span></code></pre></td></tr></table></div></figure>


<p>Variables</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (def x 4)
</span><span class='line'>#'user/x
</span><span class='line'>
</span><span class='line'>user=&gt; (+ x 5)
</span><span class='line'>9
</span><span class='line'>
</span><span class='line'>user=&gt; (def strarr ["foo" "bar"])
</span><span class='line'>#'user/strarr</span></code></pre></td></tr></table></div></figure>


<p>Basic arrays</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (count [6 5 3 4 2])
</span><span class='line'>5
</span><span class='line'>
</span><span class='line'>user=&gt; (get strarr 1)
</span><span class='line'>"bar"
</span><span class='line'>
</span><span class='line'>user=&gt; (get strarr 0)
</span><span class='line'>"foo"</span></code></pre></td></tr></table></div></figure>


<p>Basic maps</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (def mymap {:foo "Here is foo" :bar "... and here is bar!"})
</span><span class='line'>#'user/mymap
</span><span class='line'>
</span><span class='line'>user=&gt; (get mymap :bar)
</span><span class='line'>"... and here is bar!"</span></code></pre></td></tr></table></div></figure>


<p>Errors</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (^ 6 4)
</span><span class='line'>IllegalArgumentException Metadata must be Symbol,Keyword,String or Map  clojure.lang.LispReader$MetaReader.invoke (LispReader.java:720)
</span><span class='line'>4
</span><span class='line'>RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:170)
</span><span class='line'>
</span><span class='line'>user=&gt; (% 6 4)
</span><span class='line'>CompilerException java.lang.RuntimeException: Unable to resolve symbol: % in this context, compiling:(NO_SOURCE_PATH:2) </span></code></pre></td></tr></table></div></figure>


<p>Stack Overflow (!)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (defn foo [x] (foo (- x 1)))
</span><span class='line'>#'user/foo
</span><span class='line'>
</span><span class='line'>user=&gt; (foo 4)
</span><span class='line'>StackOverflowError   user/foo (NO_SOURCE_FILE:7)</span></code></pre></td></tr></table></div></figure>


<p>Simple function</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (defn expt [x y] (if (= y 0) 1 (* x (expt x (- y 1)))))
</span><span class='line'>#'user/expt
</span><span class='line'>
</span><span class='line'>user=&gt; (expt 6 4)
</span><span class='line'>1296</span></code></pre></td></tr></table></div></figure>


<p>Default REPL namespace (<code>user</code>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (user/expt 6 4)
</span><span class='line'>1296</span></code></pre></td></tr></table></div></figure>


<h2>Programming primitives</h2>

<p>For loop</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (dotimes [_ 5] (println "Hello World."))
</span><span class='line'>Hello World.
</span><span class='line'>Hello World.
</span><span class='line'>Hello World.
</span><span class='line'>Hello World.
</span><span class='line'>Hello World.
</span><span class='line'>nil</span></code></pre></td></tr></table></div></figure>


<p>While loop</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (for [i (range 5) j (range 5) :when (and (&gt; i 0) (&lt; i j))] (println (* i j)))
</span><span class='line'>(2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>nil nil 6
</span><span class='line'>8
</span><span class='line'>nil nil 12
</span><span class='line'>nil nil)</span></code></pre></td></tr></table></div></figure>


<p>Switch case</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (for [i (range 5) j (range 5)]
</span><span class='line'>(case (* i j)
</span><span class='line'>0 "zero"
</span><span class='line'>(* i j)))
</span><span class='line'>("zero" "zero" "zero" "zero" "zero" "zero" 1 2 3 4 "zero" 2 4 6 8 "zero" 3 6 9 12 "zero" 4 8 12 16)</span></code></pre></td></tr></table></div></figure>


<p>&hellip; the rest in Part 2, if there is one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Fun: Ascii Tree]]></title>
    <link href="http://agam.github.io/blog/2014/01/29/programming-fun-ascii-tree/"/>
    <updated>2014-01-29T02:11:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/01/29/programming-fun-ascii-tree</id>
    <content type="html"><![CDATA[<p>Another <a href="http://www.reddit.com/r/dailyprogrammer/comments/1t0r09/121613_challenge_145_easy_tree_generation/">easy problem</a> (I&rsquo;m not picking easy problems! I&rsquo;m just going in sequence!)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Input Description
</span><span class='line'>-----------------
</span><span class='line'>You will be given one line of text on standard-console input: an integer and
</span><span class='line'>two characters, all space-delimited. The integer, N, will range inclusively
</span><span class='line'>from 3 to 21 and always be odd. The next character will be your trunk
</span><span class='line'>character. The next character will be your leaves character. Draw the trunk and
</span><span class='line'>leaves components with these characters, respectively.
</span><span class='line'>
</span><span class='line'>Output Description
</span><span class='line'>------------------
</span><span class='line'>Given the three input arguments, draw a centered-tree. It should follow this
</span><span class='line'>pattern: (this is the smallest tree possible, with a base of 3)
</span><span class='line'>   *
</span><span class='line'>  ***
</span><span class='line'>  ###
</span><span class='line'>Here's a much larger tree, of base 7:
</span><span class='line'>   *
</span><span class='line'>  ***
</span><span class='line'> *****
</span><span class='line'>*******
</span><span class='line'>  ###</span></code></pre></td></tr></table></div></figure>


<p>Is this really programming at all? More like basic <em>arithmetic</em>. Anyway &hellip;</p>

<div><script src='https://gist.github.com/8679031.js'></script>
<noscript><pre><code>// Skipped includes

using namespace std;

int main(int argc, char* argv[]) {
  int tree_width;
  char trunk_char, leaf_char;
  cin &gt;&gt; tree_width &gt;&gt; trunk_char &gt;&gt; leaf_char;

  // Since the top of the tree is triangular, if the height is N the base will
  // be 2 * N - 1.
  assert(tree_width % 2 == 1);
  assert(tree_width &gt; 0);
  int tree_height = (tree_width + 1) / 2;

  for (int i = 0; i &lt; tree_height; ++i) {
    // The i_th row will have 2 * i + 1 leaves, in the center
    for (int j = 0; j &lt; (tree_height - i); ++j) {
      cout &lt;&lt; &quot; &quot;;
    }
    for (int j = 0; j &lt; (2 * i + 1); ++j) {
      cout &lt;&lt; leaf_char;
    }
    cout &lt;&lt; endl;
  }
  // Trunk is always of width 3, in the center
  for (int j = 0; j &lt; (tree_height - 1); ++j) {
    cout &lt;&lt; &quot; &quot;;
  }
  for (int j = 0; j &lt; 3; ++j) {
    cout &lt;&lt; trunk_char;
  }
  cout &lt;&lt; endl;
}
</code></pre></noscript></div>


<p>[Also, I realized I&rsquo;m wasting everyone&rsquo;s time by having all those redundant <code>#include</code> lines, so I got rid of them here]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Fun: Adjacency Matrix]]></title>
    <link href="http://agam.github.io/blog/2014/01/27/programming-fun-adjacency-matrix/"/>
    <updated>2014-01-27T03:55:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/01/27/programming-fun-adjacency-matrix</id>
    <content type="html"><![CDATA[<p>Another &ldquo;intermediate&rdquo; <a href="http://www.reddit.com/r/dailyprogrammer/comments/1t6dlf/121813_challenge_140_intermediate_adjacency_matrix/">problem</a> today.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Input Description
</span><span class='line'>-----------------
</span><span class='line'>On standard console input, you will be first given a line with two space-delimited integers N and M. N is the number of nodes / vertices in the graph, while M is the number of following lines of edge-node data. A line of edge-node data is a space-delimited set of integers, with the special "-&gt;" symbol indicating an edge. This symbol shows the edge-relationship between the set of left-sided integers and the right-sided integers. This symbol will only have one element to its left, or one element to its right. These lines of data will also never have duplicate information; you do not have to handle re-definitions of the same edges.
</span><span class='line'>
</span><span class='line'>An example of data that maps the node 1 to the nodes 2 and 3 is as follows:
</span><span class='line'>1 -&gt; 2 3
</span><span class='line'>
</span><span class='line'>Another example where multiple nodes points to the same node:
</span><span class='line'>3 8 -&gt; 2
</span><span class='line'>
</span><span class='line'>You can expect input to sometimes create cycles and self-references in the graph. The following is valid:
</span><span class='line'>2 -&gt; 2 3
</span><span class='line'>3 -&gt; 2
</span><span class='line'>
</span><span class='line'>Note that there is no order in the given integers; thus "1 -&gt; 2 3" is the same as "1 -&gt; 3 2".
</span><span class='line'>
</span><span class='line'>Output Description
</span><span class='line'>-----------------
</span><span class='line'>Print the N x N adjacency matrix as a series of 0's (no-edge) and 1's (edge).</span></code></pre></td></tr></table></div></figure>


<p>Since the C++ Standard Library doesn&rsquo;t have a built-in matrix library (or maybe it does and I&rsquo;m unaware of it), I just used a vector of size <code>M * N</code> to stand in for an <code>M * N</code> matrix.</p>

<div><script src='https://gist.github.com/8643006.js'></script>
<noscript><pre><code>#include &lt;cassert&gt;
#include &lt;cmath&gt;
#include &lt;cstdint&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;fstream&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;map&gt;
#include &lt;memory&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;queue&gt;
#include &lt;unordered_map&gt;

using namespace std;

const static char* kRelationshipMarker = &quot;-&gt;&quot;;

int main(int argc, char* argv[]) {
  int number_nodes, number_relationships;
  string line;
  getline(cin, line);
  istringstream is(line);
  is &gt;&gt; number_nodes &gt;&gt; number_relationships;

  vector&lt;int&gt; connections;
  connections.assign(number_nodes * number_nodes, 0);

  for (int i = 0; i &lt; number_relationships; ++i) {
    getline(cin, line);
    int connectee;
    string marker;
    istringstream ris(line);
    ris &gt;&gt; connectee;
    ris &gt;&gt; marker;
    assert(marker == kRelationshipMarker);
    int connected_node;
    while (ris &gt;&gt; connected_node) {
      connections[connectee * number_nodes + connected_node] = 1;
    }
  }

  for (int i = 0; i &lt; number_nodes; ++i) {
    for (int j = 0; j &lt; number_nodes; ++j) {
      cout &lt;&lt; connections[i * number_nodes + j];
    }
    cout &lt;&lt; endl;
  }
}

</code></pre></noscript></div>



]]></content>
  </entry>
  
</feed>
