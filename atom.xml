<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-04-24T07:28:30+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The return of the mainframes]]></title>
    <link href="http://agam.github.io/blog/2015/04/24/the-return-of-the-mainframes/"/>
    <updated>2015-04-24T07:22:01+00:00</updated>
    <id>http://agam.github.io/blog/2015/04/24/the-return-of-the-mainframes</id>
    <content type="html"><![CDATA[<p>Thomas Watson famously<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> mispredicted the rise of <em>Personal Computers</em> in 1943 (“I think there is a world market for maybe five computers”) — but substituting “cloud service providers” for “computers” might soon be more accurate.</p>

<p>The “Personal Computing Revolution” happened for various reasons (plummeting costs of ever-faster microprocessors, various lucky accidents), but beyond the technology itself was (perhaps?) a utopian social vision where everyone would have computing power they owned, <em>that they controlled</em>.</p>

<p>This is particularly clear in the writings<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> and work of Alan Kay, who might have some claim to have invented the term<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. His 1972 paper<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> lays this vision out with an example of two children who use their <em>DynaBooks</em> to easily create a complex simulation that they play as a game and challenge each other, and learn from each other.</p>

<p>Today, four decades later, we know that’s not what people use their wonderfully networked computers for. It’s porn<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>, essentially. And cat videos<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>.</p>

<p>Lest I get too hypocritical here — yes, that’s what I used my early internet time for too. That and lots and lots and lots of video games.</p>

<p>So it shouldn’t be <em>too</em> surprising that there’s little reason to keep this computing power <em>personal</em>, when it’s more efficient now to centralize it <em>and call it the “cloud”.</em> Your cat videos are faster, your porn is better, and you can catch up on all the daily minutiae of various people you’ll never meet in real life.</p>

<p>A guy called David Noble wrote “Forces of Production: A Social History of Industrial Automation”<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup> which has this quote:</p>

<blockquote><p>… <strong>technology leads a double life</strong>, one which conforms to the intentions of designers and interests of power and another which contradicts them — proceeding behind the backs of their architects to yield unintended consequences and unintended possibilities … technologies rarely fulfill the fantasies of their creators.</p></blockquote>

<p>Yes, this was written in 1986, and I’ll leave drawing present-day analogies out of this — but whenever you hear people trying to <em>change the world through technology</em>, be atleast a <em>little</em> skeptical.</p>

<p>For a bit “heavier” discussion, see “The Social Meaning Of The Personal Computer: Or, <em>Why the Personal Computer Revolution Was No Revolution</em>”<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup> by Bryan Pfaffenberger (more recent, in 2001<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>). A sample quote:</p>

<blockquote><p>Contemporary theories about technical innovation lend some weight to the view that the myth of a personal computer revolution was promoted, perhaps rather cynically, to sell hardware. Several recent studies suggest that technological innovators not only try to manipulate technology when they create a new artifact; they also try to manipulate the <em>social</em> world for which the new artifact is intended … prefers to speak of the “heterogenous engineer”, a figure who creates <strong>not only a new technology, but also a new framework of social roles, meanings, and values within which the new artifact will be situated</strong>. That the founders of the personal computer industry found the myths of personal computing advantageous for such purposes cannot be doubted.</p></blockquote>

<p>In a spirit of keeping this “fair and balanced” (!), all is not gloomy. There is an enormous DIY movement that has sprung up over the last decade, highly “tinkerable” machines such as the Arduino and the Raspberry Pi are huge successes, and lots of people really <em>do</em> want to know how computing systems <em>really</em> work<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup> — but it’s always a bummer to swing from optimism to realism. <strong>The utopian vision of personal computing was probably just never meant to be.</strong></p>

<p>Suggested alternative titles included: <em>The revenge of the mainframes</em>, <em>The mainframe strikes back</em>, etc. You get the point.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Or rather, <em>allegedly</em>, since <a href="http://en.wikipedia.org/wiki/Thomas_J._Watson#Famous_misquote">this is apocryphal</a>, and might really be attributed to Howard Aiken instead.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://vpri.org/html/writings.php">http://vpri.org/html/writings.php</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://amturing.acm.org/award_winners/kay_3972189.cfm">http://amturing.acm.org/award_winners/kay_3972189.cfm</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><a href="http://www.mprove.de/diplom/gui/kay72.html">A Personal Computer for Children of All Ages</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p><a href="http://www.dailyinfographic.com/the-stats-on-internet-pornography-infographic">http://www.dailyinfographic.com/the-stats-on-internet-pornography-infographic</a><a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p><a href="http://www.reddit.com/r/estimation/comments/2fllbi/what_percentage_of_daily_internet_traffic_is_cats/">http://www.reddit.com/r/estimation/comments/2fllbi/what_percentage_of_daily_internet_traffic_is_cats/</a><a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p><a href="http://www.amazon.com/Forces-Production-History-Industrial-Automation/dp/0195040465">http://www.amazon.com/Forces-Production-History-Industrial-Automation/dp/0195040465</a><a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
<li id="fn:8">
<p>Original link long dead, but thanks to archive.org …  <a href="https://web.archive.org/web/20070109022206/http://pfaff.sts.virginia.edu/bphome/docs/pdf/social-meaning-personal-computer.pdf">https://web.archive.org/web/20070109022206/http://pfaff.sts.virginia.edu/bphome/docs/pdf/social-meaning-personal-computer.pdf</a><a href="#fnref:8" rev="footnote">&#8617;</a></p></li>
<li id="fn:9">
<p>Yes, that’s where I really got the Noble quote from, I didn’t really read the 1986 book, sorry :)<a href="#fnref:9" rev="footnote">&#8617;</a></p></li>
<li id="fn:10">
<p>And I’m looking forward to Maker Fair this year too!<a href="#fnref:10" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Compiler Whisperer ...]]></title>
    <link href="http://agam.github.io/blog/2015/04/18/the-compiler-whisperer-dot-dot-dot/"/>
    <updated>2015-04-18T01:42:18+00:00</updated>
    <id>http://agam.github.io/blog/2015/04/18/the-compiler-whisperer-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Came acros this comment by Knuth in <a href="http://cr.yp.to/talks/2015.04.16/slides-djb-20150416-a4.pdf">these slides</a>:</p>

<blockquote><p>We found ourselves always running up against the same problem: the compiler needs to be in a dialog with the programmer; it needs to know properties of the data, and whether certain cases can arise, etc. And we couldn’t think of a good language in which to have such a dialog.</p></blockquote>

<p>Sounds an awful lot like a SLIME session.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fooling around with array memory ...]]></title>
    <link href="http://agam.github.io/blog/2015/04/10/fooling-around-with-array-memory-dot-dot-dot/"/>
    <updated>2015-04-10T23:42:23+00:00</updated>
    <id>http://agam.github.io/blog/2015/04/10/fooling-around-with-array-memory-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Something I saved in a scratch buffer once &hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nb">*</span> <span class="p">(</span><span class="nb">room</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Dynamic</span> <span class="nv">space</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">43</span><span class="o">,</span><span class="mi">629</span><span class="o">,</span><span class="mi">232</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Read-only</span> <span class="nv">space</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">6</span><span class="o">,</span><span class="mi">736</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Static</span> <span class="nv">space</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">4</span><span class="o">,</span><span class="mi">000</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Control</span> <span class="nv">stack</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">2</span><span class="o">,</span><span class="mi">976</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Binding</span> <span class="nv">stack</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">800</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Control</span> <span class="nb">and</span> <span class="nv">binding</span> <span class="nv">stack</span> <span class="nv">usage</span> <span class="nv">is</span> <span class="nv">for</span> <span class="k">the</span> <span class="nv">current</span> <span class="nv">thread</span> <span class="nv">only.</span>
</span><span class='line'><span class="nv">Garbage</span> <span class="nv">collection</span> <span class="nv">is</span> <span class="nv">currently</span> <span class="nv">enabled.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Breakdown</span> <span class="nv">for</span> <span class="nv">dynamic</span> <span class="nv">space:</span>
</span><span class='line'><span class="mi">13</span><span class="o">,</span><span class="mi">392</span><span class="o">,</span><span class="mi">016</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">12</span><span class="o">,</span><span class="mi">550</span> <span class="nv">code</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">7</span><span class="o">,</span><span class="mi">629</span><span class="o">,</span><span class="mi">616</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">87</span><span class="o">,</span><span class="mi">920</span> <span class="nv">instance</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">7</span><span class="o">,</span><span class="mi">108</span><span class="o">,</span><span class="mi">736</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">444</span><span class="o">,</span><span class="mi">296</span> <span class="nb">cons</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">7</span><span class="o">,</span><span class="mi">093</span><span class="o">,</span><span class="mi">664</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">59</span><span class="o">,</span><span class="mi">224</span> <span class="kt">simple-vector</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">2</span><span class="o">,</span><span class="mi">268</span><span class="o">,</span><span class="mi">928</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">35</span><span class="o">,</span><span class="mi">452</span> <span class="nc">symbol</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">6</span><span class="o">,</span><span class="mi">136</span><span class="o">,</span><span class="mi">272</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">115</span><span class="o">,</span><span class="mi">793</span> <span class="nv">other</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">43</span><span class="o">,</span><span class="mi">629</span><span class="o">,</span><span class="mi">232</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">755</span><span class="o">,</span><span class="mi">235</span> <span class="nv">dynamic</span> <span class="nv">objects</span> <span class="p">(</span><span class="nv">space</span> <span class="nv">total.</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">*</span> <span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*a*</span> <span class="p">(</span><span class="nb">make-array</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3000</span> <span class="mi">3000</span><span class="p">)</span> <span class="ss">:element-type</span> <span class="o">&#39;</span><span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">8</span><span class="p">)</span> <span class="ss">:initial-element</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="vg">*A*</span>
</span><span class='line'><span class="nb">*</span> <span class="p">(</span><span class="nb">room</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Dynamic</span> <span class="nv">space</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">52</span><span class="o">,</span><span class="mi">662</span><span class="o">,</span><span class="mi">000</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Read-only</span> <span class="nv">space</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">6</span><span class="o">,</span><span class="mi">736</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Static</span> <span class="nv">space</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">4</span><span class="o">,</span><span class="mi">000</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Control</span> <span class="nv">stack</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">2</span><span class="o">,</span><span class="mi">976</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Binding</span> <span class="nv">stack</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">800</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Control</span> <span class="nb">and</span> <span class="nv">binding</span> <span class="nv">stack</span> <span class="nv">usage</span> <span class="nv">is</span> <span class="nv">for</span> <span class="k">the</span> <span class="nv">current</span> <span class="nv">thread</span> <span class="nv">only.</span>
</span><span class='line'><span class="nv">Garbage</span> <span class="nv">collection</span> <span class="nv">is</span> <span class="nv">currently</span> <span class="nv">enabled.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Breakdown</span> <span class="nv">for</span> <span class="nv">dynamic</span> <span class="nv">space:</span>
</span><span class='line'><span class="mi">13</span><span class="o">,</span><span class="mi">392</span><span class="o">,</span><span class="mi">016</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">12</span><span class="o">,</span><span class="mi">550</span> <span class="nv">code</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">9</span><span class="o">,</span><span class="mi">221</span><span class="o">,</span><span class="mi">424</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">1</span><span class="o">,</span><span class="mi">914</span> <span class="nv">simple-array-unsigned-byte-8</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">7</span><span class="o">,</span><span class="mi">644</span><span class="o">,</span><span class="mi">768</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">88</span><span class="o">,</span><span class="mi">074</span> <span class="nv">instance</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">7</span><span class="o">,</span><span class="mi">123</span><span class="o">,</span><span class="mi">088</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">445</span><span class="o">,</span><span class="mi">193</span> <span class="nb">cons</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">7</span><span class="o">,</span><span class="mi">096</span><span class="o">,</span><span class="mi">224</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">59</span><span class="o">,</span><span class="mi">245</span> <span class="kt">simple-vector</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">8</span><span class="o">,</span><span class="mi">217</span><span class="o">,</span><span class="mi">248</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">149</span><span class="o">,</span><span class="mi">969</span> <span class="nv">other</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">52</span><span class="o">,</span><span class="mi">694</span><span class="o">,</span><span class="mi">768</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">756</span><span class="o">,</span><span class="mi">945</span> <span class="nv">dynamic</span> <span class="nv">objects</span> <span class="p">(</span><span class="nv">space</span> <span class="nv">total.</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">*</span> <span class="p">(</span><span class="nv">gc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">NIL</span>
</span><span class='line'><span class="nb">*</span> <span class="p">(</span><span class="nb">room</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Dynamic</span> <span class="nv">space</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">43</span><span class="o">,</span><span class="mi">810</span><span class="o">,</span><span class="mi">864</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Read-only</span> <span class="nv">space</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">6</span><span class="o">,</span><span class="mi">736</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Static</span> <span class="nv">space</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">4</span><span class="o">,</span><span class="mi">000</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Control</span> <span class="nv">stack</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">2</span><span class="o">,</span><span class="mi">976</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Binding</span> <span class="nv">stack</span> <span class="nv">usage</span> <span class="nv">is:</span> <span class="mi">800</span> <span class="nv">bytes.</span>
</span><span class='line'><span class="nv">Control</span> <span class="nb">and</span> <span class="nv">binding</span> <span class="nv">stack</span> <span class="nv">usage</span> <span class="nv">is</span> <span class="nv">for</span> <span class="k">the</span> <span class="nv">current</span> <span class="nv">thread</span> <span class="nv">only.</span>
</span><span class='line'><span class="nv">Garbage</span> <span class="nv">collection</span> <span class="nv">is</span> <span class="nv">currently</span> <span class="nv">enabled.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Breakdown</span> <span class="nv">for</span> <span class="nv">dynamic</span> <span class="nv">space:</span>
</span><span class='line'><span class="mi">13</span><span class="o">,</span><span class="mi">392</span><span class="o">,</span><span class="mi">016</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">12</span><span class="o">,</span><span class="mi">550</span> <span class="nv">code</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">7</span><span class="o">,</span><span class="mi">687</span><span class="o">,</span><span class="mi">200</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">88</span><span class="o">,</span><span class="mi">515</span> <span class="nv">instance</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">7</span><span class="o">,</span><span class="mi">144</span><span class="o">,</span><span class="mi">528</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">59</span><span class="o">,</span><span class="mi">470</span> <span class="kt">simple-vector</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">7</span><span class="o">,</span><span class="mi">134</span><span class="o">,</span><span class="mi">528</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">445</span><span class="o">,</span><span class="mi">908</span> <span class="nb">cons</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">2</span><span class="o">,</span><span class="mi">269</span><span class="o">,</span><span class="mi">312</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">35</span><span class="o">,</span><span class="mi">458</span> <span class="nc">symbol</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">6</span><span class="o">,</span><span class="mi">183</span><span class="o">,</span><span class="mi">280</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">116</span><span class="o">,</span><span class="mi">551</span> <span class="nv">other</span> <span class="nv">objects.</span>
</span><span class='line'><span class="mi">43</span><span class="o">,</span><span class="mi">810</span><span class="o">,</span><span class="mi">864</span> <span class="nv">bytes</span> <span class="nv">for</span> <span class="mi">758</span><span class="o">,</span><span class="mi">452</span> <span class="nv">dynamic</span> <span class="nv">objects</span> <span class="p">(</span><span class="nv">space</span> <span class="nv">total.</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 42: Pandigitals with sub-string divisibility]]></title>
    <link href="http://agam.github.io/blog/2015/03/25/euler-42-pandigitals-with-sub-string-divisibility/"/>
    <updated>2015-03-25T23:33:56+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/25/euler-42-pandigitals-with-sub-string-divisibility</id>
    <content type="html"><![CDATA[<p>These brute force solutions are getting a bit worrying, but here is another one. (I keep promising myself to get out of my comfort zone, but (<em>unfortunately!</em>) code like this is too easy to write).</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="c1">;; For all 0-9 pandigital numbers, find the ones which have successive</span>
</span><span class='line'><span class="c1">;; substrings of length 3 diisible by 2,3,...,17.</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*prime-divisors*</span> <span class="o">#(</span><span class="mi">17</span> <span class="mi">13</span> <span class="mi">11</span> <span class="mi">7</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; A number is 0-9 pandigital if it (a) is 10 digits long, and (b) has every digit from 0-9</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">is-pandigital</span> <span class="p">(</span><span class="nv">num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">num</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">digits-seen</span> <span class="p">(</span><span class="nb">make-array</span> <span class="mi">10</span> <span class="ss">:element-type</span> <span class="ss">&#39;bit</span> <span class="ss">:initial-element</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">do*</span> <span class="p">((</span><span class="nv">n</span> <span class="nv">num</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">d</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">num-digits</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">num-digits</span><span class="p">)))</span>
</span><span class='line'>         <span class="p">((</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">num-digits</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="nb">every</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">x</span> <span class="mi">1</span><span class="p">))</span> <span class="nv">digits-seen</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">bit</span> <span class="nv">digits-seen</span> <span class="nv">d</span><span class="p">)</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">check-divisibility</span> <span class="p">(</span><span class="nv">num</span> <span class="nv">div-index</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">num</span> <span class="p">(</span><span class="nb">aref</span> <span class="vg">*prime-divisors*</span> <span class="nv">div-index</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-three-digit-num</span> <span class="p">(</span><span class="nv">num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">ones</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">num</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">tens</span> <span class="p">(</span><span class="nb">mod</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">num</span> <span class="mi">10</span><span class="p">))</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">hundreds</span> <span class="p">(</span><span class="nb">mod</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">num</span> <span class="mi">100</span><span class="p">))</span> <span class="mi">10</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+</span> <span class="nv">ones</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">*</span> <span class="mi">10</span> <span class="nv">tens</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">*</span> <span class="mi">100</span> <span class="nv">hundreds</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Go backwards in groups of three digits and check divisibility</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">has-divisible-substrings</span> <span class="p">(</span><span class="nv">num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do*</span> <span class="p">((</span><span class="nv">n</span> <span class="nv">num</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">div-index</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">div-index</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">dividend</span> <span class="p">(</span><span class="nv">get-three-digit-num</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nv">get-three-digit-num</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">div-p</span> <span class="p">(</span><span class="nv">check-divisibility</span> <span class="nv">dividend</span> <span class="nv">div-index</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">and</span> <span class="nv">div-p</span> <span class="p">(</span><span class="nv">check-divisibility</span> <span class="nv">dividend</span> <span class="nv">div-index</span><span class="p">))))</span>
</span><span class='line'>       <span class="p">((</span><span class="nb">&lt;</span> <span class="nv">n</span> <span class="mi">10000</span><span class="p">)</span> <span class="nv">div-p</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">check-substring-pandigital-range</span> <span class="p">(</span><span class="nv">start</span> <span class="nv">end</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">start</span> <span class="nv">end</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">candidates</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">num</span> <span class="nv">from</span> <span class="nv">start</span> <span class="nv">to</span> <span class="nv">end</span> <span class="nb">do</span>
</span><span class='line'>         <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">is-pandigital</span> <span class="nv">num</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nv">has-divisible-substrings</span> <span class="nv">num</span><span class="p">))</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">push</span> <span class="nv">num</span> <span class="nv">candidates</span><span class="p">)))</span>
</span><span class='line'>    <span class="nv">candidates</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">euler43</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">candidates</span> <span class="p">(</span><span class="nv">check-substring-pandigital-range</span> <span class="mi">1234567890</span> <span class="mi">9876543210</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">print</span> <span class="nv">candidates</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">apply</span> <span class="nf">#&#39;</span><span class="nb">+</span> <span class="nv">candidates</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As before, evaluating <code>(euler43)</code> shows the final solution (sum), along with the (six!) candidate numbers making up the sum. This took a whopping <code>4.3 hours</code> to churn through the 8.5 billion numbers. Maybe I need to create a new constraint for these problems: either pen-and-paper, or something <em>slow</em> (like Python ?! :P), so that brute force is never tempting again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A second look at Python]]></title>
    <link href="http://agam.github.io/blog/2015/03/25/a-second-look-at-python/"/>
    <updated>2015-03-25T06:53:44+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/25/a-second-look-at-python</id>
    <content type="html"><![CDATA[<p>The first time I <em>used</em> Python for something (it was a silly little script, IIRC) was about 12 years ago. I eventually gave it up in shock and horror the first time I encountered a critical error that turned out to be a <em>syntax error</em>.</p>

<p>Over the years I&rsquo;ve had to mess with Python code on and off but it&rsquo;s always been something I&rsquo;ve done reluctantly, under the lingering effects of PTSD from the &ldquo;I can&rsquo;t tell how this program might fail&rdquo; experience.</p>

<p>Recently I had to work with <code>IPython</code> and &hellip; it didn&rsquo;t seem so bad. So I&rsquo;ve decided to wipe the slate clean in its favor and re-evaluate it on its own terms. So much is different over the last decade that it seems like a good idea to start afresh anyway.</p>

<p>The other place to consider the language is in my constant &ldquo;what language is best for beginners?&rdquo; contest &mdash; until now it was basically Go vs Racket, but I might include Python as a contender too. We&rsquo;ll see &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 42: Coded triangle numbers]]></title>
    <link href="http://agam.github.io/blog/2015/03/23/euler-42-coded-triangle-numbers/"/>
    <updated>2015-03-23T01:11:01+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/23/euler-42-coded-triangle-numbers</id>
    <content type="html"><![CDATA[<p>Very straightforward, this one. And I don&rsquo;t need to feel bad that I did it the simple way. If you&rsquo;re wondering where <code>split-sequence-if</code> and <code>read-file</code> came from, the answer is <code>rutils</code>, which is a good general-purpose utility package, a sort of superset of <code>alexandria</code>, and just a <code>(ql:quickload 'rutils)</code> away. As before, the final answer is obtained by evaluating <code>(euler42)</code>.</p>

<p><strong>Statutory Warning</strong>: <em>spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="c1">;; If x = 0.5 * n * (n+1) is a triangle number, then there is an</span>
</span><span class='line'><span class="c1">;; integral solution for n^2 + n - 2*x = 0.</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">quadratic-solution</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">det</span> <span class="p">(</span><span class="nb">sqrt</span> <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">b</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="mi">4</span> <span class="nv">a</span> <span class="nv">c</span><span class="p">))))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">denom</span> <span class="p">(</span><span class="nb">*</span> <span class="mi">2</span> <span class="nv">a</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">det</span><span class="p">)</span> <span class="nv">denom</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">det</span><span class="p">)</span> <span class="nv">denom</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">positive-int</span> <span class="p">(</span><span class="nv">num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">integerp</span> <span class="nv">num</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">plusp</span> <span class="nv">num</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">is-triangle-number</span> <span class="p">(</span><span class="nv">num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">soln</span> <span class="p">(</span><span class="nv">quadratic-solution</span> <span class="mi">1</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">*</span> <span class="p">(</span><span class="nb">-</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">num</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nv">positive-int</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">soln</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">positive-int</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">soln</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">char-&gt;number</span> <span class="p">(</span><span class="nb">char</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">1+</span> <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nb">char-code</span> <span class="nb">char</span><span class="p">)</span> <span class="p">(</span><span class="nb">char-code</span> <span class="sc">#\A</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">is-triangle-word</span> <span class="p">(</span><span class="nv">word</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">value</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nb">char</span> <span class="nv">across</span> <span class="nv">word</span>
</span><span class='line'>                  <span class="nv">summing</span> <span class="p">(</span><span class="nv">char-&gt;number</span> <span class="nb">char</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">is-triangle-number</span> <span class="nv">value</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">euler42</span> <span class="p">()</span>
</span><span class='line'>  <span class="c1">;; Read in the file, split on the commas, remove the quotes</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">file-text</span> <span class="p">(</span><span class="nv">read-file</span> <span class="s">&quot;/home/agam/Downloads/p042_words.txt&quot;</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">words-with-quotes</span> <span class="p">(</span><span class="nv">split-sequence-if</span>
</span><span class='line'>                             <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nb">char</span><span class="p">)</span> <span class="p">(</span><span class="nb">eq</span> <span class="nb">char</span> <span class="sc">#\,</span><span class="p">))</span>
</span><span class='line'>                             <span class="nv">file-text</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">words</span> <span class="p">(</span><span class="nb">mapcar</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">w</span><span class="p">)</span> <span class="p">(</span><span class="nb">remove</span> <span class="sc">#\&quot;</span> <span class="nv">w</span><span class="p">))</span>
</span><span class='line'>                        <span class="nv">words-with-quotes</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">w</span> <span class="nv">in</span> <span class="nv">words</span> <span class="nb">count</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">is-triangle-word</span> <span class="nv">w</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 41: Pandigital primes]]></title>
    <link href="http://agam.github.io/blog/2015/03/22/euler-41-pandigital-primes/"/>
    <updated>2015-03-22T04:35:08+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/22/euler-41-pandigital-primes</id>
    <content type="html"><![CDATA[<p>Yet another <em>brute-force</em> solution, pushing the line a bit at <em>1991 seconds</em>. But hey, it works, and was quick to write, so &hellip;</p>

<p><strong>Statutory Warning</strong>: <em>spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*max-num-limit*</span> <span class="mi">1000000000</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*all-numbers*</span> <span class="p">(</span><span class="nb">make-array</span> <span class="p">(</span><span class="nb">list</span> <span class="vg">*max-num-limit*</span><span class="p">)</span> <span class="ss">:element-type</span> <span class="ss">&#39;bit</span> <span class="ss">:initial-element</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">mark-primes</span> <span class="p">(</span><span class="k">&amp;optional</span> <span class="p">(</span><span class="nv">n</span> <span class="vg">*max-num-limit*</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">;; 0 and 1 are not prime</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">mark-not-prime</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">mark-not-prime</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">;; Mark 2 as prime, then do the following:</span>
</span><span class='line'>  <span class="c1">;; (1) Mark all multiples of the prime number,</span>
</span><span class='line'>  <span class="c1">;; (2) Find next available prime number, mark it as prime,</span>
</span><span class='line'>  <span class="c1">;; Repeat (1) until n</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">prime</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">while</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">prime</span> <span class="nv">n</span><span class="p">)</span> <span class="nb">do</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">mark-prime-multiples</span> <span class="nv">prime</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">setf</span> <span class="nv">prime</span> <span class="p">(</span><span class="nv">find-next-prime</span> <span class="nv">prime</span> <span class="nv">n</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">mark-not-prime</span> <span class="p">(</span><span class="nv">idx</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">bit</span> <span class="vg">*all-numbers*</span> <span class="nv">idx</span><span class="p">)</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">mark-prime-multiples</span> <span class="p">(</span><span class="nv">prime</span> <span class="nv">limit</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">i</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">prime</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">i</span> <span class="nv">prime</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">&gt;=</span> <span class="nv">i</span> <span class="nv">limit</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">mark-not-prime</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">find-next-prime</span> <span class="p">(</span><span class="nv">prev-prime</span> <span class="nv">limit</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">i</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">prev-prime</span><span class="p">)</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">or</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">i</span> <span class="nv">limit</span><span class="p">)</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">bit</span> <span class="vg">*all-numbers*</span> <span class="nv">i</span><span class="p">)))</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">is-prime</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">=</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">bit</span> <span class="vg">*all-numbers*</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-num-digits</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">ceiling</span> <span class="p">(</span><span class="nb">log</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">is-pandigital</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">num-digits</span> <span class="p">(</span><span class="nv">get-num-digits</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">digits</span> <span class="p">(</span><span class="nb">make-array</span> <span class="nv">num-digits</span> <span class="ss">:element-type</span> <span class="ss">&#39;bit</span> <span class="ss">:initial-element</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">while</span> <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">&gt;</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">&lt;=</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">)</span> <span class="nv">num-digits</span><span class="p">))</span> <span class="nb">do</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">bit</span> <span class="nv">digits</span> <span class="p">(</span><span class="nb">1-</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">)))</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">setf</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">=</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">digits</span><span class="p">)</span> <span class="p">(</span><span class="nb">count</span> <span class="mi">1</span> <span class="nv">digits</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">euler41</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">mark-primes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">n</span> <span class="mi">987654321</span> <span class="p">(</span><span class="nb">1-</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">and</span> <span class="p">(</span><span class="nv">is-pandigital</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nv">is-prime</span> <span class="nv">n</span><span class="p">))</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything is wrapped up in the call to <code>(euler41)</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 40: Champernowne's Constant]]></title>
    <link href="http://agam.github.io/blog/2015/03/21/euler-40-champernownes-constant/"/>
    <updated>2015-03-21T19:34:12+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/21/euler-40-champernownes-constant</id>
    <content type="html"><![CDATA[<p>I was too lazy to avoid the brute-force approach here, especially since it took less than a second to run. The following seems longer than it should be, partly because I left in some helper and debugging functions &hellip;</p>

<p><em>Edit</em>: There is obviously a very nice paper-and-pen solution to this &mdash; the 10th place is &lsquo;1&rsquo; (for 10), then the 100th place is &lsquo;5&rsquo; (for 55), and so on &hellip;</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers Ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*max-digits*</span> <span class="mi">2000000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">digits</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">nreverse</span> <span class="p">(</span><span class="nb">loop</span>
</span><span class='line'>               <span class="nv">for</span> <span class="nv">tmp</span> <span class="nb">=</span> <span class="nv">n</span> <span class="nv">then</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">tmp</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>               <span class="nv">until</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">tmp</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>               <span class="nv">collect</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">tmp</span> <span class="mi">10</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">set-digits</span> <span class="p">(</span><span class="nv">d</span> <span class="nv">start</span> <span class="nv">all-digits</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">loop</span>
</span><span class='line'>     <span class="nv">for</span> <span class="nv">elem</span> <span class="nv">in</span> <span class="nv">d</span>
</span><span class='line'>     <span class="nv">for</span> <span class="nv">idx</span> <span class="nb">=</span> <span class="nv">start</span> <span class="nv">then</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">idx</span><span class="p">)</span> <span class="nb">do</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">aref</span> <span class="nv">all-digits</span> <span class="nv">idx</span><span class="p">)</span> <span class="nv">elem</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Fills out the array of digits and returns an accessor function</span>
</span><span class='line'><span class="c1">;; Note: the index increments by the length of the number of</span>
</span><span class='line'><span class="c1">;; digits of the _previous_ number.</span>
</span><span class='line'><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">all-digits</span> <span class="p">(</span><span class="nb">make-array</span> <span class="p">(</span><span class="nb">list</span> <span class="vg">*max-digits*</span><span class="p">)</span> <span class="ss">:element-type</span> <span class="o">&#39;</span><span class="p">(</span><span class="nc">integer</span> <span class="mi">0</span> <span class="mi">9</span><span class="p">)</span> <span class="ss">:initial-element</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">defun</span> <span class="nv">populate-digits</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">loop</span>
</span><span class='line'>         <span class="nv">for</span> <span class="nv">num</span> <span class="nb">=</span> <span class="mi">1</span> <span class="nv">then</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">num</span><span class="p">)</span>
</span><span class='line'>         <span class="nv">for</span> <span class="nv">d</span> <span class="nb">=</span> <span class="p">(</span><span class="nv">digits</span> <span class="nv">num</span><span class="p">)</span>
</span><span class='line'>         <span class="nv">for</span> <span class="nv">i</span> <span class="nb">=</span> <span class="mi">0</span> <span class="nv">then</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">length</span> <span class="p">(</span><span class="nv">digits</span> <span class="p">(</span><span class="nb">1-</span> <span class="nv">num</span><span class="p">))))</span>
</span><span class='line'>         <span class="nv">while</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">i</span> <span class="nv">n</span><span class="p">)</span> <span class="nb">do</span>
</span><span class='line'>           <span class="p">(</span><span class="nv">set-digits</span> <span class="nv">d</span> <span class="nv">i</span> <span class="nv">all-digits</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">idx</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">aref</span> <span class="nv">all-digits</span> <span class="nv">idx</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">power-list</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">champer</span> <span class="p">(</span><span class="nv">populate-digits</span> <span class="mi">1000000</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">p</span> <span class="nv">from</span> <span class="mi">0</span> <span class="nv">to</span> <span class="mi">6</span> <span class="nv">collect</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">funcall</span> <span class="nv">champer</span> <span class="p">(</span><span class="nb">1-</span> <span class="p">(</span><span class="nb">expt</span> <span class="mi">10</span> <span class="nv">p</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">euler40</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">apply</span> <span class="ss">&#39;*</span> <span class="p">(</span><span class="nv">power-list</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Useful debugging tool</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">scan-list</span> <span class="p">(</span><span class="nv">start</span> <span class="nv">end</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">champer</span> <span class="p">(</span><span class="nv">populate-digits</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="nv">start</span> <span class="nv">to</span> <span class="nv">end</span> <span class="nb">do</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">print</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">funcall</span> <span class="nv">champer</span> <span class="nv">i</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &ldquo;final answer&rdquo; is given by <code>(euler40)</code>, and the intermediate digits themselves by <code>(power-list)</code>. I found <code>(scan-list)</code> useful to debug an embarassing off-by-one error in the loop.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 39: Integer Right Triangles]]></title>
    <link href="http://agam.github.io/blog/2015/03/20/euler-39-integer-right-triangles/"/>
    <updated>2015-03-20T23:09:44+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/20/euler-39-integer-right-triangles</id>
    <content type="html"><![CDATA[<p>Straightfoward, this. An interesting insight into speed difference between <code>SBCL</code> and <code>Clozure</code>: the former took <em>0.75 seconds</em> to run this, while the latter took about <em>4 seconds</em> (without the type annotations, <code>SBCL</code> takes <em>33 seconds</em>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">is-right-triangle</span> <span class="p">(</span><span class="nv">n1</span> <span class="nv">n2</span> <span class="nv">n3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">n1</span> <span class="nv">n2</span> <span class="nv">n3</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">=</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">expt</span> <span class="nv">n1</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">expt</span> <span class="nv">n2</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="nb">expt</span> <span class="nv">n3</span> <span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">triangle-solutions</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">;; Largest side (hyp) can&#39;t be less than a third of the total</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">hyp</span> <span class="nv">from</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">n</span> <span class="mi">3</span><span class="p">))</span> <span class="nv">upto</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>     <span class="c1">;; Avoid repeating combinations, so WLOG let one side</span>
</span><span class='line'>     <span class="c1">;; be greater than the other</span>
</span><span class='line'>     <span class="nv">for</span> <span class="nv">sides-sum</span> <span class="nb">=</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="nv">hyp</span><span class="p">)</span>
</span><span class='line'>     <span class="nb">when</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">side1</span> <span class="nv">from</span> <span class="p">(</span><span class="nb">ceiling</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">sides-sum</span> <span class="mi">2</span><span class="p">))</span> <span class="nv">to</span> <span class="p">(</span><span class="nb">1-</span> <span class="nv">sides-sum</span><span class="p">)</span>
</span><span class='line'>             <span class="nv">for</span> <span class="nv">side2</span> <span class="nb">=</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">sides-sum</span> <span class="nv">side1</span><span class="p">)</span>
</span><span class='line'>             <span class="nb">when</span> <span class="p">(</span><span class="nv">is-right-triangle</span> <span class="nv">side1</span> <span class="nv">side2</span> <span class="nv">hyp</span><span class="p">)</span>
</span><span class='line'>             <span class="nv">collect</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">side1</span> <span class="nv">side2</span> <span class="nv">hyp</span><span class="p">))</span>
</span><span class='line'>     <span class="nv">collect</span> <span class="nv">it</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">max-triangle-solutions</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">;; n cannot be less than 3</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">solutions</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="mi">3</span> <span class="nv">to</span> <span class="nv">n</span>
</span><span class='line'>                       <span class="nv">collect</span> <span class="p">(</span><span class="nb">length</span> <span class="p">(</span><span class="nv">triangle-solutions</span> <span class="nv">i</span><span class="p">))))</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">max-solution</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">elem</span> <span class="nv">in</span> <span class="nv">solutions</span> <span class="nv">maximizing</span> <span class="nv">elem</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cons</span> <span class="nv">max-solution</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">3</span> <span class="p">(</span><span class="nb">position</span> <span class="nv">max-solution</span> <span class="nv">solutions</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The answer needed is given by <code>(max-triangle-solutions 1000)</code>, while any specific solution can be got by (e.g.) running <code>(triangle-solutions 120)</code> which yields <code>(((40 30 50)) ((45 24 51)) ((48 20 52)))</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 38: Pandigital multiples]]></title>
    <link href="http://agam.github.io/blog/2015/03/19/euler-38-pandigital-multiples/"/>
    <updated>2015-03-19T03:41:10+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/19/euler-38-pandigital-multiples</id>
    <content type="html"><![CDATA[<p>I&rsquo;m embarassed at how ridiculously naive my solution is. In hindsight, it&rsquo;s so <em>obvious</em> that the solution <em>has</em> to be a four-digit number and its double, and that the first digit is going to be a 9.</p>

<p>Still, C++ makes you lazy. This took <code>24 milliseconds</code>, and I didn&rsquo;t feel the need to speed it up :)</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">long</span> <span class="n">kMaxNumbers</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">largestPanDigital</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">long</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="o">++</span><span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pandigits</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">o</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">o</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">product</span> <span class="o">=</span> <span class="n">num</span> <span class="o">*</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'>      <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pd</span><span class="p">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">product</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">product</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span>
</span><span class='line'>            <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">pandigits</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">pandigits</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">d</span><span class="p">)</span> <span class="o">!=</span> <span class="n">pandigits</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="o">||</span>
</span><span class='line'>            <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">pd</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">d</span><span class="p">)</span> <span class="o">!=</span> <span class="n">pd</span><span class="p">.</span><span class="n">end</span><span class="p">()))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">pd</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>        <span class="n">product</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Found an existing digit</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// We formed a new product; keep going!</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">rbegin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">pd</span><span class="p">.</span><span class="n">rend</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pandigits</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="o">++</span><span class="n">o</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pandigits</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">9</span> <span class="o">&amp;&amp;</span> <span class="n">o</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">panDigital</span> <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Found: &quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="nl">d</span> <span class="p">:</span> <span class="n">pandigits</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>        <span class="n">panDigital</span> <span class="o">=</span> <span class="n">panDigital</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; * &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">o</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">panDigital</span> <span class="o">&gt;</span> <span class="n">largestPanDigital</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">largestPanDigital</span> <span class="o">=</span> <span class="n">panDigital</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The largest one is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">largestPanDigital</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It runs as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>~/cpp/Test
</span><span class='line'>Found: <span class="nv">918273645</span> <span class="o">=</span> <span class="m">9</span> * 5
</span><span class='line'>Found: <span class="nv">192384576</span> <span class="o">=</span> <span class="m">192</span> * 3
</span><span class='line'>Found: <span class="nv">219438657</span> <span class="o">=</span> <span class="m">219</span> * 3
</span><span class='line'>Found: <span class="nv">273546819</span> <span class="o">=</span> <span class="m">273</span> * 3
</span><span class='line'>Found: <span class="nv">327654981</span> <span class="o">=</span> <span class="m">327</span> * 3
</span><span class='line'>Found: <span class="nv">672913458</span> <span class="o">=</span> <span class="m">6729</span> * 2
</span><span class='line'>Found: <span class="nv">679213584</span> <span class="o">=</span> <span class="m">6792</span> * 2
</span><span class='line'>Found: <span class="nv">692713854</span> <span class="o">=</span> <span class="m">6927</span> * 2
</span><span class='line'>Found: <span class="nv">726914538</span> <span class="o">=</span> <span class="m">7269</span> * 2
</span><span class='line'>Found: <span class="nv">729314586</span> <span class="o">=</span> <span class="m">7293</span> * 2
</span><span class='line'>Found: <span class="nv">732914658</span> <span class="o">=</span> <span class="m">7329</span> * 2
</span><span class='line'>Found: <span class="nv">769215384</span> <span class="o">=</span> <span class="m">7692</span> * 2
</span><span class='line'>Found: <span class="nv">792315846</span> <span class="o">=</span> <span class="m">7923</span> * 2
</span><span class='line'>Found: <span class="nv">793215864</span> <span class="o">=</span> <span class="m">7932</span> * 2
</span><span class='line'>Found: <span class="nv">926718534</span> <span class="o">=</span> <span class="m">9267</span> * 2
</span><span class='line'>Found: <span class="nv">927318546</span> <span class="o">=</span> <span class="m">9273</span> * 2
</span><span class='line'>Found: <span class="nv">932718654</span> <span class="o">=</span> <span class="m">9327</span> * 2
</span><span class='line'>The largest one is &lt;redacted&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static Types, Dynamic Types, is your type my type?]]></title>
    <link href="http://agam.github.io/blog/2015/03/19/static-typing/"/>
    <updated>2015-03-19T02:51:00+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/19/static-typing</id>
    <content type="html"><![CDATA[<p>Numerous people smarter than me have weighed into the static vs dynamic typing debate, so I&rsquo;ll be brief: I won&rsquo;t pick sides because <em>there are no sides to pick</em>. Except for some <em>obvious</em> cases where there is little disagreement, the word &ldquo;type&rdquo; just happens to mean two very different things when putting forth arguments on the benefits of either <em>side</em>.</p>

<p>Looking back now, the only language that I&rsquo;ve seen where the distinction I&rsquo;m talking about is made explicit, is SML. The <code>type</code> keyword is <em>different</em> from the <code>datatype</code> keyword. The benefits of static types are tied up with the former, whereas people defending dynamic typing are usually resisting an <em>overuse</em> of the latter (with a mass of confusion in the middle).</p>

<p>The usual way (C, C++, Java) of thinking about types is &ldquo;struct&rdquo; types or &ldquo;class&rdquo; types, i.e. some sort of <em>storage</em> type for values &mdash; given some raw bits, what can I &ldquo;cast&rdquo; these bits to? What <em>datatype</em> do these bits represent?</p>

<p>From this perspective, having some guarantees about the datatype represented by these bits is <strong>very important</strong>, and this is the reason given by people preferring (say) C++/Java over either untyped or weakly typed languages (e.g. C, Python).</p>

<p>One outlier worth mentioning is the case where the primitive level is <em>not</em> raw bits, but run-time-typed values, as in Lisp. Here the low-level stuff <em>does</em> have a type, so you don&rsquo;t <em>really</em> need the strong guarantees of &ldquo;which datatype do these bits represent?&rdquo; (and therefore, this is where the static vs dynamic typing debate really heats up).</p>

<p>On the other hand, <em>types</em> as in ML/Haskell etc. are a superset (usually) of datatypes, and might be better thought of as &ldquo;tags&rdquo; of some sort &mdash; tags that satisfy certain constraints. Roughly, if you tag your values correctly, then the implicit constraints of the <strong>type system</strong> will guarantee constraints on how these values might be related, which in turn implicitly proves certain invariants of your program.</p>

<p>As an example, statically typed programs in these languages heavily use <em>Algebraic Data Types</em>, which are practically absent from both dynamically-typed languages (e.g. Lisp) as well as languages that stick to strong datatypes (e.g. C++). This makes sense &mdash; you don&rsquo;t &ldquo;cast&rdquo; a bit pattern into an algebraic data type; you use it to constrain the uses of values tagged with it.</p>

<p>Anyway, there are <em>real</em> tradeoffs in the static-vs-dynamic debate, but a very small and explicit set. Most of the heat is just people talking past each other, using and misusing this overloaded word. Perhaps it would be better if we could just be disciplined enough to distinguish between <code>type</code> and <code>datatype</code> where it matters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 37: Truncatable Primes]]></title>
    <link href="http://agam.github.io/blog/2015/03/13/euler-37-truncatable-primes/"/>
    <updated>2015-03-13T07:04:08+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/13/euler-37-truncatable-primes</id>
    <content type="html"><![CDATA[<p>I realize using <em>C++</em> is a bit like cheating since the initial motive of doing ProjectEuler was to explore a new <em>language</em>. But I reserve the right to &ldquo;revise&rdquo; that motive :P. Besides, I find it hard to overrule the part of myself that just wants to know the answer <em>now</em>, <em>quickly</em>.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kMaxNumbers</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">filterPrimes</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;*</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">candidate</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">candidate</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">multiple</span> <span class="o">=</span> <span class="n">candidate</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">multiple</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">numbers</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="n">multiple</span><span class="p">)</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>      <span class="n">multiple</span> <span class="o">+=</span> <span class="n">candidate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">++</span><span class="n">candidate</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">candidate</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">numbers</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="n">candidate</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">candidate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">candidate</span> <span class="o">==</span> <span class="n">kMaxNumbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">getNumber</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">digits</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">start</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">isTruncatablePrime</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">,</span> <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">primes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">||</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">5</span> <span class="o">||</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">7</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">primes</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">kMaxNumbers</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">digits</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span> <span class="n">t</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digits</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">t</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">digits</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="n">getNumber</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">getNumber</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">digits</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">primes</span><span class="p">[</span><span class="n">n1</span><span class="p">]</span> <span class="o">||</span> <span class="o">!</span><span class="n">primes</span><span class="p">[</span><span class="n">n2</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">prime_candidates</span><span class="p">(</span><span class="n">kMaxNumbers</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>  <span class="n">prime_candidates</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="n">prime_candidates</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="n">filterPrimes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">prime_candidates</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sum_truncatables</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">prime_candidates</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">isTruncatablePrime</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">prime_candidates</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug: found &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sum_truncatables</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The sum is: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">sum_truncatables</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>which runs as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Debug: found 23
</span><span class='line'>Debug: found 37
</span><span class='line'>Debug: found 53
</span><span class='line'>Debug: found 73
</span><span class='line'>Debug: found 313
</span><span class='line'>Debug: found 317
</span><span class='line'>Debug: found 373
</span><span class='line'>Debug: found 797
</span><span class='line'>Debug: found 3137
</span><span class='line'>Debug: found 3797
</span><span class='line'>Debug: found 739397
</span><span class='line'>The sum is: &lt;redacted&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernighan, Go and _useful_ languages]]></title>
    <link href="http://agam.github.io/blog/2015/03/06/kernighan/"/>
    <updated>2015-03-06T05:17:07+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/06/kernighan</id>
    <content type="html"><![CDATA[<p>I&rsquo;m excitedly looking forward to Kernighan&rsquo;s <a href="http://www.amazon.com/Programming-Language-Addison-Wesley-Professional-Computing/dp/0134190440/">new book</a>. But more than that, I&rsquo;m <em>very</em> happy that the &ldquo;Go rocket&rdquo; has now definitively cleared the launchpad &mdash; and predictably, heads are exploding all over that great bastion of PL hipsterdom, <a href="https://news.ycombinator.com/item?id=9150163"><em>Hacker News</em></a>.</p>

<p>As an aside, the Reddit community seems way more mature and not react predictably all the time. See <a href="http://www.reddit.com/r/programming/comments/2y105x/the_go_programming_language_by_brian_w_kernighan/">this</a> thread, which is really a humorous meta-comment on all such discussions:</p>

<ul>
<li>&lt;generic rant about generics></li>
<li>&lt;simplistic response about how Go is simple>
&mdash;&ndash;  <em>No generics means reading the code is easier, somehow!</em></li>
<li><strong>&lt;snarky response about Rust&rsquo;s superiority></strong></li>
<li>&lt;attempt to shoehorn D into the conversation></li>
<li>&lt;link to article explaining monads></li>
<li>&lt;web scale node.js></li>
<li>&lt;We are the Knights who say NIM!></li>
</ul>


<p>Anyway, all I know so far is the <a href="http://www.informit.com/store/go-programming-language-9780134190440#bss0f8fc8f7-6d8d-4816-9b68-458cbd7149e6">Table of Contents</a>, but stay tuned for more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 36: Palindromic Numbers]]></title>
    <link href="http://agam.github.io/blog/2015/03/05/euler-36-palindromic-numbers/"/>
    <updated>2015-03-05T06:10:59+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/05/euler-36-palindromic-numbers</id>
    <content type="html"><![CDATA[<p>Wha &hellip; this is getting boring.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kMaxNumbers</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">isPalindromic</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">base</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">digits</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digits</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">base</span><span class="p">);</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">/=</span> <span class="n">base</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">digits</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">digits</span><span class="p">[</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isPalindromic</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">isPalindromic</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Sum of palindromic numbers = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">sum</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(runs in <code>931 milliseconds</code>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 35: Circular Primes]]></title>
    <link href="http://agam.github.io/blog/2015/03/04/euler-35-circular-primes/"/>
    <updated>2015-03-04T23:49:53+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/04/euler-35-circular-primes</id>
    <content type="html"><![CDATA[<p>The easy solutions continue (or, I&rsquo;ve just gotten used to C++ for these)</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Euler 35: A number is a circular prime if all the _rotations_ of</span>
</span><span class='line'><span class="c1">// its digits are prime numbers.</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">kMaxNumbers</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">bitset</span><span class="o">&lt;</span><span class="n">kMaxNumbers</span><span class="o">&gt;</span> <span class="n">AllNumbers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">markMultiples</span><span class="p">(</span><span class="n">AllNumbers</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">kStart</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">kStart</span> <span class="o">&gt;=</span> <span class="n">kMaxNumbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">kStart</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">v</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">markPrimes</span><span class="p">(</span><span class="n">AllNumbers</span><span class="o">*</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">v</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">markMultiples</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="o">++</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">test</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">kMaxNumbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getDigits</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">getNumber</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getRotatedNumbers</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">v</span> <span class="o">=</span> <span class="n">getDigits</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">numbers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">getNumber</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">rotate</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">numbers</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">AllNumbers</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">v</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">markPrimes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">numCircularPrimes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fail early</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">v</span><span class="p">.</span><span class="n">test</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">getRotatedNumbers</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">all_of</span><span class="p">(</span><span class="n">ps</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ps</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">v</span><span class="p">](</span><span class="kt">int</span> <span class="n">p</span><span class="p">){</span><span class="k">return</span> <span class="n">v</span><span class="p">.</span><span class="n">test</span><span class="p">(</span><span class="n">p</span><span class="p">);}))</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">numCircularPrimes</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Number of circular primes = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">numCircularPrimes</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It runs in <code>335 milliseconds</code> &mdash; though I&rsquo;m not sure if it is a high or a low number.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 34: Curious Numbers]]></title>
    <link href="http://agam.github.io/blog/2015/03/04/euler-34-curious-numbers/"/>
    <updated>2015-03-04T21:33:28+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/04/euler-34-curious-numbers</id>
    <content type="html"><![CDATA[<p><em>Grumble</em> &hellip; I&rsquo;m missing the tougher problems we saw earlier. This is another easy one.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getDigits</span><span class="p">(</span><span class="kt">int</span> <span class="n">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">number</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">number</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">printVector</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;[ &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">d</span> <span class="p">:</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; ]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Yep, crude, but it works.</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">memos</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">memos</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">memos</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fact</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fact</span> <span class="o">*=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">memos</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">fact</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fact</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">sumFactDigits</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">d</span> <span class="p">:</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">factorial</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kMaxTries</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxTries</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">getDigits</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">sumFactDigits</span><span class="p">(</span><span class="n">d</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug: found &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">reverse</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">d</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>      <span class="n">printVector</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Required sum = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">sum</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and it runs as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Debug: found <span class="o">[</span> 1, 4, 5,  <span class="o">]</span>
</span><span class='line'>Debug: found <span class="o">[</span> 4, 0, 5, 8, 5,  <span class="o">]</span>
</span><span class='line'>Required <span class="nv">sum</span> <span class="o">=</span> &lt;redacted&gt;
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 33: Curious Fractions]]></title>
    <link href="http://agam.github.io/blog/2015/03/04/euler-33-curious-fractions/"/>
    <updated>2015-03-04T18:52:31+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/04/euler-33-curious-fractions</id>
    <content type="html"><![CDATA[<p>Hmm .. this is almost too straightforward to post, but here goes &hellip;</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getDigits</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">num</span> <span class="o">/</span> <span class="mi">10</span><span class="p">,</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">gcd</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">b</span> <span class="o">&lt;=</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">gcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getReducedForm</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">,</span> <span class="kt">int</span> <span class="n">den</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">den</span><span class="p">,</span> <span class="n">num</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">num</span> <span class="o">/</span> <span class="n">g</span><span class="p">,</span> <span class="n">den</span> <span class="o">/</span> <span class="n">g</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">isCuriousFraction</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">,</span> <span class="kt">int</span> <span class="n">den</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// If (1) the numbers share digits, and (2) they can be reduced,</span>
</span><span class='line'>  <span class="c1">// then they form a &#39;curious fraction&#39;</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">reducedForm</span> <span class="o">=</span> <span class="n">getReducedForm</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">den</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">n</span> <span class="o">=</span> <span class="n">getDigits</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">d</span> <span class="o">=</span> <span class="n">getDigits</span><span class="p">(</span><span class="n">den</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">n</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">d</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="n">n</span><span class="p">.</span><span class="n">first</span> <span class="o">&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">curiousForm</span> <span class="o">=</span> <span class="n">getReducedForm</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">d</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="n">d</span><span class="p">.</span><span class="n">first</span> <span class="o">&amp;&amp;</span> <span class="n">curiousForm</span> <span class="o">==</span> <span class="n">reducedForm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">numProduct</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">denProduct</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Go through all pairs of two-digit numbers, where one is smaller than the other.</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">den</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="n">den</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="o">++</span><span class="n">den</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">den</span><span class="p">;</span> <span class="o">++</span><span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">isCuriousFraction</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">den</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug: found &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; / &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">den</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">numProduct</span> <span class="o">*=</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>  <span class="n">denProduct</span> <span class="o">*=</span> <span class="n">den</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// For lowest common terms, divide both by GCD</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Denominator of product = &quot;</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="n">denProduct</span> <span class="o">/</span> <span class="n">gcd</span><span class="p">(</span><span class="n">denProduct</span><span class="p">,</span> <span class="n">numProduct</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and runs as follows</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Debug: found <span class="m">16</span> / 64
</span><span class='line'>Debug: found <span class="m">26</span> / 65
</span><span class='line'>Debug: found <span class="m">19</span> / 95
</span><span class='line'>Debug: found <span class="m">49</span> / 98
</span><span class='line'>Denominator of <span class="nv">product</span> <span class="o">=</span> &lt;redacted&gt;
</span></code></pre></td></tr></table></div></figure>


<p>(<em>Sigh</em> &hellip; yes, its <em>longer</em> than some of the previous solutions, but it really didn&rsquo;t take me long to write it &hellip; I think I&rsquo;m developing a renewed appreciation for C++)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 32: Sum of Pan-digital products]]></title>
    <link href="http://agam.github.io/blog/2015/03/04/euler-32-sum-of-pan-digital-products/"/>
    <updated>2015-03-04T07:10:28+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/04/euler-32-sum-of-pan-digital-products</id>
    <content type="html"><![CDATA[<p>Pretty dumb naive solution.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kNumDigits</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">getNumber</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">vNum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">vNum</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">vNum</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">isProduct</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">vMultA</span><span class="p">,</span>
</span><span class='line'>               <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">vMultB</span><span class="p">,</span>
</span><span class='line'>               <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">vProduct</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">multa</span> <span class="o">=</span> <span class="n">getNumber</span><span class="p">(</span><span class="n">vMultA</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">multb</span> <span class="o">=</span> <span class="n">getNumber</span><span class="p">(</span><span class="n">vMultB</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">product</span> <span class="o">=</span> <span class="n">getNumber</span><span class="p">(</span><span class="n">vProduct</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">multa</span> <span class="o">*</span> <span class="n">multb</span> <span class="o">==</span> <span class="n">product</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug: Testing &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">multa</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; * &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">multb</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">product</span>
</span><span class='line'>              <span class="o">&lt;&lt;</span> <span class="s">&quot;  --- MATCH!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Try all possible splits from this combination</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">tryPermutation</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">p</span><span class="p">,</span>
</span><span class='line'>                    <span class="kt">int</span><span class="o">*</span> <span class="n">total_matches</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">std</span><span class="o">::</span><span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;*</span> <span class="n">products</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">kNumDigits</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// There are nine digits, indexed from 0 to 8</span>
</span><span class='line'>  <span class="c1">// First number spans 0 to i, the second i + 1 to j, third is from j + 1 to 8</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">kNumDigits</span> <span class="o">-</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">kNumDigits</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">n1</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">n2</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">kNumDigits</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">n3</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">isProduct</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span><span class="n">n2</span><span class="p">,</span><span class="n">n3</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">++</span><span class="p">(</span><span class="o">*</span><span class="n">total_matches</span><span class="p">);</span>
</span><span class='line'>        <span class="n">products</span><span class="o">-&gt;</span><span class="n">insert</span><span class="p">(</span><span class="n">getNumber</span><span class="p">(</span><span class="n">n3</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">digits</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">kNumDigits</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digits</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">total_matches</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">products</span><span class="p">;</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">tryPermutation</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">total_matches</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">products</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">next_permutation</span><span class="p">(</span><span class="n">digits</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">digits</span><span class="p">.</span><span class="n">end</span><span class="p">()));</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">products_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">p</span> <span class="p">:</span> <span class="n">products</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">products_sum</span> <span class="o">+=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Number of matches = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">total_matches</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="s">&quot;Sum of products = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">products_sum</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Runs as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~/cpp <span class="nv">$ </span><span class="nb">time</span> ./Test
</span><span class='line'>Debug: Testing <span class="m">12</span> * <span class="nv">483</span> <span class="o">=</span> <span class="m">5796</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">138</span> * <span class="nv">42</span> <span class="o">=</span> <span class="m">5796</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">157</span> * <span class="nv">28</span> <span class="o">=</span> <span class="m">4396</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">159</span> * <span class="nv">48</span> <span class="o">=</span> <span class="m">7632</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">1738</span> * <span class="nv">4</span> <span class="o">=</span> <span class="m">6952</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">18</span> * <span class="nv">297</span> <span class="o">=</span> <span class="m">5346</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">186</span> * <span class="nv">39</span> <span class="o">=</span> <span class="m">7254</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">1963</span> * <span class="nv">4</span> <span class="o">=</span> <span class="m">7852</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">198</span> * <span class="nv">27</span> <span class="o">=</span> <span class="m">5346</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">27</span> * <span class="nv">198</span> <span class="o">=</span> <span class="m">5346</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">28</span> * <span class="nv">157</span> <span class="o">=</span> <span class="m">4396</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">297</span> * <span class="nv">18</span> <span class="o">=</span> <span class="m">5346</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">39</span> * <span class="nv">186</span> <span class="o">=</span> <span class="m">7254</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">4</span> * <span class="nv">1738</span> <span class="o">=</span> <span class="m">6952</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">4</span> * <span class="nv">1963</span> <span class="o">=</span> <span class="m">7852</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">42</span> * <span class="nv">138</span> <span class="o">=</span> <span class="m">5796</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">48</span> * <span class="nv">159</span> <span class="o">=</span> <span class="m">7632</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">483</span> * <span class="nv">12</span> <span class="o">=</span> <span class="m">5796</span>  --- MATCH!
</span><span class='line'>Number of <span class="nv">matches</span> <span class="o">=</span> 18, Sum of <span class="nv">products</span> <span class="o">=</span> 45228
</span><span class='line'>15.517 secs
</span></code></pre></td></tr></table></div></figure>


<p>(Wait, why C++ instead of &hellip; other recent languages? Couple of reasons: (1) I thought I&rsquo;d need to brute force this (though it eventually turned out to take much less time than I anticipated), and (2) I&rsquo;m sort of <em>over</em> the <em>over-experimentation</em> with languages that I&rsquo;m not <em>really</em> going to use, and I&rsquo;m not going to get much out of anyway. Yes, tough. Deal with it)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 31: Coin combinations (and over-engineering)]]></title>
    <link href="http://agam.github.io/blog/2015/02/22/euler-31-coin-combinations-and-over-engineering/"/>
    <updated>2015-02-22T04:44:55+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/22/euler-31-coin-combinations-and-over-engineering</id>
    <content type="html"><![CDATA[<p>I had this one all wrong, and made it way more complex than it really was. I&rsquo;m embarassed to post the final code &hellip; but it is what it is.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">Data.Maybe</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Basic idea is something like this:</span>
</span><span class='line'><span class="c1">-- [*] given amount and some coins, pick the largest coin</span>
</span><span class='line'><span class="c1">-- [*] there are (floor (total/coin)) ways of using this coin value</span>
</span><span class='line'><span class="c1">-- [*] but ... NOT ALL of these count! Only the ones that leave a total that can be used with the remaining coins!</span>
</span><span class='line'>
</span><span class='line'><span class="nf">coins</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sortedCoins</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">sortedCoins</span> <span class="ow">=</span> <span class="kt">L</span><span class="o">.</span><span class="n">reverse</span> <span class="o">$</span> <span class="kt">L</span><span class="o">.</span><span class="n">sort</span> <span class="o">$</span> <span class="n">coins</span>
</span><span class='line'>
</span><span class='line'><span class="nf">combinations</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">combinations</span> <span class="n">total</span> <span class="n">coins</span> <span class="ow">=</span>
</span><span class='line'><span class="c1">--  T.trace (&quot;total = &quot; ++ show total ++ &quot;, coins = &quot; ++ show coins) $</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">total</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kr">then</span> <span class="kt">Just</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kr">else</span> <span class="kr">case</span> <span class="n">coins</span> <span class="kr">of</span>
</span><span class='line'>        <span class="kt">[]</span> <span class="ow">-&gt;</span> <span class="kt">Nothing</span>
</span><span class='line'>        <span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">mod</span> <span class="n">total</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">0</span> <span class="kr">then</span> <span class="kt">Just</span> <span class="mi">1</span> <span class="kr">else</span> <span class="kt">Nothing</span>
</span><span class='line'>        <span class="n">c</span><span class="kt">:</span><span class="n">cs</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">total</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>                <span class="kr">then</span> <span class="kt">Just</span> <span class="mi">1</span>
</span><span class='line'>                <span class="kr">else</span> <span class="kr">let</span> <span class="n">newTotal</span> <span class="n">total</span> <span class="n">coin</span> <span class="n">num</span> <span class="ow">=</span> <span class="n">total</span> <span class="o">-</span> <span class="p">(</span><span class="n">coin</span> <span class="o">*</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'>                         <span class="n">combs</span> <span class="ow">=</span> <span class="p">[</span><span class="n">combinations</span> <span class="p">(</span><span class="n">newTotal</span> <span class="n">total</span> <span class="n">c</span> <span class="n">num</span><span class="p">)</span> <span class="n">cs</span> <span class="o">|</span> <span class="n">num</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">0</span> <span class="o">..</span> <span class="n">div</span> <span class="n">total</span> <span class="n">c</span><span class="p">]]</span>
</span><span class='line'>                         <span class="n">counts</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="n">catMaybes</span> <span class="n">combs</span>
</span><span class='line'>                     <span class="kr">in</span>
</span><span class='line'>                      <span class="kr">if</span> <span class="n">counts</span> <span class="o">==</span> <span class="mi">0</span> <span class="kr">then</span> <span class="kt">Nothing</span> <span class="kr">else</span> <span class="kt">Just</span> <span class="n">counts</span>
</span><span class='line'>
</span><span class='line'><span class="nf">euler31</span> <span class="ow">::</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">euler31</span> <span class="ow">=</span> <span class="n">fromJust</span> <span class="o">$</span> <span class="n">combinations</span> <span class="mi">200</span> <span class="n">sortedCoins</span>
</span></code></pre></td></tr></table></div></figure>


<p>It turns out, I was being overly cautious and could have just used lists in a different way (left in a commented out debug line to show that I needed it).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 30: sums of powers of digits]]></title>
    <link href="http://agam.github.io/blog/2015/02/18/euler-30-sums-of-powers-of-digits/"/>
    <updated>2015-02-18T21:41:02+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/18/euler-30-sums-of-powers-of-digits</id>
    <content type="html"><![CDATA[<p>Another quick and easy solution. This doesn&rsquo;t mean it&rsquo;s an <em>easy problem!</em>; no, it&rsquo;s more like playing a level at the <em>rookie level</em>. The hard and &ldquo;correct&rdquo; solution would be to work it out on pen-and-paper using Number Theory.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">digits</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">digits</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">digitsHelper</span> <span class="n">n</span> <span class="kt">[]</span>
</span><span class='line'>  <span class="kr">where</span>
</span><span class='line'>    <span class="n">digitsHelper</span> <span class="n">num</span> <span class="n">dList</span> <span class="ow">=</span>
</span><span class='line'>      <span class="kr">if</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="kr">then</span> <span class="n">digitsHelper</span> <span class="p">(</span><span class="n">div</span> <span class="n">num</span> <span class="mi">10</span><span class="p">)</span> <span class="o">$</span> <span class="p">(</span><span class="n">mod</span> <span class="n">num</span> <span class="mi">10</span><span class="p">)</span> <span class="kt">:</span> <span class="n">dList</span>
</span><span class='line'>      <span class="kr">else</span> <span class="n">dList</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sumFifthPow</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">sumFifthPow</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="n">map</span> <span class="p">(</span><span class="o">^</span> <span class="mi">5</span><span class="p">)</span> <span class="o">$</span> <span class="n">digits</span> <span class="n">n</span>
</span><span class='line'>
</span><span class='line'><span class="nf">euler30</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">euler30</span> <span class="n">limit</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="p">[</span><span class="n">x</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">2</span> <span class="o">..</span> <span class="n">limit</span><span class="p">],</span> <span class="n">x</span> <span class="o">==</span> <span class="n">sumFifthPow</span> <span class="n">x</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, this version needs &ldquo;manual intervention&rdquo;, since I used the rough approximation that if <code>euler30 1000000</code> and <code>euler30 10000000</code> gave the same result, this was probably the right answer. It was.</p>
]]></content>
  </entry>
  
</feed>
