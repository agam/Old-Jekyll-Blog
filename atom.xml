<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-03-21T19:45:48+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Euler 40: Champernowne's Constant]]></title>
    <link href="http://agam.github.io/blog/2015/03/21/euler-40-champernownes-constant/"/>
    <updated>2015-03-21T19:34:12+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/21/euler-40-champernownes-constant</id>
    <content type="html"><![CDATA[<p>I was too lazy to avoid the brute-force approach here, especially since it took less than a second to run. The following seems longer than it should be, partly because I left in some helper and debugging functions &hellip;</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers Ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*max-digits*</span> <span class="mi">2000000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">digits</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">nreverse</span> <span class="p">(</span><span class="nb">loop</span>
</span><span class='line'>               <span class="nv">for</span> <span class="nv">tmp</span> <span class="nb">=</span> <span class="nv">n</span> <span class="nv">then</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">tmp</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>               <span class="nv">until</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">tmp</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>               <span class="nv">collect</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">tmp</span> <span class="mi">10</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">set-digits</span> <span class="p">(</span><span class="nv">d</span> <span class="nv">start</span> <span class="nv">all-digits</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">loop</span>
</span><span class='line'>     <span class="nv">for</span> <span class="nv">elem</span> <span class="nv">in</span> <span class="nv">d</span>
</span><span class='line'>     <span class="nv">for</span> <span class="nv">idx</span> <span class="nb">=</span> <span class="nv">start</span> <span class="nv">then</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">idx</span><span class="p">)</span> <span class="nb">do</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">aref</span> <span class="nv">all-digits</span> <span class="nv">idx</span><span class="p">)</span> <span class="nv">elem</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Fills out the array of digits and returns an accessor function</span>
</span><span class='line'><span class="c1">;; Note: the index increments by the length of the number of</span>
</span><span class='line'><span class="c1">;; digits of the _previous_ number.</span>
</span><span class='line'><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">all-digits</span> <span class="p">(</span><span class="nb">make-array</span> <span class="p">(</span><span class="nb">list</span> <span class="vg">*max-digits*</span><span class="p">)</span> <span class="ss">:element-type</span> <span class="o">&#39;</span><span class="p">(</span><span class="nc">integer</span> <span class="mi">0</span> <span class="mi">9</span><span class="p">)</span> <span class="ss">:initial-element</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">defun</span> <span class="nv">populate-digits</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">loop</span>
</span><span class='line'>         <span class="nv">for</span> <span class="nv">num</span> <span class="nb">=</span> <span class="mi">1</span> <span class="nv">then</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">num</span><span class="p">)</span>
</span><span class='line'>         <span class="nv">for</span> <span class="nv">d</span> <span class="nb">=</span> <span class="p">(</span><span class="nv">digits</span> <span class="nv">num</span><span class="p">)</span>
</span><span class='line'>         <span class="nv">for</span> <span class="nv">i</span> <span class="nb">=</span> <span class="mi">0</span> <span class="nv">then</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">length</span> <span class="p">(</span><span class="nv">digits</span> <span class="p">(</span><span class="nb">1-</span> <span class="nv">num</span><span class="p">))))</span>
</span><span class='line'>         <span class="nv">while</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">i</span> <span class="nv">n</span><span class="p">)</span> <span class="nb">do</span>
</span><span class='line'>           <span class="p">(</span><span class="nv">set-digits</span> <span class="nv">d</span> <span class="nv">i</span> <span class="nv">all-digits</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">idx</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">aref</span> <span class="nv">all-digits</span> <span class="nv">idx</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">power-list</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">champer</span> <span class="p">(</span><span class="nv">populate-digits</span> <span class="mi">1000000</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">p</span> <span class="nv">from</span> <span class="mi">0</span> <span class="nv">to</span> <span class="mi">6</span> <span class="nv">collect</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">funcall</span> <span class="nv">champer</span> <span class="p">(</span><span class="nb">1-</span> <span class="p">(</span><span class="nb">expt</span> <span class="mi">10</span> <span class="nv">p</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">euler40</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">apply</span> <span class="ss">&#39;*</span> <span class="p">(</span><span class="nv">power-list</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Useful debugging tool</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">scan-list</span> <span class="p">(</span><span class="nv">start</span> <span class="nv">end</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">champer</span> <span class="p">(</span><span class="nv">populate-digits</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="nv">start</span> <span class="nv">to</span> <span class="nv">end</span> <span class="nb">do</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">print</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">funcall</span> <span class="nv">champer</span> <span class="nv">i</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &ldquo;final answer&rdquo; is given by <code>(euler40)</code>, and the intermediate digits themselves by <code>(power-list)</code>. I found <code>(scan-list)</code> useful to debug an embarassing off-by-one error in the loop.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 39: Integer Right Triangles]]></title>
    <link href="http://agam.github.io/blog/2015/03/20/euler-39-integer-right-triangles/"/>
    <updated>2015-03-20T23:09:44+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/20/euler-39-integer-right-triangles</id>
    <content type="html"><![CDATA[<p>Straightfoward, this. An interesting insight into speed difference between <code>SBCL</code> and <code>Clozure</code>: the former took <em>0.75 seconds</em> to run this, while the latter took about <em>4 seconds</em> (without the type annotations, <code>SBCL</code> takes <em>33 seconds</em>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">is-right-triangle</span> <span class="p">(</span><span class="nv">n1</span> <span class="nv">n2</span> <span class="nv">n3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">n1</span> <span class="nv">n2</span> <span class="nv">n3</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">=</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">expt</span> <span class="nv">n1</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">expt</span> <span class="nv">n2</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="nb">expt</span> <span class="nv">n3</span> <span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">triangle-solutions</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">;; Largest side (hyp) can&#39;t be less than a third of the total</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">hyp</span> <span class="nv">from</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">n</span> <span class="mi">3</span><span class="p">))</span> <span class="nv">upto</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>     <span class="c1">;; Avoid repeating combinations, so WLOG let one side</span>
</span><span class='line'>     <span class="c1">;; be greater than the other</span>
</span><span class='line'>     <span class="nv">for</span> <span class="nv">sides-sum</span> <span class="nb">=</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="nv">hyp</span><span class="p">)</span>
</span><span class='line'>     <span class="nb">when</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">side1</span> <span class="nv">from</span> <span class="p">(</span><span class="nb">ceiling</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">sides-sum</span> <span class="mi">2</span><span class="p">))</span> <span class="nv">to</span> <span class="p">(</span><span class="nb">1-</span> <span class="nv">sides-sum</span><span class="p">)</span>
</span><span class='line'>             <span class="nv">for</span> <span class="nv">side2</span> <span class="nb">=</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">sides-sum</span> <span class="nv">side1</span><span class="p">)</span>
</span><span class='line'>             <span class="nb">when</span> <span class="p">(</span><span class="nv">is-right-triangle</span> <span class="nv">side1</span> <span class="nv">side2</span> <span class="nv">hyp</span><span class="p">)</span>
</span><span class='line'>             <span class="nv">collect</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">side1</span> <span class="nv">side2</span> <span class="nv">hyp</span><span class="p">))</span>
</span><span class='line'>     <span class="nv">collect</span> <span class="nv">it</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">max-triangle-solutions</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">;; n cannot be less than 3</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">solutions</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="mi">3</span> <span class="nv">to</span> <span class="nv">n</span>
</span><span class='line'>                       <span class="nv">collect</span> <span class="p">(</span><span class="nb">length</span> <span class="p">(</span><span class="nv">triangle-solutions</span> <span class="nv">i</span><span class="p">))))</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">max-solution</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">elem</span> <span class="nv">in</span> <span class="nv">solutions</span> <span class="nv">maximizing</span> <span class="nv">elem</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cons</span> <span class="nv">max-solution</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">3</span> <span class="p">(</span><span class="nb">position</span> <span class="nv">max-solution</span> <span class="nv">solutions</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The answer needed is given by <code>(max-triangle-solutions 1000)</code>, while any specific solution can be got by (e.g.) running <code>(triangle-solutions 120)</code> which yields <code>(((40 30 50)) ((45 24 51)) ((48 20 52)))</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 38: Pandigital multiples]]></title>
    <link href="http://agam.github.io/blog/2015/03/19/euler-38-pandigital-multiples/"/>
    <updated>2015-03-19T03:41:10+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/19/euler-38-pandigital-multiples</id>
    <content type="html"><![CDATA[<p>I&rsquo;m embarassed at how ridiculously naive my solution is. In hindsight, it&rsquo;s so <em>obvious</em> that the solution <em>has</em> to be a four-digit number and its double, and that the first digit is going to be a 9.</p>

<p>Still, C++ makes you lazy. This took <code>24 milliseconds</code>, and I didn&rsquo;t feel the need to speed it up :)</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">long</span> <span class="n">kMaxNumbers</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">largestPanDigital</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">long</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="o">++</span><span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pandigits</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">o</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">o</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">product</span> <span class="o">=</span> <span class="n">num</span> <span class="o">*</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'>      <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pd</span><span class="p">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">product</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">product</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span>
</span><span class='line'>            <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">pandigits</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">pandigits</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">d</span><span class="p">)</span> <span class="o">!=</span> <span class="n">pandigits</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="o">||</span>
</span><span class='line'>            <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">pd</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">d</span><span class="p">)</span> <span class="o">!=</span> <span class="n">pd</span><span class="p">.</span><span class="n">end</span><span class="p">()))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">pd</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>        <span class="n">product</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Found an existing digit</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// We formed a new product; keep going!</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">rbegin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">pd</span><span class="p">.</span><span class="n">rend</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pandigits</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="o">++</span><span class="n">o</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pandigits</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">9</span> <span class="o">&amp;&amp;</span> <span class="n">o</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">panDigital</span> <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Found: &quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="nl">d</span> <span class="p">:</span> <span class="n">pandigits</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>        <span class="n">panDigital</span> <span class="o">=</span> <span class="n">panDigital</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; * &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">o</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">panDigital</span> <span class="o">&gt;</span> <span class="n">largestPanDigital</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">largestPanDigital</span> <span class="o">=</span> <span class="n">panDigital</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The largest one is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">largestPanDigital</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It runs as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>~/cpp/Test
</span><span class='line'>Found: <span class="nv">918273645</span> <span class="o">=</span> <span class="m">9</span> * 5
</span><span class='line'>Found: <span class="nv">192384576</span> <span class="o">=</span> <span class="m">192</span> * 3
</span><span class='line'>Found: <span class="nv">219438657</span> <span class="o">=</span> <span class="m">219</span> * 3
</span><span class='line'>Found: <span class="nv">273546819</span> <span class="o">=</span> <span class="m">273</span> * 3
</span><span class='line'>Found: <span class="nv">327654981</span> <span class="o">=</span> <span class="m">327</span> * 3
</span><span class='line'>Found: <span class="nv">672913458</span> <span class="o">=</span> <span class="m">6729</span> * 2
</span><span class='line'>Found: <span class="nv">679213584</span> <span class="o">=</span> <span class="m">6792</span> * 2
</span><span class='line'>Found: <span class="nv">692713854</span> <span class="o">=</span> <span class="m">6927</span> * 2
</span><span class='line'>Found: <span class="nv">726914538</span> <span class="o">=</span> <span class="m">7269</span> * 2
</span><span class='line'>Found: <span class="nv">729314586</span> <span class="o">=</span> <span class="m">7293</span> * 2
</span><span class='line'>Found: <span class="nv">732914658</span> <span class="o">=</span> <span class="m">7329</span> * 2
</span><span class='line'>Found: <span class="nv">769215384</span> <span class="o">=</span> <span class="m">7692</span> * 2
</span><span class='line'>Found: <span class="nv">792315846</span> <span class="o">=</span> <span class="m">7923</span> * 2
</span><span class='line'>Found: <span class="nv">793215864</span> <span class="o">=</span> <span class="m">7932</span> * 2
</span><span class='line'>Found: <span class="nv">926718534</span> <span class="o">=</span> <span class="m">9267</span> * 2
</span><span class='line'>Found: <span class="nv">927318546</span> <span class="o">=</span> <span class="m">9273</span> * 2
</span><span class='line'>Found: <span class="nv">932718654</span> <span class="o">=</span> <span class="m">9327</span> * 2
</span><span class='line'>The largest one is &lt;redacted&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static Types, Dynamic Types, is your type my type?]]></title>
    <link href="http://agam.github.io/blog/2015/03/19/static-typing/"/>
    <updated>2015-03-19T02:51:00+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/19/static-typing</id>
    <content type="html"><![CDATA[<p>Numerous people smarter than me have weighed into the static vs dynamic typing debate, so I&rsquo;ll be brief: I won&rsquo;t pick sides because <em>there are no sides to pick</em>. Except for some <em>obvious</em> cases where there is little disagreement, the word &ldquo;type&rdquo; just happens to mean two very different things when putting forth arguments on the benefits of either <em>side</em>.</p>

<p>Looking back now, the only language that I&rsquo;ve seen where the distinction I&rsquo;m talking about is made explicit, is SML. The <code>type</code> keyword is <em>different</em> from the <code>datatype</code> keyword. The benefits of static types are tied up with the former, whereas people defending dynamic typing are usually resisting an <em>overuse</em> of the latter (with a mass of confusion in the middle).</p>

<p>The usual way (C, C++, Java) of thinking about types is &ldquo;struct&rdquo; types or &ldquo;class&rdquo; types, i.e. some sort of <em>storage</em> type for values &mdash; given some raw bits, what can I &ldquo;cast&rdquo; these bits to? What <em>datatype</em> do these bits represent?</p>

<p>From this perspective, having some guarantees about the datatype represented by these bits is <strong>very important</strong>, and this is the reason given by people preferring (say) C++/Java over either untyped or weakly typed languages (e.g. C, Python).</p>

<p>One outlier worth mentioning is the case where the primitive level is <em>not</em> raw bits, but run-time-typed values, as in Lisp. Here the low-level stuff <em>does</em> have a type, so you don&rsquo;t <em>really</em> need the strong guarantees of &ldquo;which datatype do these bits represent?&rdquo; (and therefore, this is where the static vs dynamic typing debate really heats up).</p>

<p>On the other hand, <em>types</em> as in ML/Haskell etc. are a superset (usually) of datatypes, and might be better thought of as &ldquo;tags&rdquo; of some sort &mdash; tags that satisfy certain constraints. Roughly, if you tag your values correctly, then the implicit constraints of the <strong>type system</strong> will guarantee constraints on how these values might be related, which in turn implicitly proves certain invariants of your program.</p>

<p>As an example, statically typed programs in these languages heavily use <em>Algebraic Data Types</em>, which are practically absent from both dynamically-typed languages (e.g. Lisp) as well as languages that stick to strong datatypes (e.g. C++). This makes sense &mdash; you don&rsquo;t &ldquo;cast&rdquo; a bit pattern into an algebraic data type; you use it to constrain the uses of values tagged with it.</p>

<p>Anyway, there are <em>real</em> tradeoffs in the static-vs-dynamic debate, but a very small and explicit set. Most of the heat is just people talking past each other, using and misusing this overloaded word. Perhaps it would be better if we could just be disciplined enough to distinguish between <code>type</code> and <code>datatype</code> where it matters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 37: Truncatable Primes]]></title>
    <link href="http://agam.github.io/blog/2015/03/13/euler-37-truncatable-primes/"/>
    <updated>2015-03-13T07:04:08+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/13/euler-37-truncatable-primes</id>
    <content type="html"><![CDATA[<p>I realize using <em>C++</em> is a bit like cheating since the initial motive of doing ProjectEuler was to explore a new <em>language</em>. But I reserve the right to &ldquo;revise&rdquo; that motive :P. Besides, I find it hard to overrule the part of myself that just wants to know the answer <em>now</em>, <em>quickly</em>.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kMaxNumbers</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">filterPrimes</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;*</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">candidate</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">candidate</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">multiple</span> <span class="o">=</span> <span class="n">candidate</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">multiple</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">numbers</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="n">multiple</span><span class="p">)</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>      <span class="n">multiple</span> <span class="o">+=</span> <span class="n">candidate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">++</span><span class="n">candidate</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">candidate</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">numbers</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="n">candidate</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">candidate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">candidate</span> <span class="o">==</span> <span class="n">kMaxNumbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">getNumber</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">digits</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">start</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">isTruncatablePrime</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">,</span> <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">primes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">||</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">5</span> <span class="o">||</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">7</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">primes</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">kMaxNumbers</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">digits</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span> <span class="n">t</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digits</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">t</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">digits</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="n">getNumber</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">getNumber</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">digits</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">primes</span><span class="p">[</span><span class="n">n1</span><span class="p">]</span> <span class="o">||</span> <span class="o">!</span><span class="n">primes</span><span class="p">[</span><span class="n">n2</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">prime_candidates</span><span class="p">(</span><span class="n">kMaxNumbers</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>  <span class="n">prime_candidates</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="n">prime_candidates</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="n">filterPrimes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">prime_candidates</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sum_truncatables</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">prime_candidates</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">isTruncatablePrime</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">prime_candidates</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug: found &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sum_truncatables</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The sum is: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">sum_truncatables</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>which runs as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Debug: found 23
</span><span class='line'>Debug: found 37
</span><span class='line'>Debug: found 53
</span><span class='line'>Debug: found 73
</span><span class='line'>Debug: found 313
</span><span class='line'>Debug: found 317
</span><span class='line'>Debug: found 373
</span><span class='line'>Debug: found 797
</span><span class='line'>Debug: found 3137
</span><span class='line'>Debug: found 3797
</span><span class='line'>Debug: found 739397
</span><span class='line'>The sum is: &lt;redacted&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernighan, Go and _useful_ languages]]></title>
    <link href="http://agam.github.io/blog/2015/03/06/kernighan/"/>
    <updated>2015-03-06T05:17:07+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/06/kernighan</id>
    <content type="html"><![CDATA[<p>I&rsquo;m excitedly looking forward to Kernighan&rsquo;s <a href="http://www.amazon.com/Programming-Language-Addison-Wesley-Professional-Computing/dp/0134190440/">new book</a>. But more than that, I&rsquo;m <em>very</em> happy that the &ldquo;Go rocket&rdquo; has now definitively cleared the launchpad &mdash; and predictably, heads are exploding all over that great bastion of PL hipsterdom, <a href="https://news.ycombinator.com/item?id=9150163"><em>Hacker News</em></a>.</p>

<p>As an aside, the Reddit community seems way more mature and not react predictably all the time. See <a href="http://www.reddit.com/r/programming/comments/2y105x/the_go_programming_language_by_brian_w_kernighan/">this</a> thread, which is really a humorous meta-comment on all such discussions:</p>

<ul>
<li>&lt;generic rant about generics></li>
<li>&lt;simplistic response about how Go is simple>
&mdash;&ndash;  <em>No generics means reading the code is easier, somehow!</em></li>
<li><strong>&lt;snarky response about Rust&rsquo;s superiority></strong></li>
<li>&lt;attempt to shoehorn D into the conversation></li>
<li>&lt;link to article explaining monads></li>
<li>&lt;web scale node.js></li>
<li>&lt;We are the Knights who say NIM!></li>
</ul>


<p>Anyway, all I know so far is the <a href="http://www.informit.com/store/go-programming-language-9780134190440#bss0f8fc8f7-6d8d-4816-9b68-458cbd7149e6">Table of Contents</a>, but stay tuned for more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 36: Palindromic Numbers]]></title>
    <link href="http://agam.github.io/blog/2015/03/05/euler-36-palindromic-numbers/"/>
    <updated>2015-03-05T06:10:59+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/05/euler-36-palindromic-numbers</id>
    <content type="html"><![CDATA[<p>Wha &hellip; this is getting boring.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kMaxNumbers</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">isPalindromic</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">base</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">digits</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digits</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">base</span><span class="p">);</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">/=</span> <span class="n">base</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">digits</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">digits</span><span class="p">[</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isPalindromic</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">isPalindromic</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Sum of palindromic numbers = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">sum</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(runs in <code>931 milliseconds</code>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 35: Circular Primes]]></title>
    <link href="http://agam.github.io/blog/2015/03/04/euler-35-circular-primes/"/>
    <updated>2015-03-04T23:49:53+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/04/euler-35-circular-primes</id>
    <content type="html"><![CDATA[<p>The easy solutions continue (or, I&rsquo;ve just gotten used to C++ for these)</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Euler 35: A number is a circular prime if all the _rotations_ of</span>
</span><span class='line'><span class="c1">// its digits are prime numbers.</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">kMaxNumbers</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">bitset</span><span class="o">&lt;</span><span class="n">kMaxNumbers</span><span class="o">&gt;</span> <span class="n">AllNumbers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">markMultiples</span><span class="p">(</span><span class="n">AllNumbers</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">kStart</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">kStart</span> <span class="o">&gt;=</span> <span class="n">kMaxNumbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">kStart</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">v</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">markPrimes</span><span class="p">(</span><span class="n">AllNumbers</span><span class="o">*</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">v</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">markMultiples</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="o">++</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">test</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">kMaxNumbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getDigits</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">getNumber</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getRotatedNumbers</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">v</span> <span class="o">=</span> <span class="n">getDigits</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">numbers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">getNumber</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">rotate</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">numbers</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">AllNumbers</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">v</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">markPrimes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">numCircularPrimes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxNumbers</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fail early</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">v</span><span class="p">.</span><span class="n">test</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">getRotatedNumbers</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">all_of</span><span class="p">(</span><span class="n">ps</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ps</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">v</span><span class="p">](</span><span class="kt">int</span> <span class="n">p</span><span class="p">){</span><span class="k">return</span> <span class="n">v</span><span class="p">.</span><span class="n">test</span><span class="p">(</span><span class="n">p</span><span class="p">);}))</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">numCircularPrimes</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Number of circular primes = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">numCircularPrimes</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It runs in <code>335 milliseconds</code> &mdash; though I&rsquo;m not sure if it is a high or a low number.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 34: Curious Numbers]]></title>
    <link href="http://agam.github.io/blog/2015/03/04/euler-34-curious-numbers/"/>
    <updated>2015-03-04T21:33:28+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/04/euler-34-curious-numbers</id>
    <content type="html"><![CDATA[<p><em>Grumble</em> &hellip; I&rsquo;m missing the tougher problems we saw earlier. This is another easy one.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getDigits</span><span class="p">(</span><span class="kt">int</span> <span class="n">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">number</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">number</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">printVector</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;[ &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">d</span> <span class="p">:</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; ]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Yep, crude, but it works.</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">memos</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">memos</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">memos</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fact</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fact</span> <span class="o">*=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">memos</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">fact</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fact</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">sumFactDigits</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">d</span> <span class="p">:</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">factorial</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kMaxTries</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kMaxTries</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">getDigits</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">sumFactDigits</span><span class="p">(</span><span class="n">d</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug: found &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">reverse</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">d</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>      <span class="n">printVector</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Required sum = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">sum</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and it runs as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Debug: found <span class="o">[</span> 1, 4, 5,  <span class="o">]</span>
</span><span class='line'>Debug: found <span class="o">[</span> 4, 0, 5, 8, 5,  <span class="o">]</span>
</span><span class='line'>Required <span class="nv">sum</span> <span class="o">=</span> &lt;redacted&gt;
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 33: Curious Fractions]]></title>
    <link href="http://agam.github.io/blog/2015/03/04/euler-33-curious-fractions/"/>
    <updated>2015-03-04T18:52:31+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/04/euler-33-curious-fractions</id>
    <content type="html"><![CDATA[<p>Hmm .. this is almost too straightforward to post, but here goes &hellip;</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getDigits</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">num</span> <span class="o">/</span> <span class="mi">10</span><span class="p">,</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">gcd</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">b</span> <span class="o">&lt;=</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">gcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getReducedForm</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">,</span> <span class="kt">int</span> <span class="n">den</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">den</span><span class="p">,</span> <span class="n">num</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">num</span> <span class="o">/</span> <span class="n">g</span><span class="p">,</span> <span class="n">den</span> <span class="o">/</span> <span class="n">g</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">isCuriousFraction</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">,</span> <span class="kt">int</span> <span class="n">den</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// If (1) the numbers share digits, and (2) they can be reduced,</span>
</span><span class='line'>  <span class="c1">// then they form a &#39;curious fraction&#39;</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">reducedForm</span> <span class="o">=</span> <span class="n">getReducedForm</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">den</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">n</span> <span class="o">=</span> <span class="n">getDigits</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">d</span> <span class="o">=</span> <span class="n">getDigits</span><span class="p">(</span><span class="n">den</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">n</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">d</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="n">n</span><span class="p">.</span><span class="n">first</span> <span class="o">&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">curiousForm</span> <span class="o">=</span> <span class="n">getReducedForm</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">d</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="n">d</span><span class="p">.</span><span class="n">first</span> <span class="o">&amp;&amp;</span> <span class="n">curiousForm</span> <span class="o">==</span> <span class="n">reducedForm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">numProduct</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">denProduct</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Go through all pairs of two-digit numbers, where one is smaller than the other.</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">den</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="n">den</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="o">++</span><span class="n">den</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">den</span><span class="p">;</span> <span class="o">++</span><span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">isCuriousFraction</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">den</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug: found &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; / &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">den</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">numProduct</span> <span class="o">*=</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>  <span class="n">denProduct</span> <span class="o">*=</span> <span class="n">den</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// For lowest common terms, divide both by GCD</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Denominator of product = &quot;</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="n">denProduct</span> <span class="o">/</span> <span class="n">gcd</span><span class="p">(</span><span class="n">denProduct</span><span class="p">,</span> <span class="n">numProduct</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and runs as follows</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Debug: found <span class="m">16</span> / 64
</span><span class='line'>Debug: found <span class="m">26</span> / 65
</span><span class='line'>Debug: found <span class="m">19</span> / 95
</span><span class='line'>Debug: found <span class="m">49</span> / 98
</span><span class='line'>Denominator of <span class="nv">product</span> <span class="o">=</span> &lt;redacted&gt;
</span></code></pre></td></tr></table></div></figure>


<p>(<em>Sigh</em> &hellip; yes, its <em>longer</em> than some of the previous solutions, but it really didn&rsquo;t take me long to write it &hellip; I think I&rsquo;m developing a renewed appreciation for C++)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 32: Sum of Pan-digital products]]></title>
    <link href="http://agam.github.io/blog/2015/03/04/euler-32-sum-of-pan-digital-products/"/>
    <updated>2015-03-04T07:10:28+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/04/euler-32-sum-of-pan-digital-products</id>
    <content type="html"><![CDATA[<p>Pretty dumb naive solution.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kNumDigits</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">getNumber</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">vNum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">vNum</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">vNum</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">isProduct</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">vMultA</span><span class="p">,</span>
</span><span class='line'>               <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">vMultB</span><span class="p">,</span>
</span><span class='line'>               <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">vProduct</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">multa</span> <span class="o">=</span> <span class="n">getNumber</span><span class="p">(</span><span class="n">vMultA</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">multb</span> <span class="o">=</span> <span class="n">getNumber</span><span class="p">(</span><span class="n">vMultB</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">product</span> <span class="o">=</span> <span class="n">getNumber</span><span class="p">(</span><span class="n">vProduct</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">multa</span> <span class="o">*</span> <span class="n">multb</span> <span class="o">==</span> <span class="n">product</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug: Testing &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">multa</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; * &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">multb</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">product</span>
</span><span class='line'>              <span class="o">&lt;&lt;</span> <span class="s">&quot;  --- MATCH!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Try all possible splits from this combination</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">tryPermutation</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">p</span><span class="p">,</span>
</span><span class='line'>                    <span class="kt">int</span><span class="o">*</span> <span class="n">total_matches</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">std</span><span class="o">::</span><span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;*</span> <span class="n">products</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">kNumDigits</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// There are nine digits, indexed from 0 to 8</span>
</span><span class='line'>  <span class="c1">// First number spans 0 to i, the second i + 1 to j, third is from j + 1 to 8</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">kNumDigits</span> <span class="o">-</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">kNumDigits</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">n1</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">n2</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">kNumDigits</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">n3</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">isProduct</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span><span class="n">n2</span><span class="p">,</span><span class="n">n3</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">++</span><span class="p">(</span><span class="o">*</span><span class="n">total_matches</span><span class="p">);</span>
</span><span class='line'>        <span class="n">products</span><span class="o">-&gt;</span><span class="n">insert</span><span class="p">(</span><span class="n">getNumber</span><span class="p">(</span><span class="n">n3</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">digits</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">kNumDigits</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">digits</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">total_matches</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">products</span><span class="p">;</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">tryPermutation</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">total_matches</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">products</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">next_permutation</span><span class="p">(</span><span class="n">digits</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">digits</span><span class="p">.</span><span class="n">end</span><span class="p">()));</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">products_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">p</span> <span class="p">:</span> <span class="n">products</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">products_sum</span> <span class="o">+=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Number of matches = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">total_matches</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="s">&quot;Sum of products = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">products_sum</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Runs as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~/cpp <span class="nv">$ </span><span class="nb">time</span> ./Test
</span><span class='line'>Debug: Testing <span class="m">12</span> * <span class="nv">483</span> <span class="o">=</span> <span class="m">5796</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">138</span> * <span class="nv">42</span> <span class="o">=</span> <span class="m">5796</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">157</span> * <span class="nv">28</span> <span class="o">=</span> <span class="m">4396</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">159</span> * <span class="nv">48</span> <span class="o">=</span> <span class="m">7632</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">1738</span> * <span class="nv">4</span> <span class="o">=</span> <span class="m">6952</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">18</span> * <span class="nv">297</span> <span class="o">=</span> <span class="m">5346</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">186</span> * <span class="nv">39</span> <span class="o">=</span> <span class="m">7254</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">1963</span> * <span class="nv">4</span> <span class="o">=</span> <span class="m">7852</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">198</span> * <span class="nv">27</span> <span class="o">=</span> <span class="m">5346</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">27</span> * <span class="nv">198</span> <span class="o">=</span> <span class="m">5346</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">28</span> * <span class="nv">157</span> <span class="o">=</span> <span class="m">4396</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">297</span> * <span class="nv">18</span> <span class="o">=</span> <span class="m">5346</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">39</span> * <span class="nv">186</span> <span class="o">=</span> <span class="m">7254</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">4</span> * <span class="nv">1738</span> <span class="o">=</span> <span class="m">6952</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">4</span> * <span class="nv">1963</span> <span class="o">=</span> <span class="m">7852</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">42</span> * <span class="nv">138</span> <span class="o">=</span> <span class="m">5796</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">48</span> * <span class="nv">159</span> <span class="o">=</span> <span class="m">7632</span>  --- MATCH!
</span><span class='line'>Debug: Testing <span class="m">483</span> * <span class="nv">12</span> <span class="o">=</span> <span class="m">5796</span>  --- MATCH!
</span><span class='line'>Number of <span class="nv">matches</span> <span class="o">=</span> 18, Sum of <span class="nv">products</span> <span class="o">=</span> 45228
</span><span class='line'>15.517 secs
</span></code></pre></td></tr></table></div></figure>


<p>(Wait, why C++ instead of &hellip; other recent languages? Couple of reasons: (1) I thought I&rsquo;d need to brute force this (though it eventually turned out to take much less time than I anticipated), and (2) I&rsquo;m sort of <em>over</em> the <em>over-experimentation</em> with languages that I&rsquo;m not <em>really</em> going to use, and I&rsquo;m not going to get much out of anyway. Yes, tough. Deal with it)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 31: Coin combinations (and over-engineering)]]></title>
    <link href="http://agam.github.io/blog/2015/02/22/euler-31-coin-combinations-and-over-engineering/"/>
    <updated>2015-02-22T04:44:55+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/22/euler-31-coin-combinations-and-over-engineering</id>
    <content type="html"><![CDATA[<p>I had this one all wrong, and made it way more complex than it really was. I&rsquo;m embarassed to post the final code &hellip; but it is what it is.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">Data.Maybe</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Basic idea is something like this:</span>
</span><span class='line'><span class="c1">-- [*] given amount and some coins, pick the largest coin</span>
</span><span class='line'><span class="c1">-- [*] there are (floor (total/coin)) ways of using this coin value</span>
</span><span class='line'><span class="c1">-- [*] but ... NOT ALL of these count! Only the ones that leave a total that can be used with the remaining coins!</span>
</span><span class='line'>
</span><span class='line'><span class="nf">coins</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sortedCoins</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">sortedCoins</span> <span class="ow">=</span> <span class="kt">L</span><span class="o">.</span><span class="n">reverse</span> <span class="o">$</span> <span class="kt">L</span><span class="o">.</span><span class="n">sort</span> <span class="o">$</span> <span class="n">coins</span>
</span><span class='line'>
</span><span class='line'><span class="nf">combinations</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">combinations</span> <span class="n">total</span> <span class="n">coins</span> <span class="ow">=</span>
</span><span class='line'><span class="c1">--  T.trace (&quot;total = &quot; ++ show total ++ &quot;, coins = &quot; ++ show coins) $</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">total</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kr">then</span> <span class="kt">Just</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kr">else</span> <span class="kr">case</span> <span class="n">coins</span> <span class="kr">of</span>
</span><span class='line'>        <span class="kt">[]</span> <span class="ow">-&gt;</span> <span class="kt">Nothing</span>
</span><span class='line'>        <span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">mod</span> <span class="n">total</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">0</span> <span class="kr">then</span> <span class="kt">Just</span> <span class="mi">1</span> <span class="kr">else</span> <span class="kt">Nothing</span>
</span><span class='line'>        <span class="n">c</span><span class="kt">:</span><span class="n">cs</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">total</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>                <span class="kr">then</span> <span class="kt">Just</span> <span class="mi">1</span>
</span><span class='line'>                <span class="kr">else</span> <span class="kr">let</span> <span class="n">newTotal</span> <span class="n">total</span> <span class="n">coin</span> <span class="n">num</span> <span class="ow">=</span> <span class="n">total</span> <span class="o">-</span> <span class="p">(</span><span class="n">coin</span> <span class="o">*</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'>                         <span class="n">combs</span> <span class="ow">=</span> <span class="p">[</span><span class="n">combinations</span> <span class="p">(</span><span class="n">newTotal</span> <span class="n">total</span> <span class="n">c</span> <span class="n">num</span><span class="p">)</span> <span class="n">cs</span> <span class="o">|</span> <span class="n">num</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">0</span> <span class="o">..</span> <span class="n">div</span> <span class="n">total</span> <span class="n">c</span><span class="p">]]</span>
</span><span class='line'>                         <span class="n">counts</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="n">catMaybes</span> <span class="n">combs</span>
</span><span class='line'>                     <span class="kr">in</span>
</span><span class='line'>                      <span class="kr">if</span> <span class="n">counts</span> <span class="o">==</span> <span class="mi">0</span> <span class="kr">then</span> <span class="kt">Nothing</span> <span class="kr">else</span> <span class="kt">Just</span> <span class="n">counts</span>
</span><span class='line'>
</span><span class='line'><span class="nf">euler31</span> <span class="ow">::</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">euler31</span> <span class="ow">=</span> <span class="n">fromJust</span> <span class="o">$</span> <span class="n">combinations</span> <span class="mi">200</span> <span class="n">sortedCoins</span>
</span></code></pre></td></tr></table></div></figure>


<p>It turns out, I was being overly cautious and could have just used lists in a different way (left in a commented out debug line to show that I needed it).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 30: sums of powers of digits]]></title>
    <link href="http://agam.github.io/blog/2015/02/18/euler-30-sums-of-powers-of-digits/"/>
    <updated>2015-02-18T21:41:02+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/18/euler-30-sums-of-powers-of-digits</id>
    <content type="html"><![CDATA[<p>Another quick and easy solution. This doesn&rsquo;t mean it&rsquo;s an <em>easy problem!</em>; no, it&rsquo;s more like playing a level at the <em>rookie level</em>. The hard and &ldquo;correct&rdquo; solution would be to work it out on pen-and-paper using Number Theory.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">digits</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">digits</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">digitsHelper</span> <span class="n">n</span> <span class="kt">[]</span>
</span><span class='line'>  <span class="kr">where</span>
</span><span class='line'>    <span class="n">digitsHelper</span> <span class="n">num</span> <span class="n">dList</span> <span class="ow">=</span>
</span><span class='line'>      <span class="kr">if</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="kr">then</span> <span class="n">digitsHelper</span> <span class="p">(</span><span class="n">div</span> <span class="n">num</span> <span class="mi">10</span><span class="p">)</span> <span class="o">$</span> <span class="p">(</span><span class="n">mod</span> <span class="n">num</span> <span class="mi">10</span><span class="p">)</span> <span class="kt">:</span> <span class="n">dList</span>
</span><span class='line'>      <span class="kr">else</span> <span class="n">dList</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sumFifthPow</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">sumFifthPow</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="n">map</span> <span class="p">(</span><span class="o">^</span> <span class="mi">5</span><span class="p">)</span> <span class="o">$</span> <span class="n">digits</span> <span class="n">n</span>
</span><span class='line'>
</span><span class='line'><span class="nf">euler30</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">euler30</span> <span class="n">limit</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="p">[</span><span class="n">x</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">2</span> <span class="o">..</span> <span class="n">limit</span><span class="p">],</span> <span class="n">x</span> <span class="o">==</span> <span class="n">sumFifthPow</span> <span class="n">x</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, this version needs &ldquo;manual intervention&rdquo;, since I used the rough approximation that if <code>euler30 1000000</code> and <code>euler30 10000000</code> gave the same result, this was probably the right answer. It was.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 29: Distinct Powers]]></title>
    <link href="http://agam.github.io/blog/2015/02/18/euler-29-distinct-powers/"/>
    <updated>2015-02-18T00:56:01+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/18/euler-29-distinct-powers</id>
    <content type="html"><![CDATA[<p><strong>Statutory Warning</strong>: <em>Spoilers ahead!</em></p>

<p>Finally, we have a one-liner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">euler29</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">$</span> <span class="kt">L</span><span class="o">.</span><span class="n">nub</span> <span class="o">$</span> <span class="p">[</span><span class="n">a</span> <span class="o">^</span> <span class="n">b</span> <span class="o">|</span> <span class="n">a</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">2</span> <span class="o">..</span> <span class="mi">100</span><span class="p">],</span> <span class="n">b</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">2</span> <span class="o">..</span> <span class="mi">100</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>(where <code>L</code> is <code>Data.List</code>)</p>

<p><em>P.S.</em> I did make a dumb error by initiall writing this as two functions, with the second one taking <code>Int</code> instead of <code>Integer</code>, which (I&rsquo;m disappointed to say) resulted in everything silently overflowing to negative numbers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 28: Spiral diagonals]]></title>
    <link href="http://agam.github.io/blog/2015/02/17/euler-28-spiral-diagonals/"/>
    <updated>2015-02-17T19:33:10+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/17/euler-28-spiral-diagonals</id>
    <content type="html"><![CDATA[<p>This problem afforded a chance to be lazy and have fun.</p>

<p>There definitely is a pattern in the diagonals here: for a <code>3 x 3</code> matrix, the elements are 3, 5, 7, 9. For a <code>5 x 5</code> matrix, the additional elements are 13, 17, 21, 25.</p>

<p>You can see these as being (1 + 2), (1 + 4), (1 + 6), (1 + 8), and then (1 + 2 + 2 + 8), (1 + 4 + 4 + 8), (1 + 6 + 6 + 8), (1 + 8 + 8 + 8).</p>

<p>Similarly, for a <code>7 x 7</code> matrix, the numbers are 31, 37, 43, 49, which are (1 + 2 + 2 + 2 + 8 + 8 + 8), (1 + 4 + 4 + 4 + 8 + 8 + 8), (1 + 6 + 6 + 6 + 8 + 8 + 8), (1 + 8 + 8 + 8 + 8 + 8 + 8)</p>

<p>On the other hand, the problem mentions a <code>1001 x 1001</code> matrix, which is <em>tiny</em>, so why bother with these patterns? Just create the matrix and sum up the diagonals directly! (It&rsquo;s <em>just</em> a million elements &hellip; now if it was a few orders of magnitude higher, it would be a different story)</p>

<p><strong>Statutory Warning</strong>: Spoilers ahead!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.List</span> <span class="k">as</span> <span class="n">L</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Vector</span> <span class="k">as</span> <span class="n">V</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Matrix</span> <span class="k">as</span> <span class="n">M</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.HashMap.Strict</span> <span class="k">as</span> <span class="n">H</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Prelude</span> <span class="k">hiding</span> <span class="p">(</span><span class="kt">Left</span><span class="p">,</span><span class="kt">Right</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Euler 28: spiral int matrix</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Direction</span> <span class="ow">=</span> <span class="kt">Down</span> <span class="o">|</span> <span class="kt">Left</span> <span class="o">|</span> <span class="kt">Right</span> <span class="o">|</span> <span class="kt">Up</span> <span class="kr">deriving</span> <span class="kt">Show</span>
</span><span class='line'>
</span><span class='line'><span class="nf">move</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span><span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Direction</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span><span class="kt">Int</span><span class="p">)</span>
</span><span class='line'><span class="nf">move</span> <span class="n">oldPoint</span><span class="o">@</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">)</span> <span class="n">dir</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">case</span> <span class="n">dir</span> <span class="kr">of</span> <span class="kt">Down</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>              <span class="kt">Left</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="kt">Right</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="kt">Up</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">getSpiralMoves</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Direction</span><span class="p">]</span>
</span><span class='line'><span class="nf">getSpiralMoves</span> <span class="n">n</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="kr">then</span> <span class="p">[</span><span class="kt">Down</span><span class="p">,</span> <span class="kt">Right</span><span class="p">,</span> <span class="kt">Up</span><span class="p">,</span> <span class="kt">Up</span><span class="p">,</span> <span class="kt">Left</span><span class="p">,</span> <span class="kt">Left</span><span class="p">,</span> <span class="kt">Down</span><span class="p">,</span> <span class="kt">Down</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">else</span> <span class="kr">let</span> <span class="n">prevMoves</span> <span class="ow">=</span> <span class="n">getSpiralMoves</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>           <span class="n">firstMove</span> <span class="ow">=</span> <span class="p">[</span><span class="kt">Down</span><span class="p">]</span>
</span><span class='line'>           <span class="n">secondMove</span> <span class="ow">=</span> <span class="n">take</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">$</span> <span class="n">repeat</span> <span class="kt">Right</span>
</span><span class='line'>           <span class="n">thirdMove</span> <span class="ow">=</span> <span class="n">take</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">$</span> <span class="n">repeat</span> <span class="kt">Up</span>
</span><span class='line'>           <span class="n">fourthMove</span> <span class="ow">=</span> <span class="n">take</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">$</span> <span class="n">repeat</span> <span class="kt">Left</span>
</span><span class='line'>           <span class="n">fifthMove</span> <span class="ow">=</span> <span class="n">take</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">$</span> <span class="n">repeat</span> <span class="kt">Down</span>
</span><span class='line'>       <span class="kr">in</span>
</span><span class='line'>        <span class="n">prevMoves</span> <span class="o">++</span> <span class="n">firstMove</span> <span class="o">++</span> <span class="n">secondMove</span> <span class="o">++</span> <span class="n">thirdMove</span> <span class="o">++</span> <span class="n">fourthMove</span> <span class="o">++</span> <span class="n">fifthMove</span>
</span><span class='line'>
</span><span class='line'><span class="nf">getSpiralCoords</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[(</span><span class="kt">Int</span><span class="p">,</span><span class="kt">Int</span><span class="p">)]</span>
</span><span class='line'><span class="nf">getSpiralCoords</span> <span class="n">n</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">mid</span> <span class="ow">=</span> <span class="n">div</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">start</span> <span class="ow">=</span> <span class="p">(</span><span class="n">mid</span><span class="p">,</span><span class="n">mid</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">in</span>
</span><span class='line'>   <span class="kt">L</span><span class="o">.</span><span class="n">scanl</span> <span class="n">move</span> <span class="n">start</span> <span class="o">$</span> <span class="n">getSpiralMoves</span> <span class="n">n</span>
</span><span class='line'>
</span><span class='line'><span class="nf">getCoordHash</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">H</span><span class="o">.</span><span class="kt">HashMap</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span><span class="kt">Int</span><span class="p">)</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">getCoordHash</span> <span class="n">n</span> <span class="ow">=</span> <span class="kt">H</span><span class="o">.</span><span class="n">fromList</span> <span class="o">$</span> <span class="n">zip</span> <span class="p">(</span><span class="n">getSpiralCoords</span> <span class="n">n</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">genF</span> <span class="ow">::</span> <span class="kt">H</span><span class="o">.</span><span class="kt">HashMap</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span><span class="kt">Int</span><span class="p">)</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">genF</span> <span class="n">h</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="ow">=</span> <span class="n">h</span> <span class="kt">H</span><span class="o">.!</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">getDiagElems</span> <span class="ow">::</span> <span class="kt">M</span><span class="o">.</span><span class="kt">Matrix</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">getDiagElems</span> <span class="n">mat</span> <span class="n">n</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">leftDiag</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="p">[</span><span class="kt">M</span><span class="o">.</span><span class="n">getElem</span> <span class="n">i</span> <span class="n">i</span> <span class="n">mat</span> <span class="o">|</span> <span class="n">i</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span> <span class="o">..</span> <span class="n">n</span><span class="p">]]</span>
</span><span class='line'>      <span class="n">rightDiag</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="p">[</span><span class="kt">M</span><span class="o">.</span><span class="n">getElem</span> <span class="n">i</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="p">)</span> <span class="n">mat</span> <span class="o">|</span> <span class="n">i</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span> <span class="o">..</span> <span class="n">n</span><span class="p">]]</span>
</span><span class='line'>      <span class="n">centerElem</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">c</span> <span class="ow">=</span> <span class="n">div</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="mi">2</span>
</span><span class='line'>                   <span class="kr">in</span>
</span><span class='line'>                    <span class="kt">M</span><span class="o">.</span><span class="n">getElem</span> <span class="n">c</span> <span class="n">c</span> <span class="n">mat</span>
</span><span class='line'>  <span class="kr">in</span>
</span><span class='line'>   <span class="n">leftDiag</span> <span class="o">+</span> <span class="n">rightDiag</span> <span class="o">-</span> <span class="n">centerElem</span>
</span><span class='line'>
</span><span class='line'><span class="nf">getSpiralMatrix</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">M</span><span class="o">.</span><span class="kt">Matrix</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">getSpiralMatrix</span> <span class="n">n</span> <span class="ow">=</span> <span class="kt">M</span><span class="o">.</span><span class="n">matrix</span> <span class="n">n</span> <span class="n">n</span> <span class="o">$</span> <span class="n">genF</span> <span class="o">$</span> <span class="n">getCoordHash</span> <span class="n">n</span>
</span><span class='line'>
</span><span class='line'><span class="nf">diagSum</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">diagSum</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">getDiagElems</span> <span class="p">(</span><span class="n">getSpiralMatrix</span> <span class="n">n</span><span class="p">)</span> <span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<p>I added type signatures for every function, so here&rsquo;s a quick overview (this is terribly over-engineered, and turned out to be more of a way to get to know various Haskell datatypes than to actually solve this problem!):</p>

<p><code>getSpiralMoves</code> translates the literal pattern of the square spiral into concrete steps and then <code>getSpiralCoords</code> converts these into <code>(i,j)</code> elements within the matrix. Since I use a <em>generating function</em> (in <code>getSpiralMatrix</code>) to create the matrix, I use a hash-map to store the value of each co-ordinate &hellip; and then <code>getDiagElems</code> iterates over the diagonal elements.</p>

<p>The matrix does turn out as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="n">getSpiralMatrix</span> <span class="mi">7</span>
</span><span class='line'><span class="p">(</span> <span class="mi">43</span> <span class="mi">42</span> <span class="mi">41</span> <span class="mi">40</span> <span class="mi">39</span> <span class="mi">38</span> <span class="mi">37</span> <span class="p">)</span>
</span><span class='line'><span class="p">(</span> <span class="mi">44</span> <span class="mi">21</span> <span class="mi">20</span> <span class="mi">19</span> <span class="mi">18</span> <span class="mi">17</span> <span class="mi">36</span> <span class="p">)</span>
</span><span class='line'><span class="p">(</span> <span class="mi">45</span> <span class="mi">22</span>  <span class="mi">7</span>  <span class="mi">6</span>  <span class="mi">5</span> <span class="mi">16</span> <span class="mi">35</span> <span class="p">)</span>
</span><span class='line'><span class="p">(</span> <span class="mi">46</span> <span class="mi">23</span>  <span class="mi">8</span>  <span class="mi">1</span>  <span class="mi">4</span> <span class="mi">15</span> <span class="mi">34</span> <span class="p">)</span>
</span><span class='line'><span class="p">(</span> <span class="mi">47</span> <span class="mi">24</span>  <span class="mi">9</span>  <span class="mi">2</span>  <span class="mi">3</span> <span class="mi">14</span> <span class="mi">33</span> <span class="p">)</span>
</span><span class='line'><span class="p">(</span> <span class="mi">48</span> <span class="mi">25</span> <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span> <span class="mi">32</span> <span class="p">)</span>
</span><span class='line'><span class="p">(</span> <span class="mi">49</span> <span class="mi">26</span> <span class="mi">27</span> <span class="mi">28</span> <span class="mi">29</span> <span class="mi">30</span> <span class="mi">31</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was a simple problem but I was surprised by how <em>short</em> the code was; I didn&rsquo;t write overly terse code, added lots of whitespace, indentation, extra lines, etc, and the whole piece was <em>still</em> just 60 lines!</p>

<p><strong>Update</strong>: Fine, here&rsquo;s the simple solution too.</p>

<p>For every <code>N x N</code> matrix (where <code>N</code> is odd), the diagonal elements are all the diagonal elements of the <code>N-2</code>-sized matrix, plus four more. And these four include <code>N^2</code> and three others, each being <code>(N-1)</code> less than the other. The base case is <code>1 x 1</code>, with a value of 1.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">euler28</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">euler28</span> <span class="mi">1</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nf">euler28</span> <span class="n">n</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">sideDiff</span> <span class="ow">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>                <span class="n">sq</span> <span class="ow">=</span> <span class="n">n</span> <span class="o">^</span> <span class="mi">2</span>
</span><span class='line'>            <span class="kr">in</span>
</span><span class='line'>             <span class="n">euler28</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">sq</span> <span class="o">-</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">sideDiff</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and then <code>euler28 1001</code> gives the same answer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 27: Quadratic Primes]]></title>
    <link href="http://agam.github.io/blog/2015/02/14/euler-27-quadratic-primes/"/>
    <updated>2015-02-14T18:43:24+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/14/euler-27-quadratic-primes</id>
    <content type="html"><![CDATA[<p><strong>Statutory Warning</strong>: Spoilers ahead</p>

<p><em>This turned out to be really simple, though I went through a phase of churning out complicated solutions because of a stupid mistake.</em></p>

<p>I didn&rsquo;t preserve intermediate versions, so here is the final solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.List</span> <span class="k">as</span> <span class="n">L</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Vector</span> <span class="k">as</span> <span class="n">V</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Function</span> <span class="k">as</span> <span class="n">F</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sieve</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">sieve</span> <span class="n">num</span> <span class="n">list</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">null</span> <span class="n">list</span>
</span><span class='line'>  <span class="kr">then</span> <span class="p">[</span><span class="n">num</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">else</span> <span class="kr">let</span> <span class="n">rest</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">x</span> <span class="p">`</span><span class="n">mod</span><span class="p">`</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">list</span>
</span><span class='line'>       <span class="kr">in</span>
</span><span class='line'>        <span class="n">num</span> <span class="kt">:</span> <span class="n">sieve</span> <span class="p">(</span><span class="n">head</span> <span class="n">rest</span><span class="p">)</span> <span class="p">(</span><span class="n">tail</span> <span class="n">rest</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">eratosthenes</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">eratosthenes</span> <span class="n">maxNum</span> <span class="ow">=</span> <span class="n">sieve</span> <span class="mi">2</span> <span class="p">[</span><span class="mi">3</span> <span class="o">..</span> <span class="n">maxNum</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">allPrimes</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">allPrimes</span> <span class="n">maxNum</span> <span class="ow">=</span> <span class="kt">V</span><span class="o">.</span><span class="n">fromList</span> <span class="o">$</span> <span class="n">eratosthenes</span> <span class="n">maxNum</span>
</span><span class='line'>
</span><span class='line'><span class="nf">eulerEqn</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">eulerEqn</span> <span class="n">a</span> <span class="n">b</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span> <span class="n">a</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- TODO(agam): replace with the &quot;standard&quot; way to do binary search</span>
</span><span class='line'><span class="nf">binSearch</span> <span class="ow">::</span> <span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'><span class="nf">binSearch</span> <span class="n">arr</span> <span class="n">min</span> <span class="n">max</span> <span class="n">elem</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">low</span> <span class="ow">=</span> <span class="n">arr</span> <span class="kt">V</span><span class="o">.!</span> <span class="n">min</span>
</span><span class='line'>      <span class="n">high</span> <span class="ow">=</span> <span class="n">arr</span> <span class="kt">V</span><span class="o">.!</span> <span class="n">max</span>
</span><span class='line'>  <span class="kr">in</span>
</span><span class='line'>   <span class="kr">if</span> <span class="n">max</span> <span class="o">-</span> <span class="n">min</span> <span class="o">&lt;</span> <span class="mi">2</span>
</span><span class='line'>   <span class="kr">then</span> <span class="kr">if</span> <span class="n">low</span> <span class="o">==</span> <span class="n">elem</span>
</span><span class='line'>        <span class="kr">then</span> <span class="kt">True</span>
</span><span class='line'>        <span class="kr">else</span> <span class="kt">False</span>
</span><span class='line'>   <span class="kr">else</span> <span class="kr">let</span> <span class="n">mid</span> <span class="ow">=</span> <span class="n">div</span> <span class="p">(</span><span class="n">min</span> <span class="o">+</span> <span class="n">max</span><span class="p">)</span> <span class="mi">2</span>
</span><span class='line'>            <span class="n">midElem</span> <span class="ow">=</span> <span class="n">arr</span> <span class="kt">V</span><span class="o">.!</span> <span class="n">mid</span>
</span><span class='line'>        <span class="kr">in</span>
</span><span class='line'>         <span class="kr">if</span> <span class="n">midElem</span> <span class="o">&gt;</span> <span class="n">elem</span>
</span><span class='line'>         <span class="kr">then</span> <span class="n">binSearch</span> <span class="n">arr</span> <span class="n">min</span> <span class="n">mid</span> <span class="n">elem</span>
</span><span class='line'>         <span class="kr">else</span> <span class="n">binSearch</span> <span class="n">arr</span> <span class="n">mid</span> <span class="n">max</span> <span class="n">elem</span>
</span><span class='line'>
</span><span class='line'><span class="nf">consecutivePrimes</span> <span class="n">a</span> <span class="n">b</span> <span class="n">primes</span> <span class="n">start</span> <span class="n">length</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">p</span> <span class="ow">=</span> <span class="n">eulerEqn</span> <span class="n">a</span> <span class="n">b</span> <span class="n">start</span>
</span><span class='line'>      <span class="n">l</span> <span class="ow">=</span> <span class="kt">V</span><span class="o">.</span><span class="n">length</span> <span class="n">primes</span>
</span><span class='line'>      <span class="n">isPrime</span> <span class="ow">=</span> <span class="n">binSearch</span> <span class="n">primes</span> <span class="mi">0</span> <span class="n">l</span> <span class="n">p</span>
</span><span class='line'>  <span class="kr">in</span>
</span><span class='line'>   <span class="kr">if</span> <span class="n">isPrime</span>
</span><span class='line'>   <span class="kr">then</span> <span class="n">consecutivePrimes</span> <span class="n">a</span> <span class="n">b</span> <span class="n">primes</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="kr">else</span> <span class="n">length</span>
</span><span class='line'>
</span><span class='line'><span class="nf">numPrimes</span> <span class="n">a</span> <span class="n">b</span> <span class="n">primes</span> <span class="ow">=</span> <span class="n">consecutivePrimes</span> <span class="n">a</span> <span class="n">b</span> <span class="n">primes</span> <span class="mi">0</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nf">euler27</span> <span class="n">maxNum</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">ap</span> <span class="ow">=</span> <span class="n">allPrimes</span> <span class="n">maxNum</span>
</span><span class='line'>      <span class="n">primeLengths</span> <span class="ow">=</span> <span class="p">[(</span><span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="n">numPrimes</span> <span class="n">a</span> <span class="n">b</span> <span class="n">ap</span><span class="p">)</span> <span class="o">|</span> <span class="n">a</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="o">-</span><span class="mi">1000</span> <span class="o">..</span> <span class="mi">1000</span><span class="p">],</span> <span class="n">b</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="o">-</span><span class="mi">1000</span> <span class="o">..</span> <span class="mi">1000</span><span class="p">]]</span>
</span><span class='line'>  <span class="kr">in</span>
</span><span class='line'>   <span class="kt">L</span><span class="o">.</span><span class="n">maximumBy</span> <span class="p">(</span><span class="kt">F</span><span class="o">.</span><span class="n">on</span> <span class="n">compare</span> <span class="n">snd</span><span class="p">)</span> <span class="n">primeLengths</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I ran this (i.e. <code>euler27 1000</code>) I got the correct answer the first time! But <em>I didn&rsquo;t see it</em>. Instead, I entered the <em>second</em> value of the tuple, which is <em>not</em> the one asked for, and it was therefore <em>obviously</em> wrong. So I thought &ldquo;hmm, we&rsquo;re looking at some large repeating sequence among really large primes&rdquo;, and tried <code>euler27 100000</code> and <code>euler27 10000000</code>, with no luck.</p>

<p>The last one kept running for hours and I killed it, and then came up with the idea of &ldquo;vectorizing everything&rdquo; &mdash; which was perhaps a good academic exercise but did absolutely <em>nothing</em> for the performance here.</p>

<p>So I forgot about it for a while, then came back and ran <code>euler27 1000</code>, entered the <em>first</em> value of the tuple, and that was the end of this story.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 26: Reciprocal Cycles]]></title>
    <link href="http://agam.github.io/blog/2015/02/11/euler-26-reciprocal-cycles/"/>
    <updated>2015-02-11T18:07:38+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/11/euler-26-reciprocal-cycles</id>
    <content type="html"><![CDATA[<p><strong>Statutory Warning</strong>: Spoilers ahead</p>

<p><em>Problem: find the number less than 1000 with the largest repeating cycle of digits in the decimal expansion of its reciprocal</em></p>

<p>As always, the initial reacion was on the lines of <em>aha! this is obvious!</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-repeated-substring-length</span> <span class="p">(</span><span class="nv">str</span> <span class="nv">len</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">rev-str</span> <span class="p">(</span><span class="nb">reverse</span> <span class="nv">str</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">offset</span> <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">str</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="mi">2</span> <span class="nv">len</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">match</span> <span class="p">(</span><span class="nb">equal</span> <span class="p">(</span><span class="nb">subseq</span> <span class="nv">rev-str</span> <span class="mi">0</span> <span class="nv">len</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">reverse</span> <span class="p">(</span><span class="nb">subseq</span> <span class="nv">str</span> <span class="nv">offset</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">offset</span> <span class="nv">len</span><span class="p">))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if</span> <span class="nv">match</span>
</span><span class='line'>  <span class="nv">len</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-cycle-length</span> <span class="p">(</span><span class="nv">dec</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">double-float</span> <span class="nv">dec</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">dec-str</span> <span class="p">(</span><span class="nb">princ-to-string</span> <span class="nv">dec</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">exp-str</span> <span class="p">(</span><span class="nb">subseq</span> <span class="nv">dec-str</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">1+</span> <span class="p">(</span><span class="nb">position</span> <span class="sc">#\.</span> <span class="nv">dec-str</span><span class="p">))</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">position</span> <span class="sc">#\d</span> <span class="nv">dec-str</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">i</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">cycle-length</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">get-repeated-substring-length</span> <span class="nv">exp-str</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">((</span><span class="nb">or</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">cycle-length</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">exp-str</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))</span> <span class="nv">cycle-length</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">inverse-cycle-digits</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">inverse</span> <span class="p">(</span><span class="nb">/</span> <span class="mf">1.0</span> <span class="p">(</span><span class="nb">coerce</span> <span class="nv">n</span> <span class="ss">&#39;double-float</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">do*</span> <span class="p">((</span><span class="nv">i</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">dec</span> <span class="p">(</span><span class="nb">*</span> <span class="mf">1.0</span> <span class="nv">inverse</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="mf">10.0</span> <span class="nv">dec</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">cycle-length</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">get-cycle-length</span> <span class="nv">dec</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">((</span><span class="nb">&gt;</span> <span class="nv">cycle-length</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">cycle-length</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">euler-26-fail</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">all-cycles</span> <span class="p">(</span><span class="nb">mapcar</span> <span class="nf">#&#39;</span><span class="nv">inverse-cycle-digits</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="mi">1</span> <span class="nv">to</span> <span class="mi">1000</span> <span class="nv">collect</span> <span class="nv">i</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">reduce</span> <span class="nf">#&#39;</span><span class="nb">max</span> <span class="nv">all-cycles</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the aptly named <code>euler-26-fail</code> fails to do what we want, because once again, the largest reciprocal when expanded fully, lies beyond the standard <em>double-float</em> range. So, we hand-roll &hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">inverse</span> <span class="p">(</span><span class="nv">n</span> <span class="k">&amp;key</span> <span class="p">(</span><span class="nv">precision</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do*</span> <span class="p">((</span><span class="nv">i</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">numerator</span> <span class="mi">10</span> <span class="p">(</span><span class="nb">*</span> <span class="mi">10</span> <span class="p">(</span><span class="nb">mod</span> <span class="nb">numerator</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">dec</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="mi">10</span> <span class="nv">n</span><span class="p">))</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nb">numerator</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">declist</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">dec</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">dec</span> <span class="nv">declist</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">((</span><span class="nb">&gt;</span> <span class="nv">i</span> <span class="nv">precision</span><span class="p">)</span> <span class="p">(</span><span class="nb">nreverse</span> <span class="nv">declist</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">cycle-length-helper</span> <span class="p">(</span><span class="nv">declist</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">i</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">cycle-length</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">get-repeated-substring-length</span> <span class="nv">declist</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">or</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">cycle-length</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">declist</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))</span> <span class="nv">cycle-length</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">cycle-length</span> <span class="p">(</span><span class="nv">declist</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nb">length</span> <span class="nv">in</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="mi">1</span> <span class="nv">to</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">declist</span><span class="p">)</span>
</span><span class='line'>           <span class="nv">collect</span> <span class="p">(</span><span class="nv">cycle-length-helper</span> <span class="p">(</span><span class="nb">subseq</span> <span class="nv">declist</span> <span class="mi">0</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>       <span class="nv">maximizing</span> <span class="nb">length</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-all-inverse-lengths</span> <span class="p">(</span><span class="nv">lst</span> <span class="nv">max-precision</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">mapcar</span> <span class="nf">#&#39;</span><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nv">cycle-length</span> <span class="p">(</span><span class="nv">inverse</span> <span class="nv">n</span> <span class="ss">:precision</span> <span class="nv">max-precision</span><span class="p">)))</span>
</span><span class='line'>    <span class="nv">lst</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">unique-max</span> <span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nb">max</span> <span class="p">(</span><span class="nb">reduce</span> <span class="nf">#&#39;</span><span class="nb">max</span> <span class="nb">list</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">count</span> <span class="nb">max</span> <span class="nb">list</span><span class="p">))</span>
</span><span class='line'>  <span class="nb">max</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">biggest-cycle</span> <span class="p">(</span><span class="nv">max-num</span> <span class="nv">prec</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">lst</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="mi">1</span> <span class="nv">to</span>  <span class="nv">max-num</span> <span class="nv">collect</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">lengths</span> <span class="p">(</span><span class="nv">get-all-inverse-lengths</span> <span class="nv">lst</span> <span class="nv">prec</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">max-len</span> <span class="p">(</span><span class="nb">reduce</span> <span class="nf">#&#39;</span><span class="nb">max</span> <span class="nv">lengths</span><span class="p">)))</span>
</span><span class='line'>    <span class="c1">;;(format t &quot;Debug: lengths = ~A, max = ~A~%&quot; lengths max-len)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">nth</span> <span class="p">(</span><span class="nb">position</span> <span class="nv">max-len</span> <span class="nv">lengths</span><span class="p">)</span> <span class="nv">lst</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The idea is to loop over all numbers with a given precision, find the max, then maybe increase the precision and try again. This is a terrible idea, relying on the ability to submit multiple answers at the Project Euler website :(</p>

<p>But more than that, it&rsquo;s terribly slow. It becomes marginally faster if we restrict our search to primes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">biggest-cycle</span> <span class="p">(</span><span class="nv">max-num</span> <span class="nv">prec</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">lst</span> <span class="p">(</span><span class="nv">eratosthenes</span> <span class="nv">max-num</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">lengths</span> <span class="p">(</span><span class="nv">get-all-inverse-lengths</span> <span class="nv">lst</span> <span class="nv">prec</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">max-len</span> <span class="p">(</span><span class="nb">reduce</span> <span class="nf">#&#39;</span><span class="nb">max</span> <span class="nv">lengths</span><span class="p">)))</span>
</span><span class='line'>    <span class="c1">;;(format t &quot;Debug: lengths = ~A, max = ~A~%&quot; lengths max-len)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">nth</span> <span class="p">(</span><span class="nb">position</span> <span class="nv">max-len</span> <span class="nv">lengths</span><span class="p">)</span> <span class="nv">lst</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">sieve</span> <span class="p">(</span><span class="nv">prime</span> <span class="nb">list</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nb">list</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">list</span> <span class="nv">prime</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">cons</span> <span class="nv">prime</span> <span class="p">(</span><span class="nv">sieve</span> <span class="p">(</span><span class="nb">first</span> <span class="nb">list</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">remove-if</span> <span class="nf">#&#39;</span><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">n</span> <span class="nv">prime</span><span class="p">)))</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">rest</span> <span class="nb">list</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">eratosthenes</span> <span class="p">(</span><span class="nv">max-num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">all-numbers</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="mi">2</span> <span class="nv">to</span> <span class="nv">max-num</span> <span class="nv">collect</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">sieve</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">all-numbers</span><span class="p">)</span> <span class="p">(</span><span class="nb">rest</span> <span class="nv">all-numbers</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this change, <code>(biggest-cycle 1000 1000)</code> yielded <code>499</code> (in <em>211 seconds</em>), but it turned out to be incorrect. <code>(biggest-cycle 1000 10000)</code> took <em>22810 seconds</em>, which is shameful, but yielded the right answer.</p>

<h3>Update</h3>

<p>Here is an effort to redeem myself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.List</span> <span class="k">as</span> <span class="n">L</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Vector</span> <span class="k">as</span> <span class="n">V</span>
</span><span class='line'>
</span><span class='line'><span class="nf">eratosthenes</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="c1">-- ^Get a list of prime numbers less than the given number.                </span>
</span><span class='line'><span class="nf">eratosthenes</span> <span class="n">n</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">x</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">2</span> <span class="o">..</span> <span class="n">n</span><span class="p">]</span> <span class="kr">in</span>
</span><span class='line'>  <span class="n">sieve</span> <span class="p">(</span><span class="n">head</span> <span class="n">x</span><span class="p">)</span> <span class="p">(</span><span class="n">tail</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sieve</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">sieve</span> <span class="n">p</span> <span class="n">nums</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">rest</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">x</span> <span class="p">`</span><span class="n">mod</span><span class="p">`</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">nums</span>
</span><span class='line'>  <span class="kr">in</span> <span class="kr">if</span> <span class="n">null</span> <span class="n">rest</span>
</span><span class='line'>     <span class="kr">then</span> <span class="p">[</span><span class="n">p</span><span class="p">]</span>
</span><span class='line'>     <span class="kr">else</span> <span class="n">p</span> <span class="kt">:</span> <span class="n">sieve</span> <span class="p">(</span><span class="n">head</span> <span class="n">rest</span><span class="p">)</span> <span class="p">(</span><span class="n">tail</span> <span class="n">rest</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">inverse</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Int</span>
</span><span class='line'><span class="c1">-- ^Given a number and the required precision, calculate the decimal expansion of its reciprocal.</span>
</span><span class='line'><span class="nf">inverse</span> <span class="n">n</span> <span class="n">prec</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">truncate</span> <span class="n">x</span> <span class="n">y</span> <span class="ow">=</span> <span class="p">(</span><span class="n">x</span> <span class="p">`</span><span class="n">div</span><span class="p">`</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="p">`</span><span class="n">mod</span><span class="p">`</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>      <span class="n">nextDigit</span> <span class="n">x</span> <span class="n">count</span>
</span><span class='line'>        <span class="o">|</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'>        <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="kr">let</span> <span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">m</span><span class="p">)</span> <span class="ow">=</span> <span class="n">truncate</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="n">n</span>
</span><span class='line'>                      <span class="kr">in</span> <span class="n">d</span> <span class="kt">:</span> <span class="n">nextDigit</span> <span class="n">m</span> <span class="p">(</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">in</span>
</span><span class='line'>   <span class="kt">V</span><span class="o">.</span><span class="n">fromList</span> <span class="o">$</span> <span class="n">nextDigit</span> <span class="mi">1</span> <span class="n">prec</span>
</span><span class='line'>
</span><span class='line'><span class="nf">getInverses</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="c1">-- ^Get a list of all the inverses of all numbers upto a given number, for a given precision</span>
</span><span class='line'><span class="nf">getInverses</span> <span class="n">maxNum</span> <span class="n">maxPrec</span> <span class="ow">=</span> <span class="p">[</span><span class="n">inverse</span> <span class="n">x</span> <span class="n">maxPrec</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span> <span class="o">..</span> <span class="n">maxNum</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">checkRepeatLength</span> <span class="ow">::</span> <span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">checkRepeatLength</span> <span class="n">expansion</span> <span class="n">end</span> <span class="n">len</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">s1</span> <span class="ow">=</span> <span class="kt">V</span><span class="o">.</span><span class="n">slice</span> <span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">len</span><span class="p">)</span> <span class="n">len</span> <span class="n">expansion</span>
</span><span class='line'>      <span class="n">s2</span> <span class="ow">=</span> <span class="kt">V</span><span class="o">.</span><span class="n">slice</span> <span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">len</span> <span class="o">-</span> <span class="n">len</span><span class="p">)</span> <span class="n">len</span> <span class="n">expansion</span>
</span><span class='line'>      <span class="n">c</span> <span class="ow">=</span> <span class="kt">V</span><span class="o">.</span><span class="n">zipWith</span> <span class="p">(</span><span class="o">==</span><span class="p">)</span> <span class="n">s1</span> <span class="n">s2</span>
</span><span class='line'>  <span class="kr">in</span>
</span><span class='line'>   <span class="kr">if</span> <span class="kt">V</span><span class="o">.</span><span class="n">and</span> <span class="n">c</span>
</span><span class='line'>   <span class="kr">then</span> <span class="n">len</span>
</span><span class='line'>   <span class="kr">else</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nf">checkCycles</span> <span class="ow">::</span> <span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="c1">-- ^Check if a cycle exists at a given end point with a given length; if it does, returns the length itself, otherwise 0</span>
</span><span class='line'><span class="nf">checkCycles</span> <span class="n">expansion</span> <span class="n">end</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">l</span> <span class="ow">=</span> <span class="n">quot</span> <span class="n">end</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">cycles</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">$</span> <span class="n">map</span> <span class="p">(</span><span class="n">checkRepeatLength</span> <span class="n">expansion</span> <span class="n">end</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span> <span class="o">..</span> <span class="n">l</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">in</span>
</span><span class='line'>   <span class="kr">case</span> <span class="n">cycles</span> <span class="kr">of</span>
</span><span class='line'>    <span class="n">x</span><span class="kt">:</span><span class="n">xs</span> <span class="ow">-&gt;</span> <span class="n">x</span>
</span><span class='line'>    <span class="n">otherwise</span> <span class="ow">-&gt;</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nf">findCycleLength</span> <span class="ow">::</span> <span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="c1">-- ^Get the length of a cycle at a certain end point; if none found, returns 0</span>
</span><span class='line'><span class="nf">findCycleLength</span> <span class="n">expansion</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">l</span> <span class="ow">=</span> <span class="kt">V</span><span class="o">.</span><span class="n">length</span> <span class="n">expansion</span>
</span><span class='line'>      <span class="n">minEnd</span> <span class="ow">=</span> <span class="n">quot</span> <span class="n">l</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">cycles</span> <span class="ow">=</span> <span class="n">filter</span> <span class="p">(</span><span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">$</span> <span class="n">map</span> <span class="p">(</span><span class="n">checkCycles</span> <span class="n">expansion</span><span class="p">)</span> <span class="p">[</span><span class="n">l</span><span class="p">,</span> <span class="n">l</span><span class="o">-</span><span class="mi">1</span> <span class="o">..</span> <span class="n">minEnd</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">in</span>
</span><span class='line'>   <span class="kr">case</span> <span class="n">cycles</span> <span class="kr">of</span>
</span><span class='line'>    <span class="n">x</span><span class="kt">:</span><span class="n">xs</span> <span class="ow">-&gt;</span> <span class="n">x</span>
</span><span class='line'>    <span class="n">otherwise</span> <span class="ow">-&gt;</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nf">euler26</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="c1">-- ^Attempts to solve Euler Problem #26 for a given precision</span>
</span><span class='line'><span class="nf">euler26</span> <span class="n">prec</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">nums</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">2</span> <span class="o">..</span> <span class="mi">1000</span><span class="p">]</span>
</span><span class='line'>      <span class="n">cycles</span> <span class="ow">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">findCycleLength</span> <span class="o">$</span> <span class="n">inverse</span> <span class="n">x</span> <span class="n">prec</span><span class="p">)</span> <span class="n">nums</span>
</span><span class='line'>      <span class="n">maxPos</span> <span class="ow">=</span> <span class="kt">L</span><span class="o">.</span><span class="n">elemIndex</span> <span class="p">(</span><span class="n">maximum</span> <span class="n">cycles</span><span class="p">)</span> <span class="n">cycles</span>
</span><span class='line'>  <span class="kr">in</span>
</span><span class='line'>   <span class="kr">case</span> <span class="n">maxPos</span> <span class="kr">of</span>
</span><span class='line'>    <span class="kt">Just</span> <span class="n">n</span> <span class="ow">-&gt;</span> <span class="n">nums</span> <span class="o">!!</span> <span class="n">n</span>
</span><span class='line'>    <span class="kr">_</span> <span class="ow">-&gt;</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives the same answer (<code>euler26 10000</code>) in <code>7.5 seconds</code> (which is a 3000x speedup). Just to make sure you don&rsquo;t jump to that conclusion, it isn&rsquo;t a Haskell vs Lisp thing, it&rsquo;s just <em>calculating less stuff</em>, and doing it with <em>vectors instead of lists</em>.</p>

<p>In particular, the first version was running for <em>12 hours</em> before I killed it out of disgust, and realized that instead of checking if the <code>length</code> of the list was greater than 0, I should do a <code>case</code> match instead since I only needed the first element. This made a <em>big</em> difference. Also, this is the first time I <em>didn&rsquo;t</em> have to rely on <code>Debug.Trace</code>, so I feel good about that :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 25: Fibonacci Digits]]></title>
    <link href="http://agam.github.io/blog/2015/02/10/euler-25-fibonacci-digits/"/>
    <updated>2015-02-10T18:43:52+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/10/euler-25-fibonacci-digits</id>
    <content type="html"><![CDATA[<p><strong>Statutory Warning</strong>: spoilers ahead</p>

<p><em>Problem: find the first fibonacci number with 1000 digits</em></p>

<p>First though: hah, I can get the Nth fibonacci number in O(1) time!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">fib</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">inv-sq-5</span> <span class="p">(</span><span class="nb">/</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">sqrt</span> <span class="mi">5</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">phi</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">1+</span> <span class="p">(</span><span class="nb">sqrt</span> <span class="mi">5</span><span class="p">))</span> <span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">+</span> <span class="mf">0.5</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">inv-sq-5</span> <span class="p">(</span><span class="nb">expt</span> <span class="nv">phi</span> <span class="nv">n</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">digits</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">round</span> <span class="p">(</span><span class="nb">1+</span> <span class="p">(</span><span class="nb">log</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">log-fib-10</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">log-10</span> <span class="p">(</span><span class="nb">log</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">log-phi</span> <span class="p">(</span><span class="nb">log</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">1+</span> <span class="p">(</span><span class="nb">sqrt</span> <span class="mi">5</span><span class="p">))</span> <span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">log-k</span> <span class="p">(</span><span class="nb">log</span> <span class="p">(</span><span class="nb">/</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">sqrt</span> <span class="mi">5</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">*</span> <span class="nv">log-10</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">log-k</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">n</span> <span class="nv">log-phi</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nope, floating point numbers don&rsquo;t go beyond 308 digits or so</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">CL-USER&gt;</span> <span class="nv">most-positive-double-float</span>
</span><span class='line'><span class="mf">1.7976931348623157d308</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perhaps there was a clever way to workaround this, but I wasn&rsquo;t feeling clever enough at the time. So, back to brute force.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">fib</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">((</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nv">fib</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nv">fib</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, this just takes <em>too long</em> (<code>(fib 40)</code> takes <code>3.883</code> seconds, and that has just 9 digits, so forget about anything bigger). Next step: memoization.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">memo-table</span> <span class="p">(</span><span class="nb">make-hash-table</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">defun</span> <span class="nv">memo-fib</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">multiple-value-bind</span> <span class="p">(</span><span class="nv">hash-val</span> <span class="nv">exists</span><span class="p">)</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">n</span> <span class="nv">memo-table</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if</span> <span class="nv">exists</span>
</span><span class='line'>    <span class="nv">hash-val</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">new-val</span> <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">((</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nv">memo-fib</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nv">memo-fib</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">)))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">n</span> <span class="nv">memo-table</span><span class="p">)</span> <span class="nv">new-val</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">new-val</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">digits-num</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">length</span> <span class="p">(</span><span class="nb">princ-to-string</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>(yeah just to be even less clever, I get the digits by seeing the length of the string representation of the number &hellip; works)</p>

<p><code>(memo-fib 40)</code> is instantaneous, so is <code>(memo-fib 1000)</code>, and <code>(memo-fib 10000)</code> takes <code>3 ms</code>, so this should do it.</p>

<p>I used this to manually guess my way around and found the answer. Woohoo!</p>

<p>But this last part felt a bit &hellip; dirty, so before quitting this problem, I decided to automate it this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">bin-search-range</span> <span class="p">(</span><span class="nv">fn</span> <span class="nv">target</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do*</span> <span class="p">((</span><span class="nv">i</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">*</span> <span class="mi">2</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">val</span> <span class="p">(</span><span class="nb">funcall</span> <span class="nv">fn</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">funcall</span> <span class="nv">fn</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">((</span><span class="nb">&gt;=</span> <span class="nv">val</span> <span class="nv">target</span><span class="p">)</span> <span class="p">(</span><span class="nb">values</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">i</span> <span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;Debug: Trying (~A, ~A)~%&quot;</span> <span class="nv">i</span> <span class="nv">val</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">bin-search</span> <span class="p">(</span><span class="nv">fn</span> <span class="nv">low</span> <span class="nv">high</span> <span class="nv">target</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">mid</span> <span class="p">(</span><span class="nb">round</span> <span class="p">(</span><span class="nb">/</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">low</span> <span class="nv">high</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nv">mid-val</span> <span class="p">(</span><span class="nb">funcall</span> <span class="nv">fn</span> <span class="nv">mid</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;Debug: Searching b/w (~A, ~A), found (~A, ~A)~%&quot;</span> <span class="nv">low</span> <span class="nv">high</span> <span class="nv">mid</span> <span class="nv">mid-val</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">=</span> <span class="nv">high</span> <span class="nv">mid</span><span class="p">)</span> <span class="nv">mid</span><span class="p">)</span>
</span><span class='line'>    <span class="p">((</span><span class="nb">&gt;=</span> <span class="nv">mid-val</span> <span class="nv">target</span><span class="p">)</span> <span class="p">(</span><span class="nv">bin-search</span> <span class="nv">fn</span> <span class="nv">low</span> <span class="nv">mid</span> <span class="nv">target</span><span class="p">))</span>
</span><span class='line'>    <span class="p">((</span><span class="nb">&lt;</span> <span class="nv">mid-val</span> <span class="nv">target</span><span class="p">)</span> <span class="p">(</span><span class="nv">bin-search</span> <span class="nv">fn</span> <span class="nv">mid</span> <span class="nv">high</span> <span class="nv">target</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">solve</span> <span class="p">(</span><span class="nv">fn</span> <span class="nv">target</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Two-phase search; first, exponentially increase argument until target is exceeded, then begin binary search with last argument&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">multiple-value-bind</span> <span class="p">(</span><span class="nv">high</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="nv">bin-search-range</span> <span class="nv">fn</span> <span class="nv">target</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">bin-search</span> <span class="nv">fn</span> <span class="nv">low</span> <span class="nv">high</span> <span class="nv">target</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">target-function</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">digits-num</span> <span class="p">(</span><span class="nv">memo-fib</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">euler-25</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">solve</span> <span class="nf">#&#39;</span><span class="nv">target-function</span> <span class="mi">1000</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, it does work. I left in my original debug statements (BTW the initial version had not one but <em>two</em> off-by-one errors! I learn slowly &hellip;), so the working is illustrated as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">euler-25</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">8</span><span class="o">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">16</span><span class="o">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">32</span><span class="o">,</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">64</span><span class="o">,</span> <span class="mi">14</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">128</span><span class="o">,</span> <span class="mi">27</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">256</span><span class="o">,</span> <span class="mi">54</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">512</span><span class="o">,</span> <span class="mi">107</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">1024</span><span class="o">,</span> <span class="mi">214</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">2048</span><span class="o">,</span> <span class="mi">428</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Trying</span> <span class="p">(</span><span class="mi">4096</span><span class="o">,</span> <span class="mi">856</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4096</span><span class="o">,</span> <span class="mi">8192</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">6144</span><span class="o">,</span> <span class="mi">1284</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4096</span><span class="o">,</span> <span class="mi">6144</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">5120</span><span class="o">,</span> <span class="mi">1070</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4096</span><span class="o">,</span> <span class="mi">5120</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">4608</span><span class="o">,</span> <span class="mi">963</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4608</span><span class="o">,</span> <span class="mi">5120</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">4864</span><span class="o">,</span> <span class="mi">1017</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4608</span><span class="o">,</span> <span class="mi">4864</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">4736</span><span class="o">,</span> <span class="mi">990</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4736</span><span class="o">,</span> <span class="mi">4864</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">4800</span><span class="o">,</span> <span class="mi">1003</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4736</span><span class="o">,</span> <span class="mi">4800</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">4768</span><span class="o">,</span> <span class="mi">997</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4768</span><span class="o">,</span> <span class="mi">4800</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">4784</span><span class="o">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4768</span><span class="o">,</span> <span class="mi">4784</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">4776</span><span class="o">,</span> <span class="mi">998</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4776</span><span class="o">,</span> <span class="mi">4784</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">4780</span><span class="o">,</span> <span class="mi">999</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4780</span><span class="o">,</span> <span class="mi">4784</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">4782</span><span class="o">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4780</span><span class="o">,</span> <span class="mi">4782</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">4781</span><span class="o">,</span> <span class="mi">999</span><span class="p">)</span>
</span><span class='line'><span class="nv">Debug:</span> <span class="nv">Searching</span> <span class="nv">b/w</span> <span class="p">(</span><span class="mi">4781</span><span class="o">,</span> <span class="mi">4782</span><span class="p">)</span><span class="o">,</span> <span class="nv">found</span> <span class="p">(</span><span class="mi">4782</span><span class="o">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="mi">4782</span>
</span></code></pre></td></tr></table></div></figure>


<p>The whole thing took <code>6 ms</code>. Not bad, eh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 24: Permutations, a long story]]></title>
    <link href="http://agam.github.io/blog/2015/02/08/euler-24-permutations/"/>
    <updated>2015-02-08T07:48:20+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/08/euler-24-permutations</id>
    <content type="html"><![CDATA[<p>(The fact that this turned out to be a long story is <em>ridiculous</em>, but perhaps it&rsquo;ll be useful to someone else)</p>

<p>The idea here is intuitive: given say <code>0</code>, <code>1</code> and <code>2</code>, we can immediately come up with the following orderings:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>012
</span><span class='line'>021
</span><span class='line'>102
</span><span class='line'>120
</span><span class='line'>201
</span><span class='line'>210</span></code></pre></td></tr></table></div></figure>


<p>The problem here is to find the millionth permutation of <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, <code>9</code>.</p>

<p>The first way is to <em>cheat</em> and work it out with pen-and-paper, upon which you soon realize that there are cycles for each set of numbers. E.g. for two numbers we would have 2 possible orderings (<code>01</code> and <code>10</code>), for three we have the ones shown above, etc, and this is because for <code>n</code> numbers we have <code>n!</code> combinations. Right, that&rsquo;s obvious. But the next step is to see that <em>within</em> each block of <code>n!</code>, there are <code>n</code> blocks of size <code>(n-1)!</code>, where the first digit is the same, which means we have a straightforward way of reducing the problem of size <code>n</code> to a problem of size <code>n-1</code>.</p>

<p>As an example, to find the fifth permutation in the example above, we would see that it involves two cycles of two digits each, and then halfway through a single cycle. So we can come up with the first digit being <code>2</code>, and the next digit being the second of the remaining digits (i.e. <code>1</code>), and we&rsquo;re finally left with <code>0</code>.</p>

<p>(<strong>Note</strong>: Argh &hellip; This sentence is wrong! But I didn&rsquo;t realize that until later)</p>

<p>So I wrote the code for this, and I used Ocaml because I&rsquo;m a complete n00b at it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">fact</span> <span class="n">n</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span> <span class="n">n</span> <span class="o">*</span> <span class="n">fact</span> <span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">perm_total</span> <span class="o">=</span> <span class="mi">1_000_000</span><span class="o">;;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">get_perm</span> <span class="n">total</span> <span class="n">index</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">fact_index</span> <span class="o">=</span> <span class="n">fact</span> <span class="n">index</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">/</span> <span class="o">(</span><span class="n">fact_index</span><span class="o">),</span> <span class="n">total</span> <span class="ow">mod</span> <span class="n">fact_index</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">get_all_perms</span> <span class="n">total</span> <span class="n">index_size</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">rec</span> <span class="n">get_next_perm</span> <span class="n">total</span> <span class="n">index_size</span> <span class="n">perm_list</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">index_size</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span> <span class="n">perm_list</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">match</span> <span class="n">get_perm</span> <span class="n">total</span> <span class="n">index_size</span> <span class="k">with</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">p</span><span class="o">,</span> <span class="n">new_total</span> <span class="o">-&gt;</span> <span class="n">get_next_perm</span> <span class="n">new_total</span> <span class="o">(</span><span class="n">index_size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">(</span><span class="n">p</span> <span class="o">::</span> <span class="n">perm_list</span><span class="o">)</span>
</span><span class='line'>  <span class="k">in</span> <span class="nn">List</span><span class="p">.</span><span class="n">rev</span> <span class="o">(</span><span class="n">get_next_perm</span> <span class="n">total</span> <span class="n">index_size</span> <span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">digits_list</span> <span class="n">n</span> <span class="n">lst</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span> <span class="o">(</span><span class="mi">0</span> <span class="o">::</span> <span class="n">lst</span><span class="o">)</span>
</span><span class='line'>  <span class="k">else</span> <span class="n">digits_list</span> <span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">(</span><span class="n">n</span> <span class="o">::</span> <span class="n">lst</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">remove_digit</span> <span class="n">digit</span> <span class="n">lst</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">&lt;&gt;</span> <span class="n">digit</span><span class="o">)</span> <span class="n">lst</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">get_next_perm_digit</span> <span class="n">perm_list</span> <span class="n">digit_list</span> <span class="n">pdlist</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="nn">List</span><span class="p">.</span><span class="n">length</span> <span class="n">perm_list</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span> <span class="n">pdlist</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">let</span> <span class="n">p</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">hd</span> <span class="n">perm_list</span> <span class="k">in</span>
</span><span class='line'>       <span class="k">let</span> <span class="n">d</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">nth</span> <span class="n">digit_list</span> <span class="n">p</span> <span class="k">in</span>
</span><span class='line'>       <span class="n">get_next_perm_digit</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">tl</span> <span class="n">perm_list</span><span class="o">)</span> <span class="o">(</span><span class="n">remove_digit</span> <span class="n">d</span> <span class="n">digit_list</span><span class="o">)</span> <span class="o">(</span><span class="n">d</span> <span class="o">::</span> <span class="n">pdlist</span><span class="o">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">get_perm_digits</span> <span class="n">perm_list</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">digits</span> <span class="o">=</span> <span class="n">digits_list</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">length</span> <span class="n">perm_list</span><span class="o">)</span> <span class="bp">[]</span> <span class="k">in</span>
</span><span class='line'>  <span class="nn">List</span><span class="p">.</span><span class="n">rev</span> <span class="o">(</span><span class="n">get_next_perm_digit</span> <span class="n">perm_list</span> <span class="n">digits</span> <span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">euler24</span> <span class="o">=</span> <span class="n">get_perm_digits</span> <span class="o">(</span><span class="n">get_all_perms</span> <span class="n">perm_total</span> <span class="mi">9</span><span class="o">);;</span>  
</span></code></pre></td></tr></table></div></figure>


<p>Yes, the names are terrible. Many of the started out as nested functions which I pulled into the top-level to test separately. Anyway, the point is &hellip; the answer was <strong>wrong</strong>.</p>

<p>Ok, I thought, I must&rsquo;ve screwed up in the <em>Ocaml-ness</em> of my solution. So I rewrote it thusly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">fact</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">1</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">*</span> <span class="nv">n</span> <span class="p">(</span><span class="nv">fact</span> <span class="p">(</span><span class="nb">1-</span> <span class="nv">n</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*total*</span> <span class="mi">1000000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-perm</span> <span class="p">(</span><span class="nv">total</span> <span class="nv">index</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">f</span> <span class="p">(</span><span class="nv">fact</span> <span class="nv">index</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">truncate</span> <span class="nv">total</span> <span class="nv">f</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-next-perm</span> <span class="p">(</span><span class="nv">total</span> <span class="nv">index-size</span> <span class="nv">perm-list</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">index-size</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">cons</span> <span class="mi">0</span> <span class="nv">perm-list</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">multiple-value-bind</span> <span class="p">(</span><span class="nv">p</span> <span class="nv">new_total</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">get-perm</span> <span class="nv">total</span> <span class="nv">index-size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">get-next-perm</span> <span class="nv">new_total</span> <span class="p">(</span><span class="nb">1-</span> <span class="nv">index-size</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">p</span> <span class="nv">perm-list</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-all-perms</span> <span class="p">(</span><span class="nv">total</span> <span class="nv">index-size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reverse</span> <span class="p">(</span><span class="nv">get-next-perm</span> <span class="nv">total</span> <span class="nv">index-size</span> <span class="o">&#39;</span><span class="p">())))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">digits-list</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="mi">0</span> <span class="nv">to</span> <span class="nv">n</span>
</span><span class='line'>       <span class="nv">collect</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-next-perm-digit</span> <span class="p">(</span><span class="nv">perm-list</span> <span class="nv">digit-list</span> <span class="nv">p-d-list</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">perm-list</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">p-d-list</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">p</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">perm-list</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">d</span> <span class="p">(</span><span class="nb">nth</span> <span class="nv">p</span> <span class="nv">digit-list</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">get-next-perm-digit</span> <span class="p">(</span><span class="nb">rest</span> <span class="nv">perm-list</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">remove</span> <span class="nv">d</span> <span class="nv">digit-list</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">cons</span> <span class="nv">d</span> <span class="nv">p-d-list</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-perm-digits</span> <span class="p">(</span><span class="nv">perm-list</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">digits</span> <span class="p">(</span><span class="nv">digits-list</span> <span class="p">(</span><span class="nb">1-</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">perm-list</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">reverse</span> <span class="p">(</span><span class="nv">get-next-perm-digit</span> <span class="nv">perm-list</span> <span class="nv">digits</span> <span class="o">&#39;</span><span class="p">()))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">euler-24</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">get-perm-digits</span> <span class="p">(</span><span class="nv">get-all-perms</span> <span class="vg">*total*</span> <span class="mi">9</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <em>same</em> answer popped out &mdash; which means I was successful at my translation &mdash; but it was still the wrong answer. In the initial few seconds of denial, I refreshed the Project Euler page and tried again. No luck.</p>

<p>Now it was time for desperate measures, so I came up with this brute force solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">list-&gt;number</span> <span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">x</span> <span class="mi">10</span><span class="p">)</span> <span class="nv">y</span><span class="p">))</span> <span class="nb">list</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">number-&gt;list</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">tempn</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">floor</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">tempn</span> <span class="mi">10</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">digits</span> <span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">tempn</span> <span class="mi">10</span><span class="p">)</span> <span class="nv">digits</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">=</span> <span class="nv">tempn</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">digits</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">has-digits</span> <span class="p">(</span><span class="nv">n</span> <span class="nv">digit-list</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">nlist</span> <span class="p">(</span><span class="nv">number-&gt;list</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nb">set-difference</span> <span class="nv">digit-list</span> <span class="nv">nlist</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">brute-force-next-permutation</span> <span class="p">(</span><span class="nv">digit-list</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">n</span> <span class="p">(</span><span class="nv">list-&gt;number</span> <span class="nv">digit-list</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">trynum</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">trynum</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">((</span><span class="nv">has-digits</span> <span class="nv">trynum</span> <span class="nv">digit-list</span><span class="p">)</span> <span class="p">(</span><span class="nv">number-&gt;list</span> <span class="nv">trynum</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;Trying ~A~%&quot;</span> <span class="nv">trynum</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;. which wasn&rsquo;t <em>quite</em> right either, since it skipped the leading zero in our lists. This one seemed to work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">add-num</span> <span class="p">(</span><span class="nv">digit-list</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">sum</span> <span class="p">(</span><span class="nb">1+</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">digit-list</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">sum</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">cons</span> <span class="nv">sum</span> <span class="p">(</span><span class="nb">rest</span> <span class="nv">digit-list</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">mod</span> <span class="nv">sum</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="nv">add-num</span> <span class="p">(</span><span class="nb">rest</span> <span class="nv">digit-list</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">next-number</span> <span class="p">(</span><span class="nv">digit-list</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">revlist</span> <span class="p">(</span><span class="nb">reverse</span> <span class="nv">digit-list</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">nreverse</span> <span class="p">(</span><span class="nv">add-num</span> <span class="nv">revlist</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">brute-force-next-permutation</span> <span class="p">(</span><span class="nv">digit-list</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">trynum</span> <span class="p">(</span><span class="nv">next-number</span> <span class="nv">digit-list</span><span class="p">)</span> <span class="p">(</span><span class="nv">next-number</span> <span class="nv">trynum</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">not</span> <span class="p">(</span><span class="nb">set-difference</span> <span class="nv">digit-list</span> <span class="nv">trynum</span><span class="p">))</span> <span class="nv">trynum</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">brute-force-nth-permutation</span> <span class="p">(</span><span class="nv">digit-list</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">i</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">1+</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nv">trynum</span> <span class="nv">digit-list</span> <span class="p">(</span><span class="nv">brute-force-next-permutation</span> <span class="nv">trynum</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">=</span> <span class="nv">i</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">trynum</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I set that running with <code>(brute-force-nth-permutation '(0 1 2 3 4 5 6 7 8 9) 1000000)</code>, and it looked like it was clearly going to take a while.</p>

<p>At this point I was really depressed, since I couldn&rsquo;t figure out <em>what</em> was wrong with the initial approach which was so <em>straightforward</em> &hellip; and then I realized that <strong>I was probably off by one</strong>.</p>

<p>So I took the answer submitted earlier, and entered the <em>next</em> permutation. Nope. Ok, what about the <em>previous</em> one? That worked!</p>

<p>(<strong>Note</strong>: To circle back to the &lsquo;trivial&rsquo; example at the top of the post: I didn&rsquo;t catch myself talking about the fifth permutation as being 0,1,2,3,4,5 &mdash; so I was really talking about the <em>sixth</em> permutation &hellip;)</p>

<p>Later, the (inefficient) brute-force computation terminated in <code>1668</code> seconds, and happily, the answers matched. I tried the previous code with a small modification:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">euler-24</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">get-perm-digits</span> <span class="p">(</span><span class="nv">get-all-perms</span> <span class="p">(</span><span class="nb">1-</span> <span class="vg">*total*</span><span class="p">)</span> <span class="mi">9</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and it gave the same answer (and obviously, so did the Ocaml version). So a happy ending to this story, but a painful reminder of the fact that <strong>there are only two hard problems in computer science: naming, caching, and off-by-one errors.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rethinking the suggested beginning language]]></title>
    <link href="http://agam.github.io/blog/2015/02/06/rethinking-the-suggested-beginning-language/"/>
    <updated>2015-02-06T07:01:14+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/06/rethinking-the-suggested-beginning-language</id>
    <content type="html"><![CDATA[<p>I was all gung-ho about recommending <strong>Go</strong> as the ideal starting point for <em>everyone</em>, and abstract driving force behind this was a supposed combination of the ease and power of <strong>Python</strong> and <strong>C</strong> respectively, both of which can individually make a case for being the <em>right</em> place to start.</p>

<p>This depended on two things:</p>

<ul>
<li>Leave it to the student to figure out the editor/IDE/tooling, and</li>
<li>Don&rsquo;t worry about GUIs in the beginning (it&rsquo;s ok to focus on a text interface alone).</li>
</ul>


<p>Unfortunately, when I discuss this with other people (yes, an unscientific small sample), these seem like dumb assumptions. The accepted wisdom seems to be that</p>

<ul>
<li>IDEs are <em>very</em> important, and</li>
<li>GUIs and web apps <em>have</em> to be the primary focus.</li>
</ul>


<p>So now I&rsquo;m confused all over again. I really, <em>really</em> don&rsquo;t want to return to Javascript. Perhaps <strong>Dart</strong> would fit the bill? The default eclipse-ish editor is pretty self-contained and is easy to download and get up and running on all platforms. The syntax is a bit <em>meh</em>, but that&rsquo;s just my current ignorance. I don&rsquo;t know. Maybe there <em>isn&rsquo;t</em> any such thing as a good beginner programming language.</p>
]]></content>
  </entry>
  
</feed>
