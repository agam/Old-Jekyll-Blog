<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-08-11T22:04:44+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A BigQuery example]]></title>
    <link href="http://agam.github.io/blog/2015/08/11/a-bigquery-example/"/>
    <updated>2015-08-11T21:55:30+00:00</updated>
    <id>http://agam.github.io/blog/2015/08/11/a-bigquery-example</id>
    <content type="html"><![CDATA[<p>I had read about BigQuery but hadn&rsquo;t had a chance to use the external product yet. This week I came across some article about Uber and taxis etc, and it had a link to recently released data by <a href="http://www.nyc.gov/html/tlc/html/about/statistics.shtml">The NYC Taxi and Limousine Commission</a>. In addition to directly downloading the data, or looking at it through <a href="https://data.cityofnewyork.us/data?agency=Taxi+and+Limousine+Commission+%28TLC%29&amp;cat=&amp;type=new_view&amp;browseSearch=&amp;scope">NYC OpenData</a>, you can also <a href="https://bigquery.cloud.google.com/table/nyc-tlc:yellow.trips_2015">play around with it using BigQuery</a>.</p>

<p>So here&rsquo;s a sample I threw together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">trip_distance</span><span class="p">,</span> <span class="n">fare_amount</span><span class="p">,</span> <span class="n">tip_amount</span><span class="p">,</span> <span class="n">tolls_amount</span><span class="p">,</span> <span class="n">round</span><span class="p">(</span><span class="mi">100</span><span class="p">.</span><span class="mi">0</span> <span class="o">*</span> <span class="n">tip_amount</span> <span class="o">/</span> <span class="n">fare_amount</span><span class="p">)</span> <span class="k">as</span> <span class="n">tip_ratio</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">[</span><span class="n">nyc</span><span class="o">-</span><span class="n">tlc</span><span class="p">:</span><span class="n">yellow</span><span class="p">.</span><span class="n">trips_2015</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fare_amount</span> <span class="o">&gt;</span> <span class="mi">50</span> <span class="k">AND</span> <span class="n">trip_distance</span> <span class="o">&gt;</span> <span class="mi">15</span> <span class="k">AND</span> <span class="n">passenger_count</span> <span class="o">&gt;</span> <span class="mi">8</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">trip_distance</span> <span class="k">DESC</span>
</span></code></pre></td></tr></table></div></figure>


<p>The screenshot shows the cached results, it took about 6 seconds to run (which is not bad, considering the dataset is about <em>10 Gigs</em> !!)</p>

<p><img src="https://lh3.googleusercontent.com/rdJeePtMNq4uPKHvPWRNioZfZpQcqMe86rt-2M1bUAJJ=w1019-h665-no" alt="bigquery example" /></p>

<p><em>(9 people went 27 miles, paid $95 and gave no tip!)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shokunin and Umami in software engineering ....]]></title>
    <link href="http://agam.github.io/blog/2015/08/09/shokunin-and-umami-in-software-engineering-dot-dot-dot/"/>
    <updated>2015-08-09T02:57:05+00:00</updated>
    <id>http://agam.github.io/blog/2015/08/09/shokunin-and-umami-in-software-engineering-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Saw a great movie yesterday, <a href="https://www.youtube.com/watch?v=M-aGPniFvS0">&ldquo;Jiro dreams of Sushi&rdquo;</a>, which is really all about the lifelong quest for perfection. Chef Jiro Ono has been making Sushi for seven decades, and is still trying to get better at it.</p>

<p>Which is admirable, but how can lesser mortals as us draw some inspiration from it? What is the equivalent of being a <em>Shokunin</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> in terms of programming (or realistically, in terms of software engineering)? What is the equivalent experience of <em>Umami</em><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>?</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><em>The Japanese word shokunin is defined by both Japanese and Japanese-English dictionaries as ‘craftsman’ or ‘artisan,’ but such a literal description does not fully express the deeper meaning.  The Japanese apprentice is taught that shokunin means not only having technical skills, but also implies an attitude and social consciousness. … The shokunin has a social obligation to work his/her best for the general welfare of the people.  This obligation is both spiritual and material, in that no matter what it is, the shokunin’s responsibility is to fulfill the requirement.</em> &mdash; <a href="https://wilsonkhoo.wordpress.com/2013/02/23/jiro-dreams-of-sushi-what-it-means-to-be-shokunin/">Tasio Odate</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><em>As the taste of umami itself is subtle and blends well with other tastes to expand and round out flavors, most people don&rsquo;t recognize umami when they encounter it, but it plays an important role making food taste delicious.</em> <a href="http://www.umamiinfo.com/2011/02/What-exactly-is-umami.php">(reference)</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntax transformers (!)]]></title>
    <link href="http://agam.github.io/blog/2015/07/26/syntax-transformers/"/>
    <updated>2015-07-26T04:07:25+00:00</updated>
    <id>http://agam.github.io/blog/2015/07/26/syntax-transformers</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve seen <code>defmacro</code> before, and while the pros and cons of &ldquo;hygiene&rdquo; are contentious, I had never bothered to learn macros in Scheme before. So now I&rsquo;m working my way through Kent Dybvig&rsquo;s <a href="http://www.scheme.com/tspl4/">&ldquo;The Scheme Programming Language&rdquo;</a>, and I have to say, I like what I see. Here&rsquo;s an example I wrote today:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">;;; Exercise 3.1.3</span>
</span><span class='line'><span class="p">(</span><span class="k">define-syntax </span><span class="nv">my-let*</span>
</span><span class='line'>  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span>
</span><span class='line'>    <span class="p">[(</span><span class="nf">_</span> <span class="p">((</span><span class="nf">x</span> <span class="nv">e</span><span class="p">))</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">x</span> <span class="nv">e</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">body</span> <span class="o">...</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">[(</span><span class="nf">_</span> <span class="p">((</span><span class="nf">x1</span> <span class="nv">e1</span><span class="p">)</span> <span class="p">(</span><span class="nf">x2</span> <span class="nv">e2</span><span class="p">)</span> <span class="o">...</span><span class="p">)</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">x1</span> <span class="nv">e1</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">my-let*</span> <span class="p">((</span><span class="nf">x2</span> <span class="nv">e2</span><span class="p">)</span> <span class="o">...</span><span class="p">)</span> <span class="nv">body</span> <span class="o">...</span><span class="p">))]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Used in the REPL as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">my-let*</span> <span class="p">([</span><span class="nv">a</span> <span class="mi">5</span><span class="p">]</span> <span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">a</span><span class="p">)]</span> <span class="p">[</span><span class="nv">c</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)])</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">list </span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">5</span> <span class="mi">10</span> <span class="mi">15</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On the lost unity of programming ...]]></title>
    <link href="http://agam.github.io/blog/2015/07/18/on-the-lost-unity-of-programming-dot-dot-dot/"/>
    <updated>2015-07-18T04:06:01+00:00</updated>
    <id>http://agam.github.io/blog/2015/07/18/on-the-lost-unity-of-programming-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>An excerpt from <a href="http://www.amazon.com/Concepts-Techniques-Models-Computer-Programming/dp/0262220695">&ldquo;Concepts, Techniques, and Models of Computer Programming&rdquo;</a> by Van Roy and Haridi:</p>

<blockquote><p>Despite many efforts to introduce a scientific foundation, programming is almost always taught as a craft. It is usually taught in the context of one (or a few) programming languages (e.g., Java, complemented with Haskell, Scheme, or Prolog). The historical accidents of the particular languages chosen are interwoven together so closely with the fundamental concepts that the two cannot be separated. There is a confusion between tools and concepts. What’s more, different schools of thought have developed, based on different ways of viewing programming, called “paradigms”: object-oriented, logic, functional, etc. Each school of thought has its own science. <strong>The unity of programming as a single discipline has been lost.</strong></p></blockquote>

<p>&hellip;</p>

<blockquote><p><strong>Teaching programming in this fashion is like having separate schools of bridge building</strong>: one school teaches how to build wooden bridges and another school teaches how to build iron bridges. Graduates of either school would implicitly consider the restriction to wood or iron as fundamental and would not think of using wood and iron together</p></blockquote>

<p>An excerpt from <a href="http://www.dreamsongs.com/MobSoftware.html">&ldquo;Mob Software: The Erotic Life of Code&rdquo;</a> by Dick Gabriel &amp; Ron Goldman:</p>

<blockquote><p>The effect of ownership imperatives has caused there to be no body of software as literature. <strong>It is as if all writers had their own private companies and only people in the Melville company could read &ldquo;Moby-Dick&rdquo; and only those in Hemingway’s could read &ldquo;The Sun Also Rises.&rdquo; Can you imagine developing a rich literature under these circumstances?</strong> Under such conditions, there could be neither a curriculum in literature nor a way of teaching writing. And we expect people to learn to program in this exact context?</p></blockquote>

<p>&hellip;</p>

<blockquote><p>When software became merchandise, the opportunity vanished of teaching software development as a craft and as artistry. The literature became frozen. It’s extremely rare today to stumble across someone who is familiar with the same source code as you are. If all remnants of literature disappeared, you’d expect that eventually all respect for it—as an art form, as a craft, as an activity worthy of human attention—would disappear. And so we’ve seen with software: <strong>The focus is on architecture, specifications, design documents, and graphical design languages. Code as code is looked down on</strong>: The lowest rank in the software development chain is &ldquo;coder&#8221;—right alongside QA drone and doc writer.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pharo]]></title>
    <link href="http://agam.github.io/blog/2015/07/06/pharo/"/>
    <updated>2015-07-06T07:02:27+00:00</updated>
    <id>http://agam.github.io/blog/2015/07/06/pharo</id>
    <content type="html"><![CDATA[<p>A lot of thinking about <em>&ldquo;what&rsquo;s the best programming environment for beginners?&rdquo;</em> has led me to the one system I&rsquo;ve never explored (and only read about): <strong>Smalltalk</strong> &mdash; Or more precisely, a particular open-source implementation of Smalltalk, <em>Pharo</em>.</p>

<p>(Clearly, I have very little credibility, since the pattern here is of me saying &ldquo;I&rsquo;m going to learn X&rdquo;, and they getting sidetracked by some Y)</p>

<p>Like Common Lisp (and unlike Scheme or Haskell), Smalltalk is &ldquo;image-based&rdquo; rather than &ldquo;source-file-based&rdquo;, and again like Lisp the <em>&ldquo;ideal&rdquo;</em> it strives for is turtles all the way down, the turtles here being uniform objects instead of uniform s-expressions.</p>

<p>When you start up the Pharo image for the first time after downloading it, one of windows is a <em>Workspace</em>, with various comments and notes, among which is the following innocuous looking line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='smalltalk'><span class='line'><span class="nc">PharoTutorial</span> <span class="nf">go</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executing that line (selecting it and hitting <code>Cmd-D</code>, or right-clicking and selecting <code>Do It</code>) launches a engaging tutorial that &hellip; well .. you have to see it for yourself :) At the very end, you have the option of introspecting the tutorial itself, or creating your own. Here is a screenshot of that:</p>

<p><img src="https://farm1.staticflickr.com/551/19272356888_495113dfc2_b_d.jpg"></p>

<p>Download Pharo <a href="http://pharo.org/download">here</a>, and <strong>enjoy!!</strong></p>

<p>P.S. just for fun, some <em>&ldquo;Pharo Zen&rdquo;</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='smalltalk'><span class='line'><span class="nc">Perfection</span> <span class="nf">can</span> <span class="nf">kill</span> <span class="nf">movement</span><span class="p">.</span>
</span><span class='line'><span class="nc">Simple</span> <span class="nf">processes</span> <span class="nf">to</span> <span class="nf">support</span> <span class="nf">progress</span><span class="p">.</span>
</span><span class='line'><span class="nc">Examples</span> <span class="nf">to</span> <span class="nf">learn</span> <span class="nf">from</span><span class="p">.</span>
</span><span class='line'><span class="nc">Tests</span> <span class="nf">are</span> <span class="nf">important</span> <span class="nf">but</span> <span class="nf">can</span> <span class="nf">be</span> <span class="nf">changed</span><span class="p">.</span>
</span><span class='line'><span class="nc">Classes</span> <span class="nf">structure</span> <span class="nf">our</span> <span class="nf">vocabulary</span><span class="p">.</span>
</span><span class='line'><span class="nc">Fully</span> <span class="nf">dynamic</span> <span class="nf">and</span> <span class="nf">malleable</span><span class="p">.</span>
</span><span class='line'><span class="nc">A</span> <span class="nf">system</span> <span class="nf">with</span> <span class="nf">robust</span> <span class="nf">abstractions</span> <span class="nf">that</span> <span class="nf">a</span> <span class="nf">single</span> <span class="nf">person</span> <span class="nf">can</span> <span class="nf">understand</span><span class="p">.</span>
</span><span class='line'><span class="nc">Explicit</span> <span class="nf">is</span> <span class="nf">better</span> <span class="nf">than</span> <span class="nf">implicit</span><span class="p">.</span>
</span><span class='line'><span class="nc">Simplicity</span> <span class="nf">is</span> <span class="nf">the</span> <span class="nf">ultimate</span> <span class="nf">elegance</span><span class="p">.</span>
</span><span class='line'><span class="nc">Quality</span> <span class="nf">is</span> <span class="nf">an</span> <span class="nf">emerging</span> <span class="nf">property</span><span class="p">.</span>
</span><span class='line'><span class="nc">Polymorphism</span> <span class="nf">is</span> <span class="nf">our</span> <span class="nf">esperanto</span><span class="p">.</span>
</span><span class='line'><span class="nc">Messages</span> <span class="nf">are</span> <span class="nf">our</span> <span class="nf">vocabulary</span><span class="p">.</span>
</span><span class='line'><span class="nc">Better</span> <span class="nf">a</span> <span class="nf">set</span> <span class="nf">of</span> <span class="nf">small</span> <span class="nf">polymorphic</span> <span class="nf">classes</span> <span class="nf">than</span> <span class="nf">a</span> <span class="nf">large</span> <span class="nf">ugly</span> <span class="nf">one</span><span class="p">.</span>
</span><span class='line'><span class="nc">Communication</span> <span class="nf">is</span> <span class="nf">key</span><span class="p">.</span>
</span><span class='line'><span class="nc">Learning</span> <span class="nf">from</span> <span class="nf">mistakes</span><span class="p">.</span>
</span><span class='line'><span class="nc">Magic</span> <span class="nf">only</span> <span class="nf">at</span> <span class="nf">the</span> <span class="nf">right</span> <span class="nf">place</span><span class="p">.</span>
</span><span class='line'><span class="nc">Objects</span> <span class="nf">all</span> <span class="nf">the</span> <span class="nf">way</span> <span class="nf">down</span><span class="p">.</span>
</span><span class='line'><span class="nc">Abstraction</span> <span class="nf">and</span> <span class="nf">composition</span> <span class="nf">are</span> <span class="nf">our</span> <span class="nf">friends</span><span class="p">.</span>
</span><span class='line'><span class="nc">One</span> <span class="nf">step</span> <span class="nf">at</span> <span class="nf">a</span> <span class="nf">time</span><span class="p">.</span>
</span><span class='line'><span class="nc">There</span> <span class="nf">is</span> <span class="nf">no</span> <span class="nf">unimportant</span> <span class="nf">fix</span><span class="p">.</span>
</span><span class='line'><span class="nc">Easy</span> <span class="nf">to</span> <span class="nf">understand,</span> <span class="nv">easy</span> <span class="nf">to</span> <span class="nf">learn</span> <span class="nf">from,</span> <span class="nv">easy</span> <span class="nf">to</span> <span class="nf">change</span><span class="p">.</span>
</span><span class='line'><span class="nc">Beauty</span> <span class="nf">in</span> <span class="nf">the</span> <span class="nf">code,</span> <span class="nv">beauty</span> <span class="nf">in</span> <span class="nf">the</span> <span class="nf">comments</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSD on Google Compute Engine]]></title>
    <link href="http://agam.github.io/blog/2015/06/13/freebsd-on-google-compute-engine/"/>
    <updated>2015-06-13T05:31:14+00:00</updated>
    <id>http://agam.github.io/blog/2015/06/13/freebsd-on-google-compute-engine</id>
    <content type="html"><![CDATA[<p>I had tried running FreeBSD on Google Compute Engine previously, but <a href="blog/2014/12/14/trying-out-freebsd-and-failing-at-it/">given up</a>. Last week I was suddenly reminded of this, and after Googling around a bit, came across <a href="https://github.com/swills/FreeBSD-gcloud">this script</a> by Steve Wills <em>(Thanks, Steve!)</em> that automated the task of building a &ldquo;GCE-ready&rdquo; image on an existing FreeBSD system.</p>

<p>Hooray! No, wait, I <em>don&rsquo;t</em> have an existing FreeBSD system; that&rsquo;s sort of what this is all about. This minor despondency was short-lived, since I had temporarily forgotten how we now live with computers within computers within computers (give or take a layer). So I installed the <a href="http://www.vmware.com/products/workstation">VMWare Workstation</a>, downloaded <a href="ftp://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/10.1/">the iso</a> for <code>10.1-RELEASE</code>, and booted it up.</p>

<p>All you need is the Google Cloud SDK, which is available under the ports tree, so something like the following should suffice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/ports/net/google-cloud-sdk
</span><span class='line'><span class="nv">$ </span>make install
</span></code></pre></td></tr></table></div></figure>


<p>Then grab the script and run it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl https://raw.githubusercontent.com/swills/FreeBSD-gcloud/master/build_google_image.sh &gt; /tmp/swill-script.sh
</span><span class='line'><span class="nv">$ </span>chmod a+x /tmp/swill-script.sh
</span><span class='line'><span class="nv">$ </span>/tmp/swill-script.sh
</span><span class='line'>components
</span><span class='line'>base.txz                                      100% of   <span class="m">63</span> MB <span class="m">7041</span> kBps 00m09s
</span><span class='line'>kernel.txz                                    100% of   <span class="m">84</span> MB <span class="m">3187</span> kBps 00m27s
</span><span class='line'>Creating image
</span><span class='line'>Creating filesystem
</span><span class='line'>Installing base into image
</span><span class='line'>Installing kernel into image
</span><span class='line'>Setting up image
</span><span class='line'>Finishing image
</span><span class='line'>Creating partitioned file
</span><span class='line'>Creating image tar
</span><span class='line'>Now run:
</span><span class='line'>
</span><span class='line'>gcloud auth login
</span><span class='line'>gsutil cp FreeBSD-10.1-RELEASE-amd64-20150612191810.tar.gz gs://swills-test-bucket
</span><span class='line'>gcutil addimage freebsd-101-release-amd64-20150612191810 gs://swills-test-bucket/FreeBSD-10.1-RELEASE-amd64-20150612191810.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>As you might have noticed, the script ends with a helpful suggestion for the subsequent commands to run. Caveats:</p>

<ul>
<li>If you&rsquo;re doing all this within a VM like I was, you&rsquo;ll want to run <code>gcloud auth login --no-launch-browser</code></li>
<li>You might need to run <code>gcloud config set project &lt;project ID&gt;</code> (that&rsquo;s project <em>ID</em>, not project <em>name</em>)</li>
<li>(obviously) replace <code>swills-test-bucket</code> with your bucket (you can create one at the <a href="https://console.developers.google.com">cloud console</a> (Storage &ndash;> Cloud Storage &ndash;> Storage Browser)</li>
</ul>


<p>After this, a few clicks should get you a new instance (remember to select the custom image uploaded earlier), and SSHing into it should show you <code>/etc/motd</code> (which is still a plain old file, and not, you know, <a href="https://web.archive.org/web/20120107210839/http://deadmemes.net/2010/10/19/fear-and-loathing-in-debianubuntu-or-who-needs-etcmotd">this abomination</a>).</p>

<p><strong>Enjoy!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying out stack ...]]></title>
    <link href="http://agam.github.io/blog/2015/06/10/trying-out-stack-dot-dot-dot/"/>
    <updated>2015-06-10T05:01:24+00:00</updated>
    <id>http://agam.github.io/blog/2015/06/10/trying-out-stack-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Tried this out after <a href="https://www.fpcomplete.com/blog/2015/06/announcing-first-public-beta-stack">I read about it</a>. Note: the following was all done on a Macbook, but it should work similarly on Linux too.</p>

<p><strong>Get Stack</strong></p>

<p><a href="https://github.com/fpco/stack/releases/download/v0.0.0-beta/stack-0.0.0-x86_64-osx.gz">Download</a> it.</p>

<p><code>gunzip</code> and copy to some directory in <code>$PATH</code></p>

<p><strong>Use Stack</strong></p>

<p>Create dummy <code>.hs</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="n">putStrLn</span> <span class="s">&quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Digression: first build</em></p>

<p>You need <code>GHC</code> installed, and a file called <code>stack.yaml</code> in the local directory. But if you don&rsquo;t, no problem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack ghc dummy.hs
</span><span class='line'>No .cabal file found in directory /Users/agam/Documents/Haskell/Dummy/
</span><span class='line'>Writing default config file to: /Users/agam/Documents/Haskell/Dummy/stack.yaml
</span><span class='line'>Downloading lts-2.13 build plan ...
</span><span class='line'>Downloaded lts-2.13 build plan.
</span><span class='line'>Populating index cache, may take a moment ...
</span><span class='line'>Updating package index hackage.haskell.org ...
</span><span class='line'>Cloning package index ...
</span><span class='line'>Done populating index cache.
</span><span class='line'>Downloading ghc-7.8.4 ...
</span><span class='line'>Downloaded ghc-7.8.4.
</span><span class='line'>Unpacking GHC ...
</span><span class='line'>Configuring GHC ...
</span><span class='line'>Installing GHC ...
</span><span class='line'>GHC installed.
</span></code></pre></td></tr></table></div></figure>


<p>Run it once more to actually build it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack ghc dummy.hs
</span><span class='line'><span class="o">[</span><span class="m">1</span> of 1<span class="o">]</span> Compiling Main             <span class="o">(</span> dummy.hs, dummy.o <span class="o">)</span>
</span><span class='line'>Linking dummy ...
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>stack.yaml dummy.o dummy.hs dummy.hi dummy
</span></code></pre></td></tr></table></div></figure>


<p><strong>Run the program</strong></p>

<p>Just run the executable created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./dummy
</span><span class='line'>Hello World
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively, combine steps 4 and 5</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack runghc dummy.hs
</span><span class='line'>Hello World
</span></code></pre></td></tr></table></div></figure>


<p><strong>Libraries</strong></p>

<p>(this is why we&rsquo;re <em>really</em> here, right?)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack update
</span><span class='line'>Updating package index hackage.haskell.org ...
</span></code></pre></td></tr></table></div></figure>


<p>What packages do we have ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack <span class="nb">exec</span> -- ghc-pkg list
</span><span class='line'>/Users/agam/.stack/programs/x86_64-osx/ghc-7.8.4/lib/ghc-7.8.4/package.conf.d/
</span><span class='line'>Cabal-1.18.1.5
</span><span class='line'>array-0.5.0.0
</span><span class='line'>base-4.7.0.2
</span><span class='line'>bin-package-db-0.0.0.0
</span><span class='line'>binary-0.7.1.0
</span><span class='line'>bytestring-0.10.4.0
</span><span class='line'>containers-0.5.5.1
</span><span class='line'>deepseq-1.3.0.2
</span><span class='line'>directory-1.2.1.0
</span><span class='line'>filepath-1.3.0.2
</span><span class='line'>ghc-7.8.4
</span><span class='line'>ghc-prim-0.3.1.0
</span><span class='line'>haskeline-0.7.1.2
</span><span class='line'>haskell2010-1.1.2.0
</span><span class='line'>haskell98-2.0.0.3
</span><span class='line'>hoopl-3.10.0.1
</span><span class='line'>hpc-0.6.0.1
</span><span class='line'>integer-gmp-0.5.1.0
</span><span class='line'>old-locale-1.0.0.6
</span><span class='line'>old-time-1.1.0.2
</span><span class='line'>pretty-1.1.1.1
</span><span class='line'>process-1.2.0.0
</span><span class='line'>rts-1.0
</span><span class='line'>template-haskell-2.9.0.0
</span><span class='line'>terminfo-0.4.0.0
</span><span class='line'><span class="nb">time</span>-1.4.2
</span><span class='line'>transformers-0.3.0.0
</span><span class='line'>unix-2.7.0.1
</span><span class='line'>xhtml-3000.2.1
</span></code></pre></td></tr></table></div></figure>


<p><strong>Get a new package using Stack</strong></p>

<p>First, we need to <em>require</em> some new package. Change dummy code to (e.g.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Monad</span> <span class="p">(</span><span class="nf">replicateM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="n">replicateM</span> <span class="mi">10</span> <span class="p">(</span><span class="n">randomIO</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="kt">Float</span><span class="p">)</span> <span class="o">&gt;&gt;=</span> <span class="n">print</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try to build it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack ghc dummy.hs
</span><span class='line'>
</span><span class='line'>dummy.hs:1:8:
</span><span class='line'>Could not find module ‘System.Random’
</span><span class='line'>Use -v to see a list of the files searched <span class="k">for</span>.
</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s get it then:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack deps random
</span><span class='line'>random-1.1: downloading
</span><span class='line'>random-1.1: configure
</span><span class='line'>random-1.1: build
</span><span class='line'>random-1.1: install
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and then run it again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack ghc dummy.hs
</span><span class='line'><span class="o">[</span><span class="m">1</span> of 1<span class="o">]</span> Compiling Main             <span class="o">(</span> dummy.hs, dummy.o <span class="o">)</span>
</span><span class='line'>Linking dummy ...
</span><span class='line'><span class="nv">$ </span>./dummy
</span><span class='line'><span class="o">[</span>0.4301154,0.9796305,4.801333e-2,0.6978437,0.45780963,0.21923387,0.33110678,0.2976914,5.8295727e-3,0.28221375<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not bad at all. Reminds me of the feeling I got after wading through the plethora of python package handling frameworks and discovering Anaconda. This is <em>finally</em> a newbie-friendly language; &ldquo;cabal hell&rdquo; is no more (!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSD and Linux: install paths]]></title>
    <link href="http://agam.github.io/blog/2015/06/06/freebsd-and-linux-install-paths/"/>
    <updated>2015-06-06T02:46:45+00:00</updated>
    <id>http://agam.github.io/blog/2015/06/06/freebsd-and-linux-install-paths</id>
    <content type="html"><![CDATA[<p>One of those <strong>WTF</strong> moments of unexplainable distro choices. This on an ubuntu box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>which netcat
</span><span class='line'>/bin/netcat
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -l /bin/netcat
</span><span class='line'>lrwxrwxrwx <span class="m">1</span> root root <span class="m">24</span> Oct <span class="m">14</span>  <span class="m">2013</span> /bin/netcat -&gt; /etc/alternatives/netcat
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -l /etc/alternatives/netcat
</span><span class='line'>lrwxrwxrwx <span class="m">1</span> root root <span class="m">15</span> Oct <span class="m">14</span>  <span class="m">2013</span> /etc/alternatives/netcat -&gt; /bin/nc.openbsd
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>which nc
</span><span class='line'>/usr/bin/nc
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -l /usr/bin/nc
</span><span class='line'>lrwxrwxrwx <span class="m">1</span> root root <span class="m">7</span> Jun  <span class="m">4</span>  <span class="m">2014</span> /usr/bin/nc -&gt; /bin/nc
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -l /bin/nc
</span><span class='line'>lrwxrwxrwx <span class="m">1</span> root root <span class="m">20</span> Oct <span class="m">14</span>  <span class="m">2013</span> /bin/nc -&gt; /etc/alternatives/nc
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -l /etc/alternatives/nc
</span><span class='line'>lrwxrwxrwx <span class="m">1</span> root root <span class="m">15</span> Oct <span class="m">14</span>  <span class="m">2013</span> /etc/alternatives/nc -&gt; /bin/nc.openbsd
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; whereas on FreeBSD:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% ls -l /usr/bin/nc
</span><span class='line'>-r-xr-xr-x  <span class="m">1</span> root  wheel  <span class="m">28008</span> Nov <span class="m">11</span>  <span class="m">2014</span> /usr/bin/nc
</span><span class='line'>
</span><span class='line'>% file /usr/bin/nc
</span><span class='line'>/usr/bin/nc: ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>FreeBSD<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>, <span class="k">for</span> FreeBSD 10.1, stripped
</span></code></pre></td></tr></table></div></figure>


<p>Which would you rather remember?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A counterpoint to RMS on Lisp Machines]]></title>
    <link href="http://agam.github.io/blog/2015/06/02/a-counterpoint-to-rms-on-lisp-machines/"/>
    <updated>2015-06-02T04:48:09+00:00</updated>
    <id>http://agam.github.io/blog/2015/06/02/a-counterpoint-to-rms-on-lisp-machines</id>
    <content type="html"><![CDATA[<p>You might have come across Richard Stallman&rsquo;s <a href="http://www.gnu.org/gnu/rms-lisp.html">brief history of Lisp Machines</a>, which was a speech he gave in 2002. I remember coming across it &mdash; being inspired by what inspired him, and being outraged at what outraged him.</p>

<p>Lately, I&rsquo;m souring on the whole <em>romantic</em> view of the &ldquo;free software&rdquo; that I&rsquo;d held for about a decade, a distinctly &ldquo;NoGPL&rdquo; view, if I may coin that word. Another nail in the coffin was delivered by <a href="https://web.archive.org/web/20090901115039/http://danweinreb.org/blog/rebuttal-to-stallmans-story-about-the-formation-of-symbolics-and-lmi">this blog post</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, which refutes much of the blame to Symbolics, and leaves Stallman looking IMO quite silly (if not petulant).</p>

<p>Also &hellip;</p>

<blockquote><p>And while I’m setting the record straight, the original (TECO-based) Emacs was created and designed by Guy L. Steele Jr. and David Moon. <strong>After they had it working, and it had become established as the standard text editor at the AI lab, Stallman took over its maintenance.</strong></p></blockquote>

<p>&hellip; so much for RMS&rsquo;s <em>&ldquo;But, along the way, I wrote a text editor, Emacs &hellip;&rdquo;</em>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The blog no longer exists (and sadly, Mr. Weinreb passed away in 2012), but thanks to <a href="https://archive.org/">archive.org</a>, it&rsquo;ll stay around.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving on from Project Euler]]></title>
    <link href="http://agam.github.io/blog/2015/05/29/project-euler-and-learning-programming/"/>
    <updated>2015-05-29T19:37:07+00:00</updated>
    <id>http://agam.github.io/blog/2015/05/29/project-euler-and-learning-programming</id>
    <content type="html"><![CDATA[<p>I started doing Project Euler problems occasionally with the assumption that it was a good way to either (1) learn a new language, or (2) as a healthy way to keep practicing programming. It turns out, however, that what I <em>really</em> end up doing is &ldquo;brute-forcing&rdquo; problems that are really <em>math</em> problems.</p>

<p>So while I really should continue, I should do so by learning more math, instead of banging away at bad implementations. When I looked around for options for these, I realized that (as in so many other things) we&rsquo;re spoilt for choice! Options abound, ranging from the &ldquo;Daily Programmer&rdquo; <a href="https://www.reddit.com/r/dailyprogrammer">subreddit</a>, to dedicated (<em>free!</em>) practice sites like <a href="https://www.codeeval.com/">CodeEval</a>, <a href="https://www.hackerrank.com/">HackerRank</a>, or <a href="http://coderbyte.com/">CoderByte</a>.</p>

<p>Eventually I just picked one at random and decided to start doing roughly one problem a day (I picked <a href="https://www.hackerrank.com/">CodeWars</a>, which has an amusing &ldquo;dojo&rdquo; feel to it). We&rsquo;ll see how long it lasts :)</p>

<p><strong>Edit</strong>: There is a bigger list of &ldquo;coding challenge&rdquo; sites <a href="http://codecondo.com/coding-challenges/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 50: Consecutive Prime Sum]]></title>
    <link href="http://agam.github.io/blog/2015/05/29/euler-50-consecutive-prime-sum/"/>
    <updated>2015-05-29T19:24:32+00:00</updated>
    <id>http://agam.github.io/blog/2015/05/29/euler-50-consecutive-prime-sum</id>
    <content type="html"><![CDATA[<p>I had posted a grotesque non-working solution to this <a href="http://agam.github.io/blog/2015/05/17/euler-50-a-non-working-solution/">previously</a>, so here is a grotesque <em>working</em> solution.</p>

<p>Yes, it uses global variables and old-fashioned extra book-keeping, and the <code>main</code> function is just a step-wise procedural function, but it <em>works</em> and it&rsquo;s <em>correct</em>, so I&rsquo;m going to leave it as is.</p>

<p><strong>Statutory warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">const</span> <span class="nx">MAX_NUM</span> <span class="p">=</span> <span class="mi">1000000</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Number</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">isPrime</span>              <span class="kt">bool</span>
</span><span class='line'>  <span class="nx">maxPrimeSum</span>          <span class="kt">int</span>
</span><span class='line'>  <span class="nx">maxConsecutivePrimes</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">previousPrimeIndex</span>   <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Oh noez! A _global_ variable!</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">numbers</span> <span class="p">[]</span><span class="nx">Number</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">markMultiples</span><span class="p">(</span><span class="nx">p</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">n</span> <span class="o">:=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">p</span><span class="p">;</span> <span class="nx">n</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span> <span class="nx">n</span> <span class="o">+=</span> <span class="nx">p</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">numbers</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">isPrime</span> <span class="p">=</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">populatePrimes</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// First mark all numbers as prime</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">isPrime</span> <span class="p">=</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Bootstrap our loop with the first prime, 2</span>
</span><span class='line'>  <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">isPrime</span> <span class="p">=</span> <span class="kc">false</span>
</span><span class='line'>  <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">isPrime</span> <span class="p">=</span> <span class="kc">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">prevPrime</span> <span class="o">:=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="nx">numbers</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">isPrime</span> <span class="p">=</span> <span class="kc">true</span>
</span><span class='line'>  <span class="nx">numbers</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">previousPrimeIndex</span> <span class="p">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Straightforward sieve</span>
</span><span class='line'>  <span class="nx">markMultiples</span><span class="p">(</span><span class="nx">prevPrime</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">p</span> <span class="o">:=</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">p</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span> <span class="nx">p</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">p</span><span class="p">].</span><span class="nx">isPrime</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">numbers</span><span class="p">[</span><span class="nx">p</span><span class="p">].</span><span class="nx">previousPrimeIndex</span> <span class="p">=</span> <span class="nx">prevPrime</span>
</span><span class='line'>          <span class="nx">prevPrime</span> <span class="p">=</span> <span class="nx">p</span>
</span><span class='line'>          <span class="nx">markMultiples</span><span class="p">(</span><span class="nx">prevPrime</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">calculatePrimeSums</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Initialize first prime, then move out from there</span>
</span><span class='line'>  <span class="nx">numbers</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">maxPrimeSum</span> <span class="p">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="nx">numbers</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">maxConsecutivePrimes</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// As an upper limit for sums, what&#39;s the largest prime we have?</span>
</span><span class='line'>  <span class="nx">largestPrime</span> <span class="o">:=</span> <span class="nx">MAX_NUM</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nx">MAX_NUM</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">isPrime</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">largestPrime</span> <span class="p">=</span> <span class="nx">i</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;The largest possible prime to sum to is : &quot;</span><span class="p">,</span> <span class="nx">largestPrime</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">!</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">isPrime</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">continue</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">sum</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nx">numPrimesTried</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nx">lastPrimeSum</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nx">numPrimesInSum</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="c1">// Go back through the sequence of primes, until the</span>
</span><span class='line'>      <span class="c1">// sum goes past the largest possible prime. Store the</span>
</span><span class='line'>      <span class="c1">// last sum reached that _was_ a prime, and the number</span>
</span><span class='line'>      <span class="c1">// of primes involved.</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">p</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">p</span> <span class="p">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">p</span> <span class="p">=</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">p</span><span class="p">].</span><span class="nx">previousPrimeIndex</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">!</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">p</span><span class="p">].</span><span class="nx">isPrime</span> <span class="p">{</span>
</span><span class='line'>              <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;wtf&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">p</span>
</span><span class='line'>          <span class="nx">numPrimesTried</span><span class="o">++</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">sum</span> <span class="p">&gt;</span> <span class="nx">largestPrime</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// Don&#39;t try any more primes!</span>
</span><span class='line'>              <span class="k">break</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// Book keeping</span>
</span><span class='line'>              <span class="k">if</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">sum</span><span class="p">].</span><span class="nx">isPrime</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">lastPrimeSum</span> <span class="p">=</span> <span class="nx">sum</span>
</span><span class='line'>                  <span class="nx">numPrimesInSum</span> <span class="p">=</span> <span class="nx">numPrimesTried</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">maxPrimeSum</span> <span class="p">=</span> <span class="nx">lastPrimeSum</span>
</span><span class='line'>      <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">maxConsecutivePrimes</span> <span class="p">=</span> <span class="nx">numPrimesInSum</span>
</span><span class='line'>      <span class="c1">//     fmt.Println(&quot;max prime sum for &quot;, i, &quot; = &quot;, numbers[i].maxPrimeSum)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">findMaxPrimeSum</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Use the pre-calculated primes sums to figure out the maximum and print some summary info</span>
</span><span class='line'>  <span class="nx">maxConsecutivePrimes</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nx">maxPrimeSum</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">MAX_NUM</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">isPrime</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">maxConsecutivePrimes</span> <span class="p">&gt;</span> <span class="nx">maxConsecutivePrimes</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">maxConsecutivePrimes</span> <span class="p">=</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">maxConsecutivePrimes</span>
</span><span class='line'>              <span class="nx">maxPrimeSum</span> <span class="p">=</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">maxPrimeSum</span>
</span><span class='line'>              <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;max prime sum = &quot;</span><span class="p">,</span> <span class="nx">maxPrimeSum</span><span class="p">,</span> <span class="s">&quot;, with &quot;</span><span class="p">,</span> <span class="nx">maxConsecutivePrimes</span><span class="p">,</span> <span class="s">&quot; primes, ending in &quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">numbers</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">Number</span><span class="p">,</span> <span class="nx">MAX_NUM</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">populatePrimes</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">calculatePrimeSums</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">findMaxPrimeSum</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The best part? It ran in <code>0.363 seconds</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On the Internet of thing-like-things ...]]></title>
    <link href="http://agam.github.io/blog/2015/05/17/on-the-internet-of-thing-like-things-dot-dot-dot/"/>
    <updated>2015-05-17T07:16:24+00:00</updated>
    <id>http://agam.github.io/blog/2015/05/17/on-the-internet-of-thing-like-things-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Went to Maker Faire, had my mind blown <em>(as usual)</em>, and then came across this quote<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> by Cory Doctorow:</p>

<blockquote><p>So today we have marketing departments who say things like ‘[…] Make me a computer that doesn’t run every program, just a program that does this specialized task, like streaming audio, or routing packets, or playing Xbox games’ […] But that’s not what we do when we turn a computer into an appliance. We’re not making a computer that runs only the “appliance” app; we’re making a computer that can run every program, but which uses some combination of rootkits, spyware, and code-signing to prevent the user from knowing which processes are running, from installing her own software, and from terminating processes that she doesn’t want. <strong>In other words, an appliance is not a stripped-down computer — it is a fully functional computer with spyware on it out of the box.</strong></p></blockquote>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>28th Chaos Communication Congress in Berlin (<a href="https://www.youtube.com/watch?v=HUEvRyemKSg&amp;feature=youtu.be">Youtube link</a>)<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You say incidental, I say accidental ...]]></title>
    <link href="http://agam.github.io/blog/2015/05/17/you-say-incidental/"/>
    <updated>2015-05-17T03:02:15+00:00</updated>
    <id>http://agam.github.io/blog/2015/05/17/you-say-incidental</id>
    <content type="html"><![CDATA[<p>Completely out of context, but it makes a point. Well, <em>some</em> point.</p>

<blockquote><p>Immutant is an integrated suite of Clojure libraries backed by Undertow for web, HornetQ for messaging, Infinispan for caching, Quartz for scheduling, and Narayana for transactions. Applications built with Immutant can optionally be deployed to a WildFly cluster for enhanced features. Its fundamental goal is to reduce the inherent incidental complexity in real world applications.</p></blockquote>

<p>Now, to be fair, it&rsquo;s taken out of <a href="http://immutant.org/news/2015/04/17/announcing-2-final/#What_is_Immutant?">the announcement of a good piece of open-source software</a>, but it&rsquo;s hard to read that last line and not feel like it&rsquo;s the punch line of a bad joke. My reaction is summed up by the first (Disqus) comment: <em>&ldquo;Congrats! I can&rsquo;t wait to find something to do with this. ;)&rdquo;</em>.</p>

<p>You can imagine a sort of automatic generator, that can spit out stuff like this:</p>

<blockquote><p>FooMeister is an integrated suite of HipsterLang libraries backed by SuperBar for web, WooHoo for messaging, YellowDamn for cachine, RedFever for scheduling, and OrangeMayhem for transactions. Applications build with FooMeister can optionally be deployed to a Brouhaha cluster for enhanced features. Its fundamental goal is to reduce the inherent incidental complexity in real world applications.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 50: A non-working solution]]></title>
    <link href="http://agam.github.io/blog/2015/05/17/euler-50-a-non-working-solution/"/>
    <updated>2015-05-17T02:56:08+00:00</updated>
    <id>http://agam.github.io/blog/2015/05/17/euler-50-a-non-working-solution</id>
    <content type="html"><![CDATA[<p>It&rsquo;s worth pointing out things that don&rsquo;t work, roads that lead to dead ends, etc &mdash; so here is a brute force solution that has absolutely no chance of ever working. It&rsquo;s long and verbose because it&rsquo;s a <em>franken-solution</em>, made out of parts of previous solution concatenated together into a terrible mess. Posting it here before I destroy it. The forlorn <code>TODO</code> at the end proved over-optimistic &hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kMaxNum</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">PopulatePrimes</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;*</span> <span class="n">numbers</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;*</span> <span class="n">prime_indices</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Start off with all numbers marked prime.</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">numbers</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">prime_index</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Store the prime index for future reference</span>
</span><span class='line'>    <span class="n">prime_indices</span><span class="o">-&gt;</span><span class="n">push_back</span><span class="p">(</span><span class="n">prime_index</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">numbers</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">prime_index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Mark the multiples as not prime</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">prime_index</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">prime_index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">numbers</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Repeat with the next prime number</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">prime_index</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">prime_index</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">numbers</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="n">prime_index</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">prime_index</span> <span class="o">==</span> <span class="n">numbers</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">sanity_check_primes</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">numbers</span><span class="p">,</span>
</span><span class='line'>                         <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">prime_indices</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">check_prime</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">numbers</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">prime_indices</span><span class="p">](</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is_prime</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">is_prime</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">prime_indices</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">prime_indices</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">n</span><span class="p">)</span> <span class="o">!=</span>
</span><span class='line'>             <span class="n">prime_indices</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">prime_indices</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">prime_indices</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">n</span><span class="p">)</span> <span class="o">==</span>
</span><span class='line'>             <span class="n">prime_indices</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">check_prime</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>  <span class="n">check_prime</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>  <span class="n">check_prime</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>  <span class="n">check_prime</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>  <span class="n">check_prime</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CombinationIterator</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">CombinationIterator</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">n_</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="n">m_</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">comb_</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">comb_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">GetCombination</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">comb_</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">Next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// The last digit can go up to n, the next-to-last up to n-1, and</span>
</span><span class='line'>    <span class="c1">// so on. The very first sequence is {0, 1, ..., m-1}, and the</span>
</span><span class='line'>    <span class="c1">// very last is {n-m+1, ..., n-1, n}.</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">m_</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">n_</span> <span class="o">+</span> <span class="n">i</span> <span class="o">-</span> <span class="n">m_</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">comb_</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="c1">// cout &lt;&lt; &quot;Debug: i = &quot; &lt;&lt; i &lt;&lt; &quot;, val = &quot; &lt;&lt; val &lt;&lt; &quot;, max = &quot; &lt;&lt; max &lt;&lt; endl;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Increment this position, and update subsequent indices if</span>
</span><span class='line'>        <span class="c1">// necessary.</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m_</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">comb_</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">val</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// If we&#39;re at the beginning, we&#39;re done.</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Otherwise, fallthrough to the previous index.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>  <span class="c1">// Should not reach here!</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">n_</span><span class="p">,</span> <span class="n">m_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">comb_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">sanity_check_combinator</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">CombinationIterator</span> <span class="n">cit</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">v</span> <span class="o">=</span> <span class="n">cit</span><span class="p">.</span><span class="n">GetCombination</span><span class="p">();</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug (&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;) : &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="nl">n</span> <span class="p">:</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;  &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">cit</span><span class="p">.</span><span class="n">Next</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="k">class</span> <span class="nc">Cardinality</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Zero</span><span class="p">,</span> <span class="n">One</span><span class="p">,</span> <span class="n">More</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Cardinality</span> <span class="nf">GetPrimeSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">num_summands</span><span class="p">,</span>
</span><span class='line'>                        <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">numbers</span><span class="p">,</span>
</span><span class='line'>                        <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">prime_indices</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Try all possible combinations of adding prime numbers</span>
</span><span class='line'>  <span class="c1">// together. Either exhaust all combinations, in which case return</span>
</span><span class='line'>  <span class="c1">// Zero or One. The moment two are found, return More.</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num_primes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CombinationIterator</span> <span class="n">cit</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">num_summands</span><span class="p">);</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">pv</span> <span class="o">=</span> <span class="n">cit</span><span class="p">.</span><span class="n">GetCombination</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="nl">p</span> <span class="p">:</span> <span class="n">pv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Check if the primes add up to a prime</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sum</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">numbers</span><span class="p">[</span><span class="n">sum</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">num_primes</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">num_primes</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Cardinality</span><span class="o">::</span><span class="n">More</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">cit</span><span class="p">.</span><span class="n">Next</span><span class="p">());</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">num_primes</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">num_primes</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">num_primes</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Cardinality</span><span class="o">::</span><span class="n">One</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Cardinality</span><span class="o">::</span><span class="n">Zero</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">Cardinality</span><span class="o">&amp;</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">underlying_type</span><span class="o">&lt;</span><span class="n">Cardinality</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&gt;</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Euler #50 ... </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Get the prime numbers upto 1 million</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">(</span><span class="n">kMaxNum</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">prime_indices</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PopulatePrimes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">numbers</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">prime_indices</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sanity_check_primes</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">prime_indices</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug: number of primes  = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">prime_indices</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sanity_check_combinator</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">GetPrimeSum</span><span class="p">(</span><span class="mi">10000</span><span class="p">,</span> <span class="n">numbers</span><span class="p">,</span> <span class="n">prime_indices</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// TODO(agam): Uncomment and continue ...</span>
</span><span class='line'>  <span class="c1">// int left = 0;</span>
</span><span class='line'>  <span class="c1">// int right = 500;  /// random round number</span>
</span><span class='line'>  <span class="c1">// do {</span>
</span><span class='line'>  <span class="c1">//   Cardinality left_c = GetPrimeSum(left, numbers, prime_indices);</span>
</span><span class='line'>  <span class="c1">//   Cardinality right_c = GetPrimeSum(right, numbers, prime_indices);</span>
</span><span class='line'>  <span class="c1">// } while (left &lt; right);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In search of lost rants ...]]></title>
    <link href="http://agam.github.io/blog/2015/05/16/in-search-of-lost-rants-dot-dot-dot/"/>
    <updated>2015-05-16T06:20:14+00:00</updated>
    <id>http://agam.github.io/blog/2015/05/16/in-search-of-lost-rants-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I love reading rants. Not random, trollish ones, you know, intended only to provoke flamewars &mdash; those are <em>tiresome</em> and (worse!) predictable. No, I like the heartfelt ones, filled with (seemingly) genuine disgust and grief.</p>

<p>Last year I went meticulously through <em>every single post</em> by Erik Naggum (thanks to Zach Beane who took the trouble of curating them<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>), and found a wealth of quotes. I highly recommend it &mdash; consider it casual reading, a replacement for whatever you plan to read on your next commute, travel trip or vacation.</p>

<p>Anyway, today I found another worthy rant-er, Mr. Adam Rosenberg. Yes, he has a blog with a bunch of interesting articles<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, he is also a self-described &ldquo;industrial mathematician&rdquo;, and has written an unabashed defense of Ye Olde FORTRAN and C style as the once and future programming style<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. But what made me <em>binge-read</em> his writing was his collection of rants<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>A good place to start is <a href="http://www.the-adam.com/adam/rantrave/computers.html">&ldquo;The Failure of the Digital Computer&rdquo;</a>, but obviously <em>YMMV</em>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The <a href="http://xach.com/naggum/articles/">Erik Naggum Archive</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://www.the-adam.com/adam/index.html">The Adam N. Rosenberg web page</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://www.the-adam.com/adam/rantrave/st02.pdf">&ldquo;A Description of One Programmer&rsquo;s Programming Style&rdquo;</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><a href="http://www.the-adam.com/adam/rantrave/">&ldquo;Rants and Raves&rdquo;</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 49: Prime Permutations]]></title>
    <link href="http://agam.github.io/blog/2015/05/05/euler-49-prime-permutations/"/>
    <updated>2015-05-05T06:39:11+00:00</updated>
    <id>http://agam.github.io/blog/2015/05/05/euler-49-prime-permutations</id>
    <content type="html"><![CDATA[<p>This one took way longer than expected. I initially misunderstood the question to require 4-digit numbers <em>unique digits</em> (because that&rsquo;s what the example has!) and I went crazy trying to figure out why the <em>only</em> answer I was getting was the example in the question. Anyway I later realized I&rsquo;d over-complicated my solution and I just needed to look at numbers between <code>1000</code> and <code>9999</code>. Given this, it&rsquo;s <em>absurd</em> to have a class called &ldquo;FourDigits&rdquo; (duh), but I figured there&rsquo;s no point hiding my initial mistake :)</p>

<p>The code fragment below is bloated because I&rsquo;ve left in old code from my first attempt (the functions suffixed with <code>...Old</code>), and half the code here is dead code.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers Ahead</em> (well, not really)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">bool</span> <span class="nf">IsPrime</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Rule out even numbers</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Check divisibility by odd numbers starting from 3, uptil the</span>
</span><span class='line'>  <span class="c1">// square root of the number.</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">lim</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">lim</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">HasArithmeticSequence</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Assumes sorted vector of ints</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">diff</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">,</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="n">diff</span><span class="o">&gt;</span> <span class="n">diffs</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Get the diffs between all elements, then find two pairs with the</span>
</span><span class='line'>  <span class="c1">// same diff (yes, N^2, but will do). The two pairs must share a</span>
</span><span class='line'>  <span class="c1">// number, i.e. V_i + d = V_j, and V_j + d = V_k.</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">diffs</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span> <span class="p">{</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">v</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">v</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">diffs</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">diffs</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
</span><span class='line'>            <span class="p">[](</span><span class="k">const</span> <span class="n">diff</span><span class="o">&amp;</span> <span class="n">df1</span><span class="p">,</span> <span class="k">const</span> <span class="n">diff</span><span class="o">&amp;</span> <span class="n">df2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">df1</span><span class="p">.</span><span class="n">d</span> <span class="o">&lt;</span> <span class="n">df2</span><span class="p">.</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Now that we have grouped elements by their difference, we can</span>
</span><span class='line'>  <span class="c1">// analyze each &#39;cluster&#39; to find the pairs we want.</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">diffs</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Yes, it&#39;s inefficient, but ...</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">diffs</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">diffs</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">d</span> <span class="o">==</span> <span class="n">d</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">diffs</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">n2</span> <span class="o">==</span> <span class="n">diffs</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">n1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Found arithmetic progression: &quot;</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="n">diffs</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">n1</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; -&gt; &quot;</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="n">diffs</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">n2</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; -&gt; &quot;</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="n">diffs</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">n2</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FourDigitCombinator</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">FourDigitCombinator</span><span class="p">()</span> <span class="o">:</span> <span class="n">digits_</span><span class="p">({</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}),</span> <span class="n">number_</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span> <span class="n">GetDigitsOld</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span> <span class="n">stream</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kNumDigits</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">stream</span> <span class="o">&lt;&lt;</span> <span class="n">digits_</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">stream</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">NextOld</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sanity_check</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// See if there is a prior number that can be incremented</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">kNumDigits</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// The last digit can go up to kMaxDigit, the previous one up to</span>
</span><span class='line'>      <span class="c1">// kMaxDigit - 1, and so on ...</span>
</span><span class='line'>      <span class="k">const</span> <span class="kt">int</span> <span class="n">digitMax</span> <span class="o">=</span> <span class="n">kMaxDigit</span> <span class="o">-</span> <span class="n">kNumDigits</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">digitValue</span> <span class="o">=</span> <span class="n">digits_</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">(</span><span class="n">digitValue</span> <span class="o">&lt;=</span> <span class="n">digitMax</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">digitValue</span> <span class="o">==</span> <span class="n">digitMax</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// We&#39;ve hit the limit for this digit. If this is the first</span>
</span><span class='line'>        <span class="c1">// digit, we&#39;ve reached the end.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// Otherwise, fall through to the previous digit ...</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Increment, and reset subsequent digits, if any.</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">kNumDigits</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">++</span><span class="n">digitValue</span><span class="p">;</span>
</span><span class='line'>          <span class="n">digits_</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">digitValue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>  <span class="c1">// We should not get here!</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">HasPrimePermutationsOld</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">array</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">kNumDigits</span><span class="o">&gt;</span> <span class="n">mutation</span> <span class="o">=</span> <span class="n">digits_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">prime_mutations</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Skip permutations with a leading zero.</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">mutation</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Create the corresponding number</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kNumDigits</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">=</span> <span class="n">number</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">mutation</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">IsPrime</span><span class="p">(</span><span class="n">number</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">prime_mutations</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">next_permutation</span><span class="p">(</span><span class="n">mutation</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">mutation</span><span class="p">.</span><span class="n">end</span><span class="p">()));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">prime_mutations</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">HasArithmeticSequence</span><span class="p">(</span><span class="n">prime_mutations</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span> <span class="n">GetDigits</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span> <span class="n">stream</span><span class="p">;</span>
</span><span class='line'>    <span class="n">stream</span> <span class="o">&lt;&lt;</span> <span class="n">number_</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">stream</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">Next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">number_</span> <span class="o">&lt;</span> <span class="mi">9999</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">number_</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">HasPrimePermutations</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">array</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">kNumDigits</span><span class="o">&gt;</span> <span class="n">mutation</span><span class="p">;</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">number_</span> <span class="o">&gt;=</span> <span class="mi">1000</span> <span class="o">&amp;&amp;</span> <span class="n">number_</span> <span class="o">&lt;=</span> <span class="mi">9999</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Convert number into an array of digits ...</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">number_</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">digit_index</span> <span class="o">=</span> <span class="n">kNumDigits</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">mutation</span><span class="p">[</span><span class="n">digit_index</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">prime_mutations</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ... then convert the array of digits back into a number!</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kNumDigits</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">mutation</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">(</span><span class="n">num</span> <span class="o">&gt;=</span> <span class="mi">1000</span> <span class="o">&amp;&amp;</span> <span class="n">num</span> <span class="o">&lt;=</span> <span class="mi">9999</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">IsPrime</span><span class="p">(</span><span class="n">num</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">prime_mutations</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">next_permutation</span><span class="p">(</span><span class="n">mutation</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">mutation</span><span class="p">.</span><span class="n">end</span><span class="p">()));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">prime_mutations</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">HasArithmeticSequence</span><span class="p">(</span><span class="n">prime_mutations</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kNumDigits</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kMaxDigit</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
</span><span class='line'>  <span class="n">array</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">kNumDigits</span><span class="o">&gt;</span> <span class="n">digits_</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">number_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">sanity_check</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kNumDigits</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">(</span><span class="n">digits_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">digits_</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Euler #49 ... </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">set</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">candidates</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Go over all sets of four digits, and consider the permutations of</span>
</span><span class='line'>  <span class="c1">// each to see if any group of three permutations is prime.</span>
</span><span class='line'>  <span class="n">FourDigitCombinator</span> <span class="n">four_digits</span><span class="p">;</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">four_digits</span><span class="p">.</span><span class="n">HasPrimePermutations</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">candidates</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">four_digits</span><span class="p">.</span><span class="n">GetDigits</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">four_digits</span><span class="p">.</span><span class="n">Next</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Debugging aid ... check if any combinations matched.</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">c</span> <span class="p">:</span> <span class="n">candidates</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Debug: found : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it runs as &hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">time</span> ./Test
</span><span class='line'>Euler <span class="c">#49 ...</span>
</span><span class='line'>Found arithmetic progression: <span class="m">1487</span> -&gt; <span class="m">4817</span> -&gt; 8147
</span><span class='line'>Found arithmetic progression: <span class="m">1487</span> -&gt; <span class="m">4817</span> -&gt; 8147
</span><span class='line'>Found arithmetic progression: <span class="m">2969</span> -&gt; <span class="m">6299</span> -&gt; 9629
</span><span class='line'>Found arithmetic progression: <span class="m">2969</span> -&gt; <span class="m">6299</span> -&gt; 9629
</span><span class='line'>Debug: found : 1478
</span><span class='line'>Debug: found : 1487
</span><span class='line'>Debug: found : 2699
</span><span class='line'>Debug: found : 2969
</span><span class='line'>
</span><span class='line'>real    0m0.019s
</span><span class='line'>user    0m0.016s
</span><span class='line'>sys     0m0.000s
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 48: Self powers]]></title>
    <link href="http://agam.github.io/blog/2015/05/04/euler-48-self-powers/"/>
    <updated>2015-05-04T03:09:53+00:00</updated>
    <id>http://agam.github.io/blog/2015/05/04/euler-48-self-powers</id>
    <content type="html"><![CDATA[<p>One of the simplest problems, that would be a one-liner in Python or Lisp. Decided to do it in C++ anyway, using the <code>GMP</code> library (verbose, but runs in <code>4 ms</code>)</p>

<p>For this to work, you&rsquo;ll need to add (e.g. for <code>CMake</code>) a line like <code>target_link_libraries(Test gmpxx gmp)</code>, and include <code>gmpxx.h</code>.</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers Ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Euler #48 ... </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">kNumTerms</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// GMP has a C++ interface, see the following link:</span>
</span><span class='line'>  <span class="c1">// https://gmplib.org/manual/C_002b_002b-Interface-General.html</span>
</span><span class='line'>  <span class="n">mpz_class</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Loop from 1 to 1000</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">kNumTerms</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mpz_class</span> <span class="n">term</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// GMP exponentiation function, see documentation at:</span>
</span><span class='line'>    <span class="c1">// https://gmplib.org/manual/Integer-Exponentiation.html</span>
</span><span class='line'>    <span class="n">mpz_ui_pow_ui</span><span class="p">(</span><span class="n">term</span><span class="p">.</span><span class="kt">get_mpz_t</span><span class="p">(),</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">term</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mpz_class</span> <span class="n">last_ten_digits</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// We&#39;re looking for sum modulo (10 ^ 10)</span>
</span><span class='line'>  <span class="n">mpz_class</span> <span class="n">divisor</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mpz_ui_pow_ui</span><span class="p">(</span><span class="n">divisor</span><span class="p">.</span><span class="kt">get_mpz_t</span><span class="p">(),</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mpz_mod</span><span class="p">(</span><span class="n">last_ten_digits</span><span class="p">.</span><span class="kt">get_mpz_t</span><span class="p">(),</span> <span class="n">sum</span><span class="p">.</span><span class="kt">get_mpz_t</span><span class="p">(),</span> <span class="n">divisor</span><span class="p">.</span><span class="kt">get_mpz_t</span><span class="p">());</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The final answer is : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">last_ten_digits</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 47: Distinct Prime Factors]]></title>
    <link href="http://agam.github.io/blog/2015/05/04/euler-47-distinct-prime-factors/"/>
    <updated>2015-05-04T01:00:00+00:00</updated>
    <id>http://agam.github.io/blog/2015/05/04/euler-47-distinct-prime-factors</id>
    <content type="html"><![CDATA[<p>This one turned out to be very similar to the previous one (except for the small detail of iterating from the smallest prime upwards, instead of the other way round).</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">PrimeIterator</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">PrimeIterator</span><span class="p">()</span> <span class="o">:</span> <span class="n">prime_index_</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNextPrime</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">((</span><span class="n">prime_index_</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">primes_</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">primes_</span><span class="p">[</span><span class="o">++</span><span class="n">prime_index_</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">hasMorePrimes</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">prime_index_</span> <span class="o">&gt;=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">prime_index_</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">primes_</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">prime_index_</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">primes_</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">fillPrimes</span><span class="p">(</span><span class="kt">int</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">primes_</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">addPrime</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Reset to before the first element</span>
</span><span class='line'>    <span class="n">prime_index_</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">void</span> <span class="n">addPrime</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">primes_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">primes_</span><span class="p">.</span><span class="n">back</span><span class="p">();</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">is_prime</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="nl">p</span> <span class="p">:</span> <span class="n">primes_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">is_prime</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>  <span class="c1">// Try next number</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">is_prime</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">primes_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">primes_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">prime_index_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">PrimeIterator</span><span class="o">::</span><span class="n">primes_</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">getNumPrimeFactors</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">numPrimeFactors</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PrimeIterator</span> <span class="n">pit</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pit</span><span class="p">.</span><span class="n">fillPrimes</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">pit</span><span class="p">.</span><span class="n">hasMorePrimes</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">pit</span><span class="p">.</span><span class="n">getNextPrime</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">/=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="o">++</span><span class="n">numPrimeFactors</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">numPrimeFactors</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Euler #47 ... </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">runLength</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="p">;</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getNumPrimeFactors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">runLength</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">runLength</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">runLength</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Found a sequence of four numbers with four prime &quot;</span>
</span><span class='line'>           <span class="o">&lt;&lt;</span> <span class="s">&quot;factors starting at : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">3</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Runs as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">time</span> ./Test
</span><span class='line'>Euler <span class="c">#47 ...</span>
</span><span class='line'>Found a sequence of four numbers with four prime factors starting at : &lt;redacted&gt;
</span><span class='line'>
</span><span class='line'>real    0m3.814s
</span><span class='line'>user    0m3.812s
</span><span class='line'>sys     0m0.000s
</span></code></pre></td></tr></table></div></figure>


<p>(Yep, a noticeable delay, but anything under 5 seconds is good for me &hellip;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 46: Goldbach's Other Conjecture]]></title>
    <link href="http://agam.github.io/blog/2015/05/03/euler-46-goldbacks-other-conjecture/"/>
    <updated>2015-05-03T23:46:24+00:00</updated>
    <id>http://agam.github.io/blog/2015/05/03/euler-46-goldbacks-other-conjecture</id>
    <content type="html"><![CDATA[<p>May the brute force be with you. Here is another one (sorry for the over-engineered code).</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">PrimeIterator</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">PrimeIterator</span><span class="p">()</span> <span class="o">:</span> <span class="n">prime_index_</span><span class="p">(</span><span class="n">primes_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNextPrime</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">prime_index_</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">primes_</span><span class="p">[</span><span class="o">--</span><span class="n">prime_index_</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">hasMorePrimes</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">prime_index_</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">fillPrimes</span><span class="p">(</span><span class="kt">int</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">primes_</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">addPrime</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Reset to the last element</span>
</span><span class='line'>    <span class="n">prime_index_</span> <span class="o">=</span> <span class="n">primes_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">void</span> <span class="n">addPrime</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">primes_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">primes_</span><span class="p">.</span><span class="n">back</span><span class="p">();</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">is_prime</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="nl">p</span> <span class="p">:</span> <span class="n">primes_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">is_prime</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>  <span class="c1">// Try next number</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">is_prime</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">primes_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">primes_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">prime_index_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">PrimeIterator</span><span class="o">::</span><span class="n">primes_</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">goldbachDecompositionExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// n = p + 2*m^2</span>
</span><span class='line'>  <span class="c1">// Since 2*m^2 is always even, and n is odd, p must be odd too (so p has to be 3 or greater)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Use a generator to get more primes on demand.</span>
</span><span class='line'>  <span class="n">PrimeIterator</span> <span class="n">pit</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pit</span><span class="p">.</span><span class="n">fillPrimes</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">pit</span><span class="p">.</span><span class="n">hasMorePrimes</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">pit</span><span class="p">.</span><span class="n">getNextPrime</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// If n is a prime, then n = p + 2*(0*0)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">sq</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">p</span><span class="p">)</span><span class="o">/</span><span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">sq</span><span class="p">)</span> <span class="o">==</span> <span class="n">floor</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">sq</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// n = p + 2*sqrt(sq)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Euler #46 ... </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Loop over odd composite numbers ...</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span> <span class="p">;</span> <span class="n">i</span><span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">goldbachDecompositionExists</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Failed at &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Runs as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">time</span> ./Test
</span><span class='line'>Euler <span class="c">#46 ...</span>
</span><span class='line'>Failed at &lt;redacted&gt;
</span><span class='line'>
</span><span class='line'>real    0m0.007s
</span><span class='line'>user    0m0.004s
</span><span class='line'>sys     0m0.000s
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 45: Triangle, Pengagonal, Hexagonal Numbers]]></title>
    <link href="http://agam.github.io/blog/2015/04/28/euler-44-triangle/"/>
    <updated>2015-04-28T19:41:00+00:00</updated>
    <id>http://agam.github.io/blog/2015/04/28/euler-44-triangle</id>
    <content type="html"><![CDATA[<p>While we&rsquo;re doing brute force solutions, here&rsquo;s another one &hellip;</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers Ahead</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">uint64_t</span> <span class="nf">get_triangle</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">is_pentagonal</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// y = x * (3*x - 1) / 2</span>
</span><span class='line'>  <span class="c1">// So x is an integral solution of 3x^2 + (-1)x + (-2y) = 0</span>
</span><span class='line'>  <span class="c1">// ... or (1 + sqrt(1 + 24y))/6</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">double</span> <span class="n">solution</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">24</span> <span class="o">*</span> <span class="n">num</span><span class="p">))</span> <span class="o">/</span> <span class="mf">6.0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">dummy</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">modf</span><span class="p">(</span><span class="n">solution</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dummy</span><span class="p">)</span> <span class="o">==</span> <span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">is_hexagonal</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// y = x * (2*x - 1)</span>
</span><span class='line'>  <span class="c1">// So x is an integral solution of 2x^2 + (-1)x + (-y) = 0</span>
</span><span class='line'>  <span class="c1">// ... or (1 + sqrt(1 + 8y))/4</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">double</span> <span class="n">solution</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">num</span><span class="p">))</span> <span class="o">/</span> <span class="mf">4.0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">dummy</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">modf</span><span class="p">(</span><span class="n">solution</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dummy</span><span class="p">)</span> <span class="o">==</span> <span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">sanity_check</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">t285</span> <span class="o">=</span> <span class="n">get_triangle</span><span class="p">(</span><span class="mi">285</span><span class="p">);</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">t285</span> <span class="o">==</span> <span class="mi">40755</span><span class="p">);</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">is_pentagonal</span><span class="p">(</span><span class="n">t285</span><span class="p">));</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">is_hexagonal</span><span class="p">(</span><span class="n">t285</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Euler # 45 ... </span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sanity_check</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">// We already now that T_285 is pentagonal and hexagonal, so start</span>
</span><span class='line'>  <span class="c1">// from the next index;</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">286</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(;</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint64_t</span> <span class="n">num</span> <span class="o">=</span> <span class="n">get_triangle</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">is_pentagonal</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">is_hexagonal</span><span class="p">(</span><span class="n">num</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Found triangle# &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;  (&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">100000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Done testing &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
