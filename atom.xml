<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2016-04-04T23:05:06-07:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monthly Prog/Math/Sci summary: March 2016]]></title>
    <link href="http://agam.github.io/blog/2016/04/04/monthly-prog-slash-math-slash-sci-summary-march-2016/"/>
    <updated>2016-04-04T19:50:13-07:00</updated>
    <id>http://agam.github.io/blog/2016/04/04/monthly-prog-slash-math-slash-sci-summary-march-2016</id>
    <content type="html"><![CDATA[<p>(<em>Meta</em>: This month&rsquo;s post is late because I was on vacation)</p>

<p>March&rsquo;s list of curated <em>stuff</em>:</p>

<ul>
<li><p>A <a href="http://ethw.org/Main_Page">grab bag</a> of engineering and technology history: lots of interesting stuff here, such as <a href="http://ethw.org/Creating_Magnetic_Disk_Storage_at_IBM">this overview</a> of early disk storage</p></li>
<li><p><a href="https://www.youtube.com/watch?v=RdE-d_EhzmA">A talk</a> by David West on how &ldquo;Object Oriented Programming&rdquo; has been misunderstood (I ended up buying his book <a href="http://www.amazon.com/Object-Thinking-Developer-Reference-David/dp/0735619654"><em>&ldquo;Object Thinking&rdquo;</em></a>)</p></li>
<li><p>Stumbled across this PhD thesis from 1991 by John Sturdy titled <a href="http://www.cb1.com/~john/thesis/thesis.html"><em>&ldquo;A Lisp through the Looking Glass&rdquo;</em></a>; it seemed vaguely similar to the <em>Black</em> system in Scheme that Nadia demoed a while ago at Strangeloop. Anyway, while I don&rsquo;t quite understand it, there is much coolness here.</p></li>
</ul>


<blockquote><p>This thesis presents a new architecture for programming language interpreters, <strong>in which interpreters are not only first-class values, but are also arranged in a tower of meta-circular interpretation</strong> which is accessible reflectively&mdash;-so that a program may modify elements of the meta-circular tower under which it runs, and thus cause changes in the manner of its own interpretation.</p>

<p>To facilitate such modification, we develop a representation for interpreters that splits each interpreter into a language (a collection of independently implemented constructs) and an evaluator (connecting the constructs together).</p>

<p>To implement such a mutable infinite meta-circular interpreter, we need another interpreter outside the tower, the meta-evaluator. We present this, along with a systematic way of linking it to the meta-circular tower. We show that a further form of meta-circularity may be introduced by bringing the meta-evaluator into the reflectively accessible part of the system; and that this may be repeated without limit, using the same techniques.</p></blockquote>

<ul>
<li><p>Gregory Chaitin wrote an essay on <a href="http://inference-review.com/article/doing-mathematics-differently"><em>&ldquo;Doing Mathematics Differently&rdquo;</em></a>, in which he seems to encourage an experimental branch of mathematics, similar to physics.</p></li>
<li><p>Another essay, this time by Simon Schaffer titled <a href="http://www.imaginaryfutures.net/2007/04/16/babbages-intelligence-by-simon-schaffer/"><em>&ldquo;Babbage&rsquo;s Intelligence&rdquo;</em></a>, which is ridiculously long and meanders endlessly, and is worth reading only for the fascinating nuggets buried here and there.</p></li>
</ul>


<blockquote><p>In his address to the Society in early 1824, the Society’s president, the financier, mathematician and orientalist Henry Colebrooke, summed up the significance of Babbage’s planned device. He referred to contemporary developments of industrial machinery only to contrast them with the Difference Engine. “In other cases, mechanical devices have substituted machines for simpler tools or for bodily labour….But the invention to which I am adverting comes in place of mental exertion: it substitutes mechanical performance for an intellectual process”. In other words, <strong>“Mr Babbage’s invention puts an engine in place of the computer”</strong>.</p>

<p>As Babbage and his allies among the political economists showed, the disaggregation of the production process into its simplest components allowed a series of economies and practices of surveillance. Mechanized production required strict discipline. The same was true of the Analytical Engine. Parcelling the processes of Lagrangean algebra into specific components allowed the increase in speed of the machine, the transformation of infinities of space into manageable durations of time, the most economical recompense to each component in terms of consumed power (if mechanical) or consumed wages (if human). “<strong>The whole history of the invention has been a struggle against time</strong>”, Babbage wrote in 1837. The replacement of individual human intelligence by machine intelligence was as apparent in the workshop as in the engines. In the former, this task was both politically and economically necessary. “One great advantage which we derive from machinery is the check which it affords against the inattention, idleness or the dishonesty of human agents”. This set of failings could produce erroneous astronomical tables, hence the significance of Prony’s reports on the performance of the least intelligent computers when subject to the right management. Unreliable agents could also form trade union combinations, which, Babbage held, were always “injurious” to the workforce itself. His aim here was to contest the influence of “designing persons” and show the working classes that <strong>“the prosperity and success of the master manufacturer is essential to the welfare of the workman”</strong>, even though “I am compelled to admit that this connexion is in many cases too remote to be understood by the latter”.</p>

<p>This problem of the geography of intelligence depended on the fetishisation of the machines and the reification of the labour power exerted around them. As Raphael Samuel has demonstrated, mid-Victorian industrial mechanization was accompanied by the preservation, intensification and expansion of skilled manual labour throughout the economy. “The mid-Victorian engineer was still characteristically a craftsman, an artisan or mechanic rather than an operative or hand”. [67] The representation of this dual process of the intensification of skill and the subordination of mechanization involved a remarkable balancing act amongst the commentators on the factory system. In the report of his Lancashire tour during the Chartist general strike of 1842, in which almost every cotton works was closed, Cooke Taylor premised that “the diffusion of the Factory System has created a larger demand than previously existed for intelligence and contrivance” among the workforce, and deduced that <strong>the machines themselves could not, or should not, be granted tyrannic power</strong>. “The operatives are stringently ruled by their own consent…So strange a combination of perfect despotism with perfect freedom never before existed, and to have produced such a state is one of the noblest triumphs of morality and intelligence”. [68] <strong>The problem remained. Whose intelligence had produced this splendid state of voluntary servitude and supreme skill? Protagonists of the cotton masters had no doubt – it flowed from the machines themselves</strong>. Thus Edward Baines, a veteran lecturer against the Chartists on the benefits of rapid automation, argued in his history of the cotton industry that “all the precision, power and incessant motion belong to the machines alone, and the work-people have merely to supply them with work”. The embodiment of skill within the automatic system was used to distract attention from the labour power exerted by the workforce itself. The most hostile critics of the machine economy, such as the Liberal Manchester medic Peter Gaskell, countered that it followed that any worker would be <strong>“reduced to a mere watcher or feeder of his mighty assistant”, and that “the struggle carrying on between human power on the one hand, and steam aided by machinery, is gradually approaching a crisis”</strong>.</p>

<p>The apotheosis of the intelligent machine was an integral part of Babbage’s ambitious programme. This programme has been used here to illuminate the complex character of systematic vision in the Industrial Revolution. In the Ninth Bridgewater Treatise, <strong>the system was coextensive with the universe, and Babbage explained that its order and logic would only be visible from a privileged point of view</strong>. In his surveys of the factories and workshops, Babbage set out to reveal the systematic character of the machine economy by pointing out the rationale of the production, distribution and deployment of power in the workshops of industrial Britain. In his project to build intelligent calculating engines, he attempted to represent himself as the intellectual manager of the complex labour relations of the machine-tool industry, initially disastrously, and then as part of his overall vision of a newly rational system of automatic precision engineering. In the setting of early Victorian society, <strong>the connections between these spheres of theological, political and technological work cannot be seen as merely metaphorical. These techniques helped make a new social order and a new form of knowledge.</strong></p></blockquote>

<ul>
<li><p>A fascinating <a href="http://www.gmunk.com/OBLIVION-GFX">account</a> of the special effects work on the movie <em>&ldquo;Oblivion&rdquo;</em></p></li>
<li><p>Dave Baggett at Gamasutra describes <a href="http://www.gamasutra.com/blogs/DaveBaggett/20131031/203788/My_Hardest_Bug_Ever.php"><em>&ldquo;my hardest bug ever&rdquo;</em></a>, where setting the timer to a high enough clock rate interfered with the baud rate (??). I would hate to have a problem like that.</p></li>
<li><p>Luke Gorrie shows how a modern CPU is complicated enough <a href="https://github.com/lukego/blog/issues/15">to be thought of</a> as a distributed programming system.</p></li>
</ul>


<p>Finally, if you too get irritated by the mention of the word <em>&ldquo;agile&rdquo;</em>, <a href="https://www.youtube.com/watch?v=hG4LH6P8Syk">Robert Martin explains</a> how it started and how it became so bad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some badly written code]]></title>
    <link href="http://agam.github.io/blog/2016/03/11/some-badly-written-code/"/>
    <updated>2016-03-11T12:00:43-08:00</updated>
    <id>http://agam.github.io/blog/2016/03/11/some-badly-written-code</id>
    <content type="html"><![CDATA[<p>Heh, didn&rsquo;t know what else to title this sort of scrapbook/notebook entry. Basically I hadn’t looked at Codewars for a long time, so I went back and tried the next “Kata”.</p>

<p><em>Problem:</em> Given two integers m, n (1 &lt;= m &lt;= n) we want to find all integers between m and n whose sum of squared divisors is itself a square.</p>

<p>(E.g. 42 has divisors: 1,2,3,6,7,14,21,42, the squares of which are 1,4,9,3649,196,441,1764, and sum to 2500, which is a square)</p>

<p>I wrote my trivial solution, tried it and the submission failed because it timed out. So I hacked away, and uglified my solution, until it was using “memoized” divisors.</p>

<p>I ran it locally and it seemed faster, then I submitted it, and … it timed out again. I gave up, and moved on. I guess the lesson to be learnt is that it&rsquo;s always easy to code yourself into a corner?</p>

<p><em>Solution:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Codewars.G964.Sumdivsq</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Map</span> <span class="k">as</span> <span class="n">M</span>
</span><span class='line'>
</span><span class='line'><span class="nf">intSqrt</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">intSqrt</span> <span class="ow">=</span> <span class="n">floor</span> <span class="o">.</span> <span class="n">sqrt</span> <span class="o">.</span> <span class="n">fromIntegral</span>
</span><span class='line'>
</span><span class='line'><span class="nf">isSquare</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'><span class="nf">isSquare</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">x</span> <span class="o">==</span> <span class="p">(</span><span class="n">intSqrt</span> <span class="n">x</span><span class="p">)</span><span class="o">^</span><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="nf">sumSq</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">sumSq</span> <span class="n">list</span> <span class="ow">=</span> <span class="n">sum</span> <span class="p">[</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">list</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">multiply</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">multiply</span> <span class="n">factor</span> <span class="n">oldDivlist</span> <span class="ow">=</span> <span class="n">factor</span> <span class="kt">:</span> <span class="n">oldDivlist</span> <span class="o">++</span> <span class="p">(</span><span class="kt">Data</span><span class="o">.</span><span class="kt">List</span><span class="o">.</span><span class="n">map</span> <span class="p">(</span><span class="o">*</span> <span class="n">factor</span><span class="p">)</span> <span class="n">oldDivlist</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">divisorHelper</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Map</span> <span class="kt">Int</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Map</span> <span class="kt">Int</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span>
</span><span class='line'><span class="nf">divisorHelper</span> <span class="n">n</span> <span class="n">lower</span> <span class="n">upper</span> <span class="n">knownDivs</span> <span class="n">listDivs</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">lower</span> <span class="o">&gt;</span> <span class="n">upper</span>
</span><span class='line'>  <span class="kr">then</span> <span class="p">(</span><span class="kt">M</span><span class="o">.</span><span class="n">insert</span> <span class="n">n</span> <span class="n">listDivs</span> <span class="n">knownDivs</span><span class="p">,</span> <span class="n">listDivs</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">else</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">otherDiv</span> <span class="ow">=</span> <span class="n">n</span> <span class="p">`</span><span class="n">div</span><span class="p">`</span> <span class="n">lower</span>
</span><span class='line'>    <span class="kr">in</span>
</span><span class='line'>      <span class="kr">if</span> <span class="p">(</span><span class="n">n</span> <span class="p">`</span><span class="n">rem</span><span class="p">`</span> <span class="n">lower</span> <span class="o">/=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="kr">then</span>
</span><span class='line'>        <span class="c1">-- Keep going till we can divide</span>
</span><span class='line'>        <span class="n">divisorHelper</span> <span class="n">n</span> <span class="p">(</span><span class="n">lower</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="n">upper</span> <span class="n">knownDivs</span> <span class="n">listDivs</span>
</span><span class='line'>      <span class="kr">else</span>
</span><span class='line'>        <span class="kr">if</span> <span class="n">otherDiv</span> <span class="o">==</span> <span class="n">lower</span>
</span><span class='line'>        <span class="kr">then</span>
</span><span class='line'>          <span class="c1">-- Special case: we reach a square divisor</span>
</span><span class='line'>          <span class="p">(</span><span class="kt">M</span><span class="o">.</span><span class="n">insert</span> <span class="n">n</span> <span class="p">(</span><span class="n">lower</span> <span class="kt">:</span> <span class="n">listDivs</span><span class="p">)</span> <span class="n">knownDivs</span><span class="p">,</span> <span class="n">lower</span> <span class="kt">:</span> <span class="n">listDivs</span><span class="p">)</span>
</span><span class='line'>          <span class="c1">-- Ok, we need to know if we&#39;ve seen the bigger number before</span>
</span><span class='line'>        <span class="kr">else</span> <span class="kr">case</span> <span class="kt">M</span><span class="o">.</span><span class="n">lookup</span> <span class="n">otherDiv</span> <span class="n">knownDivs</span> <span class="kr">of</span>
</span><span class='line'>          <span class="kt">Just</span> <span class="n">oldDivlist</span> <span class="ow">-&gt;</span>
</span><span class='line'>            <span class="c1">-- We&#39;re done!</span>
</span><span class='line'>            <span class="kr">let</span> <span class="n">newDivlist</span> <span class="ow">=</span> <span class="n">nub</span> <span class="o">$</span> <span class="p">(</span><span class="n">lower</span> <span class="kt">:</span> <span class="n">listDivs</span><span class="p">)</span> <span class="o">++</span> <span class="p">(</span><span class="n">multiply</span> <span class="n">lower</span> <span class="n">oldDivlist</span><span class="p">)</span>
</span><span class='line'>            <span class="kr">in</span>
</span><span class='line'>              <span class="p">(</span><span class="kt">M</span><span class="o">.</span><span class="n">insert</span> <span class="n">n</span> <span class="n">newDivlist</span> <span class="n">knownDivs</span><span class="p">,</span> <span class="n">newDivlist</span><span class="p">)</span>
</span><span class='line'>          <span class="kt">Nothing</span> <span class="ow">-&gt;</span> <span class="n">divisorHelper</span> <span class="n">n</span> <span class="p">(</span><span class="n">lower</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">otherDiv</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">knownDivs</span> <span class="p">(</span><span class="n">lower</span> <span class="kt">:</span> <span class="n">otherDiv</span> <span class="kt">:</span> <span class="n">listDivs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">divisors</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Map</span> <span class="kt">Int</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Map</span> <span class="kt">Int</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span>
</span><span class='line'><span class="nf">divisors</span> <span class="n">n</span> <span class="n">knownDivs</span> <span class="ow">=</span> <span class="n">divisorHelper</span> <span class="n">n</span> <span class="mi">1</span> <span class="n">n</span> <span class="n">knownDivs</span> <span class="kt">[]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">listSquaredHelper</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Map</span> <span class="kt">Int</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)]</span> <span class="ow">-&gt;</span> <span class="p">[(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)]</span>
</span><span class='line'><span class="nf">listSquaredHelper</span> <span class="n">lower</span> <span class="n">upper</span> <span class="n">knownDivs</span> <span class="n">sqList</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">if</span> <span class="n">lower</span> <span class="o">&gt;</span> <span class="n">upper</span>
</span><span class='line'>  <span class="kr">then</span>
</span><span class='line'>    <span class="n">sqList</span>
</span><span class='line'>  <span class="kr">else</span>
</span><span class='line'>    <span class="kr">let</span> <span class="p">(</span><span class="n">newKnownDivs</span><span class="p">,</span> <span class="n">divs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">divisors</span> <span class="n">lower</span> <span class="n">knownDivs</span>
</span><span class='line'>        <span class="n">s</span> <span class="ow">=</span> <span class="n">sumSq</span> <span class="n">divs</span>
</span><span class='line'>    <span class="kr">in</span>
</span><span class='line'>      <span class="kr">if</span> <span class="n">isSquare</span> <span class="n">s</span>
</span><span class='line'>      <span class="kr">then</span>
</span><span class='line'>        <span class="n">listSquaredHelper</span> <span class="p">(</span><span class="n">lower</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="n">upper</span> <span class="n">newKnownDivs</span>  <span class="p">((</span><span class="n">lower</span><span class="p">,</span><span class="n">s</span><span class="p">)</span><span class="kt">:</span><span class="n">sqList</span><span class="p">)</span>
</span><span class='line'>      <span class="kr">else</span>
</span><span class='line'>        <span class="n">listSquaredHelper</span> <span class="p">(</span><span class="n">lower</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="n">upper</span> <span class="n">newKnownDivs</span> <span class="n">sqList</span>
</span><span class='line'>
</span><span class='line'><span class="nf">listSquared</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)]</span>
</span><span class='line'><span class="nf">listSquared</span> <span class="n">m</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">reverse</span> <span class="o">$</span> <span class="n">listSquaredHelper</span> <span class="n">m</span> <span class="n">n</span> <span class="kt">M</span><span class="o">.</span><span class="n">empty</span> <span class="kt">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I clearly have a long way to go in understanding the “why” of Haskell performance. My initial solution was much, uh &hellip; simpler. I didn&rsquo;t save it but I translated that into Clojure, which looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">sumdivsq.core</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">is-square</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">== </span><span class="nv">n</span> <span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nf">Math/sqrt</span> <span class="nv">n</span><span class="p">))</span> <span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sum-sq</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">lst</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">Math/pow</span> <span class="nv">%</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">lst</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">divisors</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">== </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">conj </span><span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">== </span><span class="mi">0</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="nv">%</span><span class="p">))</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="mi">2</span><span class="p">))))</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">list-squared</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">m</span> <span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">lfh</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">ssq</span> <span class="p">(</span><span class="nf">sum-sq</span> <span class="p">(</span><span class="nf">divisors</span> <span class="nv">n</span><span class="p">))]</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">is-square</span> <span class="nv">ssq</span><span class="p">)</span>
</span><span class='line'>                <span class="p">[</span><span class="nv">n</span>, <span class="nv">ssq</span><span class="p">])))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">keep</span> <span class="o">#</span><span class="p">(</span><span class="nf">lfh</span> <span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="nv">m</span> <span class="nv">n</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Certainly <em>looks</em> very nice, and it passed all the tests, but I was too impatient to begin optimizing it, and left this one behind too &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Thinking]]></title>
    <link href="http://agam.github.io/blog/2016/03/02/object-thinking/"/>
    <updated>2016-03-02T23:59:30-08:00</updated>
    <id>http://agam.github.io/blog/2016/03/02/object-thinking</id>
    <content type="html"><![CDATA[<p>I picked up <a href="http://www.amazon.com/Object-Thinking-Developer-Reference-David/dp/0735619654"><em>&ldquo;Object Thinking&rdquo;</em></a> by David West recently, which is an unusual computer programming text, in that it devotes much (most?) of its pages to &ldquo;philosophy&rdquo;.</p>

<p>Somewhere towards the beginning, there&rsquo;s this example of writing a program to count the frequencies of words, first in Pascal, then in Smalltalk written like Pascal, and finally in Smalltalk written in the &ldquo;proper&rdquo; OO style.</p>

<p>I thought I&rsquo;d attempt the same but with Go and Dart instead &hellip;</p>

<p><strong>Note (1)</strong>: this is <em>not</em> about one language being better than another or something of the sort; the point is rather that the style is independent of the language, is meant only to contrast (in the author&rsquo;s opinion) purely procedural vs purely object-oriented styles of programming.</p>

<p><strong>Note (2)</strong>: some of the code below may be idiomatic, don&rsquo;t get upset, this is just for fun, I&rsquo;m trying to match the original Pascal and Smalltalk as closely as possible.</p>

<p>First of all, the classic procedural program.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;bufio&quot;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;os&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Enter line: &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">bio</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdin</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">line</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bio</span><span class="p">.</span><span class="nx">ReadLine</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">f</span> <span class="p">[</span><span class="mi">26</span><span class="p">]</span><span class="kt">int</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">26</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">f</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">line</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">c</span> <span class="o">:=</span> <span class="nx">line</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>      <span class="nx">k</span> <span class="o">:=</span> <span class="nx">c</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">k</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">k</span> <span class="p">&lt;</span> <span class="mi">26</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">f</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="p">=</span> <span class="nx">f</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Frequencies :-&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">26</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="nx">f</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second, a language that supports object-orientation, but used in a procedural style.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">import</span> <span class="s1">&#39;dart:io&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">(</span><span class="m">26</span><span class="p">);</span>
</span><span class='line'>  <span class="n">stdout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;Enter line: &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">line</span> <span class="o">=</span> <span class="n">stdin</span><span class="p">.</span><span class="n">readLineSync</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">26</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="n">lowerCaseA</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span><span class="p">.</span><span class="n">codeUnitAt</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">line</span><span class="p">.</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="n">c</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">codeUnitAt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="n">k</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="n">lowerCaseA</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="m">26</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">f</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s2">&quot;Frequencies :-&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">stdout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Third, an object-oriented program (or, you could call it a functional program too, and then make a meta-point that I won&rsquo;t).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="k">import</span> <span class="s1">&#39;dart:io&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Map</span><span class="p">();</span>
</span><span class='line'>  <span class="n">stdout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;Enter line: &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">line</span> <span class="o">=</span> <span class="n">stdin</span><span class="p">.</span><span class="n">readLineSync</span><span class="p">();</span>
</span><span class='line'>  <span class="n">line</span><span class="p">.</span><span class="n">runes</span><span class="p">.</span><span class="n">toList</span><span class="p">().</span><span class="n">forEach</span><span class="p">((</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">f</span><span class="p">.</span><span class="n">putIfAbsent</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="m">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">f</span><span class="p">[</span><span class="n">e</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s2">&quot;Frequencies :-&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, the original analogy might not be preserved very well, because (1) Dart is <em>way</em> more verbose than Smalltalk, and (2) I showed whole programs here, rather than relevant fragments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Prog/Math/Sci summary: February 2016]]></title>
    <link href="http://agam.github.io/blog/2016/02/26/monthly-prog-slash-math-slash-sci-summary-february-2016/"/>
    <updated>2016-02-26T23:57:08-08:00</updated>
    <id>http://agam.github.io/blog/2016/02/26/monthly-prog-slash-math-slash-sci-summary-february-2016</id>
    <content type="html"><![CDATA[<p>I said I’d pick a better name, but I couldn’t, so I picked a <em>different</em> name instead. Anyway, here is February’s badly curated list:</p>

<ul>
<li>You may have come across <a href="http://www.templeos.org">TempleOS</a>, one of those crazy things made by crazy people, and it looks like <a href="http://web.archive.org/web/20060702135534/http://www.losethos.com/"><em>“LoseThos”</em></a> was a predecessor (<strong>note</strong>: that it is available at all is due to the ever-amazing “Wayback Machine”)</li>
</ul>


<blockquote><p><strong>You used to buy a computer to program. They didn&rsquo;t do much else</strong>. LoseThos is intended for hobbiest programmers. A working knowledge of C programming is required. It more or less runs on least common denominator PC hardware without networking or the Internet. It is retro in some respects, having no security. As a programmer, I like having full access to my machine &mdash; being able to turn-off interrupts or do direct disk block access. It is highly textual, so things can be scripted.  It boots fast, and you can power-off whenever you feel like, but just don&rsquo;t do it during disk writes.</p></blockquote>

<ul>
<li><p>Someone pointed me to the <a href="https://lab.open.wolframcloud.com/app/">“Wolfram Programming Lab”</a> … I’ve only looked at it superficially, but it might be a good alternative to <em>Scratch</em>, as an initial introduction to programming that “makes things happen”</p></li>
<li><p>This is a theme that I like to share and re-share: Anil Dash talks about <a href="https://www.youtube.com/watch?v=9KKMnoTTHJk">“The Web We Lost”</a> (tl;dr: <strong>the internet we have is not the internet we were promised</strong>)</p></li>
<li><p>I was no fan of Robert Martin, perhaps because I wrongly associated him with excessive “bureaucracy” in software engineering, but it’s clear I was wrong, because <a href="http://www.infoq.com/presentations/history-future-programming-languages"><em>this</em></a> is a <em>great</em> talk, and is one of the few people (other than, say, Alan Kay), who’ve made this connection between the changes in the “culture” of software development and its “popularization”.</p></li>
<li><p><a href="https://www.youtube.com/watch?v=K13_sWm_gZw">This talk</a> by John McCarthy wasn’t particularly interesting, except for a choice quote that’s sure to offend certain “GPL fundamentalists” out there:</p></li>
</ul>


<blockquote><p>I think that <strong>Richard Stallman who has been a hero in many respects, has been a negative force in his view that anything/everything should be free and no one should have to pay for anything unless Stallman would think of a mechanism</strong> … where my daughter who is a professional writer would still be able to make money.</p></blockquote>

<ul>
<li><p>Daniel Spiewak talks about <a href="http://www.infoq.com/presentations/post-functional-scala-clojure-haskell">“Living in a Post-Functional World”</a>. I thought this would be meh, but turned out to be very insightful, and also indicates how close FP and OO really are. More to the point, <strong>since modularity is non-negotiable, any solution to the problem of modularity drags in OO-ish stuff into an FP language</strong>.</p></li>
<li><p>Someone (thanks, @Beobachter!) suggested using <a href="http://learn.getgrav.org/basics/what-is-grav"><em>Grav</em></a>, an intermediate alternative to a fully-static blog (what I have right now), and a fully-dynamic one (e.g. Wordpress), but I’ve been too lazy to investigate how to make the switch.</p></li>
<li><p>Here is a (very, very humorous!) piece in The Register, <a href="http://www.theregister.co.uk/2016/01/13/stob_remember_the_monoids/"><em>”Learn you Func Prog on five minute quick!”</em></a></p></li>
</ul>


<blockquote><p>The object-oriented era of coding is at last drawing to an inevitable and shameful close. We can – and we must! – all join hands and skip gaily into a brave new world, where sloppy state and careless side effects are excised without ruth.</p>

<p>Now every program, from humble Android applet to mighty engine-pollution-test-falsifier, must slough off ridiculous trappings and clumsy complexities of objectivity, and float elegantly forwards down the shiny new functional pipeline – the one, true alimentary canal of code to concurrent computing paradise.</p></blockquote>

<p>And so on.</p>

<ul>
<li>Finally, Gilad Bracha’s <a href="http://www.amazon.com/Dart-Programming-Language-Gilad-Bracha/dp/0321927702?tag=duckduckgo-osx-20">new book</a> is very enticing; I’ve placed it on my “soon-to-read-unless-I’m-lying-to-myself-about-my-available-free-time” list, and so should you.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Considering moving away from a static blog ...]]></title>
    <link href="http://agam.github.io/blog/2016/02/08/considering-moving-away-from-a-static-blog-dot-dot-dot/"/>
    <updated>2016-02-08T15:44:10-08:00</updated>
    <id>http://agam.github.io/blog/2016/02/08/considering-moving-away-from-a-static-blog-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>This blog has been my longest continuous online presence (beginning as a <em>Hakyll</em> blog in 2012 before switching to <em>Jekyll</em> (well, <em>Octopress</em>) about a year later). I liked the whole &ldquo;edit in markdown in a terminal and use <code>git</code> for everything&rdquo; flow.</p>

<p>Unfortunately, time is scarcer now, my free time is less structured, and I often find myself away from an actual terminal, though equipped with a capable smartphone. For my <a href="https://abacusnoirform.wordpress.com">more-general-purpose blog</a>, I used Wordpress and it&rsquo;s worked out pretty well so far, because I can &ldquo;write on the go&rdquo;, and I&rsquo;d like to be able to do the same for this blog too.</p>

<p>So I haven&rsquo;t decided exactly how and when to migrate (because hey, I do want to keep what I have) to a &ldquo;dynamic blog&rdquo; (funny phrase, that), but I definitely want to do it sometime this year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Programming summary: January 2016]]></title>
    <link href="http://agam.github.io/blog/2016/01/25/monthly-programming-summary-january-2016/"/>
    <updated>2016-01-25T23:22:06-08:00</updated>
    <id>http://agam.github.io/blog/2016/01/25/monthly-programming-summary-january-2016</id>
    <content type="html"><![CDATA[<p>Again, this isn’t really restricted to <em>Programming</em> per se, but more generally “computer-related stuff”. Next time, I’ll pick a better name. Until then, here are a few interesting links I came across last month, in no  particular order:</p>

<ul>
<li>The Handbook of Lisp Functions (cover page below): a <a href="http://www.softwarepreservation.org/projects/LISP/mblisp/Handbook_of_LISP_Functions.pdf">technical report</a> from <em>1961</em>.</li>
</ul>


<p><img src="https://doc-14-48-docs.googleusercontent.com/docs/securesc/o7m1hv4d96s4jtg9a81aobcff174890t/49eh1go9f5v2i53agksqnv1ghn4m8mj9/1453780800000/03675759775475626385/03675759775475626385/0B7bvhABhpDqmMmRPQmRvWXpkZTg"></p>

<ul>
<li><p>Digression on learning new languages: Ugh, I’m too embarassed to even write this. I keep changing my mind about what I like more. I thought this was going to be “the year of Clojure” for me, but then <a href="http://www.amazon.com/Dart-Programming-Language-Gilad-Bracha/dp/0321927702#">Gilad Bracha’s book</a> came out and now I’m torn again (Can I have them <em>both</em>? Maybe, but I fear I don’t have that kind of time anymore :P)</p></li>
<li><p>Busting the myths behind MicroKernels: <a href="http://blog.darknedgy.net/technology/2016/01/01/0/"><em>”Microkernels are slow and Elvis didn’t do no drugs”</em></a></p></li>
<li><p>Here is a paper from 1982 (<a href="http://www.smecc.org/The%20Architecture%20%20of%20the%20Burroughs%20B-5000.htm"><em>”The Architecture of the Burroughs B5000 &ndash; 20 Years Later and Still Ahead of the Times?”</em></a>), which was <em>even then</em> lamenting the sorry state of hardware, and only seems quaint now (as in <em>”why would you do things different?”</em>)</p></li>
<li><p>Various ways to make Clojure programming more productive: <a href="http://dev.solita.fi/2014/03/18/pimp-my-repl.html"><em>”Pimp My REPL”</em></a></p></li>
<li><p>I had a bunch of entertaining blog posts by Crista Lopez in the past (e.g. <a href="http://tagide.com/blog/fiction/jedi-masters/"><em>”Jedi Masters”</em></a>), but was blown away by this set of slides. You’re a programmer, you want to be a programmer for life, you <em>have</em> to read this: <a href="http://gotocon.com/dl/goto-aar-2013/slides/CristinaVideiraLopes_ExercisesInStyle.pdf"><em>”Exercises in Programming Style”</em></a>. And if you really like it, <a href="http://www.amazon.com/Exercises-Programming-Style-Cristina-Videira/dp/1482227371">get the book</a>.</p></li>
<li><p>Came across this intriguing indie film trailer (<a href="https://vimeo.com/147111732"><em>”TraceRoute”</em></a>), though I haven’t gotten around to seeing the movie yet (the writer/protagonist navigates “… the ghosts of nerddom’s past present and future …”). Dunno, added it to my “to watch” list.</p></li>
<li><p>Obviously, the X-Files is back. If you like this sort of stuff, the first episode <a href="http://www.fox.com/watch/607308867569/7756658688">is free to watch</a> on Fox. Go watch it :)</p></li>
<li><p>A couple of articles for “historical interest”. The first is the New York Times reporting on … <a href="http://www.nytimes.com/1996/01/22/business/the-new-york-times-introduces-a-web-site.html">the opening of its web site, in 1996!</a>. But really, you skip ahead to the very last line for your dose of irony-or-tragedy: <em>“The market is booming for newspapers on the World Wide Web”</em>. Ouch.</p></li>
<li><p>The second is hilarious, from even further back (<a href="http://www.nytimes.com/1984/12/25/science/value-of-windowing-is-questioned.html"><em>”Value of Windowing is Questioned”</em></a>, 1984!!), and here the Times speculates on the dubious value of a graphical user interface. The opening line asks: <em>“Does anyone do windows any more?”</em>, and the article concludes by predicting “doom” for the upcoming new OS by Microsoft. I thought I’d see if the author had time to reflect on his past predictions, so I looked through the newspaper’s archives, but it looks like he stopped writing technology articles in 1987 and switched to Food and Travel. Anyway.</p></li>
</ul>


<p>Here’s a “quote of the month” for you:</p>

<blockquote><p>Science is much more ‘sloppy’ and ‘irrational’ than its methodological image.</p></blockquote>

<p>(Paul Feyerabend, <em>Against Method</em>, and I meant to refer to the so-called science of computers)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily programming: simple list stuff]]></title>
    <link href="http://agam.github.io/blog/2016/01/11/daily-programming-simple-list-stuff/"/>
    <updated>2016-01-11T22:36:12-08:00</updated>
    <id>http://agam.github.io/blog/2016/01/11/daily-programming-simple-list-stuff</id>
    <content type="html"><![CDATA[<p>Since I&rsquo;m warming up to Clojure this year, why not get started with the &ldquo;dailyprogrammer&rdquo; subreddit again?</p>

<p>So here&rsquo;s a (noobish) solution to <a href="https://www.reddit.com/r/dailyprogrammer/comments/40h9pd/20160111_challenge_249_easy_playing_the_stock/">this problem</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">dailyprog.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.string</span> <span class="ss">:as</span> <span class="nv">str</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">input-&gt;float</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">input</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">Float/parseFloat</span> <span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nf">str/split</span> <span class="nv">input</span> <span class="o">#</span><span class="s">&quot; &quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">difference</span>
</span><span class='line'>  <span class="s">&quot;Given a list of prices, a price in the list and its index, return the best price to sell it at&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">lst</span> <span class="nb">index </span><span class="nv">buy-price</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">max-sell-price</span> <span class="p">(</span><span class="nb">apply max </span><span class="p">(</span><span class="nb">drop index </span><span class="nv">lst</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:buy-price</span> <span class="nv">buy-price</span>
</span><span class='line'>    <span class="ss">:sell-price</span> <span class="nv">max-sell-price</span>
</span><span class='line'>    <span class="ss">:difference</span> <span class="p">(</span><span class="nb">- </span><span class="nv">max-sell-price</span> <span class="nv">buy-price</span><span class="p">)}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">difference-vector</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">lst</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">map-indexed</span> <span class="p">(</span><span class="nb">partial difference </span><span class="nv">lst</span><span class="p">)</span> <span class="nv">lst</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">println</span><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nb">slurp </span><span class="p">(</span><span class="nb">first </span><span class="nv">args</span><span class="p">))</span>
</span><span class='line'>                <span class="nv">input-&gt;float</span>
</span><span class='line'>                <span class="nv">difference-vector</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">apply max-key </span><span class="ss">:difference</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>and it runs like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; lein run /tmp/challenge-input
</span><span class='line'><span class="o">{</span>:buy-price 8.03, :sell-price 10.02, :difference 1.9900007247924805<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure from the ground up]]></title>
    <link href="http://agam.github.io/blog/2016/01/06/clojure-from-the-ground-up/"/>
    <updated>2016-01-06T13:14:57-08:00</updated>
    <id>http://agam.github.io/blog/2016/01/06/clojure-from-the-ground-up</id>
    <content type="html"><![CDATA[<p>It&rsquo;s time for the same old new year resolution again: going to stop randomly skimming new languages and focus on something in depth.</p>

<p>This time, without loss of generality (hopefully!), I picked Clojure (<em>again ?</em>).</p>

<p>Found this nice series of posts called <a href="https://aphyr.com/posts/301-clojure-from-the-ground-up-welcome"><em>&ldquo;Clojure from the ground up&rdquo;</em></a>.</p>

<p>The best part is that unlike other random free tutorials online, this one has exercises.</p>

<p>For example, <a href="https://aphyr.com/posts/306-clojure-from-the-ground-up-state">the post that introduces concurrency primitives</a> asks us to write our own <code>future</code> macro.</p>

<p>I came up with this kludge:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">my-future</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">body</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">p#</span> <span class="p">(</span><span class="nf">promise</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.start</span> <span class="p">(</span><span class="nf">Thread.</span>
</span><span class='line'>      <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">f#</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="o">~@</span><span class="nv">body</span><span class="p">)</span>
</span><span class='line'>                   <span class="nv">r#</span> <span class="p">(</span><span class="nf">f#</span><span class="p">)]</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">deliver</span> <span class="nv">p#</span> <span class="nv">r#</span><span class="p">)))))</span>
</span><span class='line'>               <span class="nv">p#</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The expansion looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">clojure-noob.core&gt;</span> <span class="p">(</span><span class="nf">pprint</span> <span class="p">(</span><span class="nb">macroexpand </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">my-future</span> <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="mi">5000</span><span class="p">)</span> <span class="p">(</span><span class="nb">prn </span><span class="s">&quot;Hey ... &quot;</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">let*</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">p__9904__auto__</span> <span class="p">(</span><span class="nf">clojure.core/promise</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">.start</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">java.lang.Thread.</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">clojure.core/fn</span>
</span><span class='line'>       <span class="p">[]</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">clojure.core/let</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">f__9905__auto__</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">clojure.core/fn</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="mi">5000</span><span class="p">)</span> <span class="p">(</span><span class="nb">prn </span><span class="s">&quot;Hey ... &quot;</span><span class="p">))</span>
</span><span class='line'>          <span class="nv">r__9906__auto__</span> <span class="p">(</span><span class="nf">f__9905__auto__</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">clojure.core/deliver</span> <span class="nv">p__9904__auto__</span> <span class="nv">r__9906__auto__</span><span class="p">)))))</span>
</span><span class='line'>        <span class="nv">p__9904__auto__</span><span class="p">)</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it seems to work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">clojure-noob.core&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">x</span> <span class="p">(</span><span class="nf">my-future</span> <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="mi">5000</span><span class="p">)</span> <span class="p">(</span><span class="nb">prn </span><span class="s">&quot;Hey ... &quot;</span><span class="p">)))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;clojure-noob.core/x</span>
</span><span class='line'><span class="nv">clojure-noob.core&gt;</span> <span class="p">(</span><span class="nf">pprint</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="nv">&lt;Promise</span><span class="o">@</span><span class="mi">6</span><span class="nv">a1dc62</span><span class="err">:</span> <span class="ss">:not-delivered&gt;</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="s">&quot;Hey ... &quot;</span>
</span><span class='line'><span class="nv">clojure-noob.core&gt;</span>
</span><span class='line'><span class="nv">clojure-noob.core&gt;</span> <span class="p">(</span><span class="nf">pprint</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="nv">&lt;Promise</span><span class="o">@</span><span class="mi">6</span><span class="nv">a1dc62</span><span class="err">:</span> <span class="nv">nil&gt;</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s hoping to fun times ahead (and a <em>happy new year</em> to you too!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Programming summary: December 2015]]></title>
    <link href="http://agam.github.io/blog/2015/12/26/monthly-programming-summary-december-2015/"/>
    <updated>2015-12-26T20:46:30-08:00</updated>
    <id>http://agam.github.io/blog/2015/12/26/monthly-programming-summary-december-2015</id>
    <content type="html"><![CDATA[<p>A second installment of &ldquo;interesting stuff I came across this month&rdquo; &hellip;</p>

<p>(<em>Aside:</em> I shouldn&rsquo;t call this a &ldquo;programming&rdquo; summary, but I can&rsquo;t think of anything better &mdash; it&rsquo;s more of a &ldquo;math + science + computers&rdquo; newsletter)</p>

<ul>
<li><p>The highlight of the last month for me was the realization of the dream of an ultra-cheap computer, the <a href="https://www.raspberrypi.org/blog/raspberry-pi-zero/">Raspberry Pi Zero</a>, which is cheaper than several drinks at Starbucks.</p></li>
<li><p>Yes, ants displaying &ldquo;collective intelligence&rdquo; is old stuff (I first encountered a reference to it in the pages of <em>Godel, Escher, Bach</em>), but <a href="http://www.kurzweilai.net/army-ants-living-bridges-suggest-collective-intelligence">this article</a> is something else altogether, showing how &ldquo;living bridges&rdquo; are dynamically adjusted by the constituent ants, in response to foraaging needs.</p></li>
<li><p><em>&ldquo;Get Lamp&rdquo;</em> (<a href="https://www.youtube.com/watch?v=UwZxUGmqSOo">link to trailer</a>) is an interesting documentary on the history of interactive text-based fiction, mostly adventure games. If you&rsquo;ve ever telneted to a MUD, you will like this.</p></li>
<li><p>I lap up everything by Bret Victor, and hope for him to turn out as the Alan Kay of our time. <a href="https://medium.com/re-form/the-utopian-ui-architect-34dead42a28#.emrat4pnv">This</a> is aanother recent piece where he insists we haven&rsquo;t really <em>used</em> computers well at all.</p></li>
<li><p>Finally, <a href="http://www.popularmechanics.com/military/weapons/a18343/the-cannons-on-the-b-29-bomber-were-a-mid-century-engineering-masterpiece/">this Popular Mechanics article</a> blew me away &mdash; before there were &ldquo;real&rdquo; computers, the B-29 Superfortress had high-tech computing <em>way</em> ahead of its time, to remotely operate its gun turrets. Obligatory youtube video below:</p></li>
</ul>


<iframe width="560" height="315" src="https://www.youtube.com/embed/nskFayhBcy0" frameborder="0" allowfullscreen></iframe>


<p>This month&rsquo;s QOTM is from Bret Victor&rsquo;s piece above:</p>

<blockquote><p>Now we’re staring at computer screens and moving our hands on a keyboard, but it’s basically the same thing. <strong>We’re computer users thinking paper thoughts.”</strong></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Programming summary: November 2015]]></title>
    <link href="http://agam.github.io/blog/2015/11/27/monthly-programming-summary-november-2015/"/>
    <updated>2015-11-27T13:09:15-08:00</updated>
    <id>http://agam.github.io/blog/2015/11/27/monthly-programming-summary-november-2015</id>
    <content type="html"><![CDATA[<p>A second installment of &ldquo;interesting stuff I came across this month&rdquo; &hellip;</p>

<ul>
<li>A 1972 article in Rolling Stone magazine by Stewart Brand: <a href="http://www.wheels.org/spacewar/stone/rolling_stone.html"><em>&ldquo;Fanatic Life and Symbolic Death Among the Computer Bums&rdquo;</em></a>. If only the present had corresponded a little closer to the imagined future of the past, eh? :)</li>
</ul>


<blockquote><p>The hackers are the technicians of this science &ndash; <em>“It’s a term of derision and also the ultimate compliment.”</em> They are the ones who translate human demands into code that the machines can understand and act on. They are legion. <strong>Fanatics with a potent new toy</strong>. A mobile new-found elite, with its own apparat, language and character, its own legends and humor. Those magnificent men with their flying machines, scouting a leading edge of technology which has an odd softness to it; outlaw country, where rules are not decree or routine so much as the starker demands of what’s possible.</p></blockquote>

<ul>
<li><p>An excellent blog that was forced offline by vociferous commentors, but lives on in the depths of the Wayback Machine: <a href="http://web.archive.org/web/20140107054458/http://yinwang0.wordpress.com/"><em>&ldquo;Surely I am Joking&rdquo;</em></a> by Yin Wang. <em>All</em> the posts are good, my favorites are the ones on the downsides of &ldquo;pure&rdquo; FP and &ldquo;pure&rdquo; OOP (and <a href="http://web.archive.org/web/20140116155929/http://yinwang0.wordpress.com/2013/11/09/oop-fp">how the two are similar!</a>), the one on <a href="http://web.archive.org/web/20131127131340/http://yinwang0.wordpress.com/2012/09/16/what-is-a-program/"><em>&ldquo;what is a program?&rdquo;</em></a>, and the one on the <a href="http://web.archive.org/web/20140103011845/http://yinwang0.wordpress.com/2013/04/05/database/"><em>&ldquo;dark age of programming&rdquo;</em></a>.</p></li>
<li><p>A 1987 article in <em>&ldquo;Computer Language&rdquo;</em> magazine: <a href="http://bit-player.org/wp-content/extras/bph-publications/CompLang-1987-04-Hayes-mutant-lisps.pdf"><em>&ldquo;Mutant languages from the LISP lab&rdquo;</em></a> &mdash; just for fun, and an insight into the pre-Common Lisp era.</p></li>
<li><p>A humorous blog entry from 2009: <a href="http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html"><em>&ldquo;A Brief, Incomplete, and Mostly Wrong History of Programming Languages&rdquo;</em></a>, with a self-explanatory title.</p></li>
</ul>


<p>And finally, a &ldquo;quote-of-the-month&rdquo;. This one is short and succinct <em>Perlisism</em>:</p>

<blockquote><p><strong>Computer Science is embarrassed by the computer.</strong></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Programming summary: October 2015]]></title>
    <link href="http://agam.github.io/blog/2015/10/26/monthly-programming-summary/"/>
    <updated>2015-10-26T20:23:36-07:00</updated>
    <id>http://agam.github.io/blog/2015/10/26/monthly-programming-summary</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s the first installment in an experiment &mdash; writing a monthly roundup of a few things I read/saw/did this month that I found sort of interesting. I do something on my (general, non-programming-specific) <a href="http://abacusnoirform.com/">personal blog</a>, so I thought the same might be a useful exercise here too.</p>

<p>In no particular order:</p>

<ul>
<li><p>The &ldquo;Balloon edition&rdquo; of BYTE magazine <a href="https://archive.org/stream/byte-magazine-1981-08/1981_08_BYTE_06-08_Smalltalk#page/n0/mode/2up">from 1981</a> &hellip; it&rsquo;s amazing how this stuff is <em>still</em> a revolutionary idea (also, the advertisements from three decades ago are hilarious)</p></li>
<li><p><em>&ldquo;&lsquo;SHOULD I learn to program?&rsquo; and &lsquo;Do I have to learn to program?&rsquo; are two variants of the question probably most asked by people testing the waters of computer ownership. The answer usually boils down to an emphatic &lsquo;that depends &hellip;, but probably not.&rsquo;&rdquo;</em> Sounds relevant? Sounds current? In fact, this is from a New York Times article <a href="http://www.nytimes.com/1984/01/17/science/personal-computers-does-everyone-need-to-learn-programming.html">from 1984 (!)</a>, titled <em>&ldquo;Personal computers: Does everyone need to learn programming?&rdquo;</em> (there is a conclusion to be drawn from this, but I won&rsquo;t go there)</p></li>
<li><p>I read through Dijkstra&rsquo;s <a href="https://www.cs.utexas.edu/users/EWD/">notes</a> a while ago, here&rsquo;s <a href="https://www.vex.net/~trebla/ewd.html">someone else&rsquo;s curated version</a> of them.</p></li>
<li><p>A Google Tech Talk from 2007 by Alex Wright, on <a href="https://www.youtube.com/watch?v=72nfrhXroo8"><em>&ldquo;The Web That Wasn&rsquo;t&rdquo;</em></a></p></li>
</ul>


<p>I&rsquo;ll leave you with this quote from Alan Kay:</p>

<blockquote><p>Perhaps it was commercialization in the 1980s that killed off the next expected new thing. Our plan and our hope was that the next generation of kids would come along and do something better than Smalltalk around 1984 or so. We all thought that the next level of programming language would be much more strategic and even policy-oriented and would have much more knowledge about what it was trying to do. But a variety of different things conspired together, and that next generation actually didn’t show up. <strong>One could actually argue—as I sometimes do—that the success of commercial personal computing and operating systems has actually led to a considerable retrogression in many, many respects.</strong></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tiny Taste of J]]></title>
    <link href="http://agam.github.io/blog/2015/10/08/a-taste-of-j/"/>
    <updated>2015-10-08T23:42:45-07:00</updated>
    <id>http://agam.github.io/blog/2015/10/08/a-taste-of-j</id>
    <content type="html"><![CDATA[<p>I recently stumbled across APL and J, as mentioned in a previous post, and began reading a bit of <a href="http://www.jsoftware.com/help/learning/contents.htm">an introductory book</a>.</p>

<p>A couple of days ago, I came across this series of coding tasks on a blog called &ldquo;Programming Praxis&rdquo;, and I picked <a href="http://programmingpraxis.com/2015/10/06/the-iron-bar/">the most recent one</a> as an example to try out some J noobism.</p>

<p>The example is simple but contrived (and <em>median</em> is a terrible name) &mdash; we basically have to write a function that that takes two arguments and either increments, decrements or does nothing, with the first argument. In J, like so many other tasks, this is essentially one line (12 characters, to be precise).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>median =: [ + (* @: -)~</span></code></pre></td></tr></table></div></figure>


<p>To give some idea on what&rsquo;s going on here, this expression can be broken, first, into three parts: <code>[</code>, <code>+</code>, <code>(* @: -)~</code>. Let&rsquo;s start with the sub-expression within the parentheses: <code>* @: -</code>.</p>

<p>Here, <code>*</code> is a <em>verb</em> (think: <em>&ldquo;function&rdquo;</em>) that returns 1, 0, or -1 depending on the sign of its argument. So <code>* 4</code> is <code>1</code>, <code>* _2</code> (that&rsquo;s how -2 is represented) is <code>_1</code>, <code>* 0</code> is <code>0</code>.</p>

<p><code>-</code> is the only thing that does what you would expect: <code>4 - 3</code> is <code>1</code>, and so on.</p>

<p><code>@:</code> is a <em>conjunction</em>, such that <code>f @: g</code> when applied to <em>x</em> has the effect of <em>f (g x)</em>.</p>

<p><code>]</code> is a verb that when given two values, always selects the first of the two.</p>

<p><code>~</code> is an <em>adverb</em> that reverses the order of arguments to its preceding verb. So while <code>%</code> applied to <em>x</em> and <em>y</em> yields <em>(x % y)</em>, <code>%~</code> applied to <em>x</em> and <em>y</em> yields <em>(y % x)</em>.</p>

<p>Now things get a little tricky (but only a <em>little</em>; we&rsquo;re barely scratching the surface of J here). The expression for median can be seen as three verbs laid down together, and this is interpreted as a <em>&ldquo;train&rdquo;</em> of verbs, or more specifically in this case, a <em>&ldquo;dyadic fork&rdquo;</em>.</p>

<p>Basically, <em>(f g h)</em> when applied to two values <em>x</em> and <em>y</em>, is equivalent to <em>g</em> applied to the result of <em>f</em> applied to <em>x</em> and <em>y</em>, and the result of <em>h</em> applied to <em>x</em> and <em>y</em>. Or, using infix notation,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x (f g h) y   is equivalent to    (x f y) g (x h y)</span></code></pre></td></tr></table></div></figure>


<p>The reason <em>x</em> and <em>y</em> aren&rsquo;t present in the definition of <em>median</em> is that it&rsquo;s defined using a &ldquo;tacit&rdquo; form rather than an &ldquo;explicit&rdquo; form (somewhat similar to &ldquo;point-free&rdquo; definitions in Haskell).</p>

<p>Putting it all together now, when applied to two arguments, we get the equivalent of <code>(x [ y) + (* (y - x))</code>, which gives <code>x + 1</code> when <em>y > x</em>, <code>x + 0</code> when <em>y == x</em>, and <code>x + (-1)</code> when <em>y &lt; x</em>, which is what we want.</p>

<p>If you like this sort of thing, head over to <a href="http://www.jsoftware.com/">jsoftware.com</a> for more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Types as constraints ...]]></title>
    <link href="http://agam.github.io/blog/2015/10/02/types-as-constraints-dot-dot-dot/"/>
    <updated>2015-10-02T00:13:54-07:00</updated>
    <id>http://agam.github.io/blog/2015/10/02/types-as-constraints-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>(Don&rsquo;t ask me why or how I got here, but &hellip;) I came across a very old (Nov 1980) <a href="http://ml.cddddr.org/lisp-forum/msg00022.html">post in a mailing list</a> that might be related to our current confusion on the different interpretations of what <em>types</em> mean:</p>

<blockquote><p> The second way is to keep careful tabs on what functions call this one and the way that they have to be changed to match changes in this function.  It is exactly this latter type of control (auditing function) that I mean should be included in NIL (or whatever).  I am not against extending the language any more than I am against GOTOs (which is not very much).</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Mathematical Notation ...]]></title>
    <link href="http://agam.github.io/blog/2015/09/27/on-mathematical-notation-dot-dot-dot/"/>
    <updated>2015-09-27T22:32:17-07:00</updated>
    <id>http://agam.github.io/blog/2015/09/27/on-mathematical-notation-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve always had a vague lingering feeling about mathematical notation being at times inconsistent, excessive, duplicated, and so on. Some of it is of course due to me not knowing enough math, and not knowing math well enough, but some of it, I was recently relieved to find out, was a concern shared by people smarter than me too.</p>

<p>Unfortunately, I&rsquo;m now <em>more</em> confused since the two solutions are (IMO) at odds with each other. Both share the common goal of replacing outdated notation by making it <em>&ldquo;executable&rdquo;</em>, and thus more precise, but the way they go about it is different.</p>

<p>Or so it seems to me, at least. Perhaps someone out there can explain it better to me someday. The two people I came across are, (of course?) Ken Iverson and Gerald Sussman, and the two ideas can be experienced by reading <a href="http://www.jsoftware.com/papers/tot.htm"><em>&ldquo;Notation as a Tool of Thought&rdquo;</em></a>, and watching <a href="https://www.youtube.com/watch?v=arMH5GjBwUQ"><em>&ldquo;The Role of Programming in the Formulation of Ideas&rdquo;</em></a>. Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Field of Languages ...]]></title>
    <link href="http://agam.github.io/blog/2015/09/17/the-field-of-languages-dot-dot-dot/"/>
    <updated>2015-09-17T22:02:44-07:00</updated>
    <id>http://agam.github.io/blog/2015/09/17/the-field-of-languages-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Last year, I spent some time trying out Haskell, Ocaml, Clojure, Dart, Shen, and ClozureCL. I thought I was done surveying the field, but I had barely scratched the surface, and realizing this was quite depressing. There are entire <em>kinds</em> of language paradigms I have no experience of, such as:</p>

<ul>
<li><strong>Forth</strong>: All I&rsquo;ve done is read about people&rsquo;s experience with it, it has always seemed too alien to me.</li>
<li><strong>Smalltalk</strong>: I installed Pharo and took the basic &ldquo;Prof. Stef&rdquo; tutorial, but then stopped before I could really try anything concrete.</li>
<li><strong>APL/J</strong>: Never seemed like anything but line noise, but then I read <a href="https://scottlocklin.wordpress.com/2012/09/18/a-look-at-the-j-language-the-fine-line-between-genius-and-insanity/">this post on J</a> and saw <a href="https://www.youtube.com/watch?v=PlM9BXfu7UY">this video</a> on Dyalog, and I&rsquo;m curious about it</li>
</ul>


<p><em>&ldquo;The lyf so short, the craft so long to lerne&rdquo;</em> :(</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internet Ironies and Idiosyncrasies]]></title>
    <link href="http://agam.github.io/blog/2015/09/12/bubbles-and-busts-a-tale-of-two-snapshots/"/>
    <updated>2015-09-12T23:51:01-07:00</updated>
    <id>http://agam.github.io/blog/2015/09/12/bubbles-and-busts-a-tale-of-two-snapshots</id>
    <content type="html"><![CDATA[<p>A couple of snippets dug up from the past &hellip;</p>

<h2>The Anatomy of a Search Engine</h2>

<p>(original <a href="http://infolab.stanford.edu/~page/google.html">here</a>, emphasis mine, presented without comment)</p>

<blockquote><p>Currently, the predominant business model for commercial search engines is advertising. <em>The goals of the advertising business model do not always correspond to providing quality search to users</em>. For example, in our prototype search engine the top result for cellular phone is &ldquo;The Effect of Cellular Phone Use Upon Driver Attention&rdquo;, a study which explains in great detail the distractions and risk associated with conversing on a cell phone while driving. This search result came up first because of its high importance as judged by the PageRank algorithm, an approximation of citation importance on the web [Page, 98]. It is clear that <em>a search engine which was taking money for showing cellular phone ads would have difficulty justifying the page that our system returned to its paying advertisers</em>. For this type of reason and historical experience with other media [Bagdikian 83], <strong>we expect that advertising funded search engines will be inherently biased towards the advertisers and away from the needs of the consumers.</strong></p></blockquote>

<h2>&ldquo;Other people&rdquo; on the Internet</h2>

<p>(original <a href="http://chadfowler.com/blog/2003/02/16/google-blogs/">here</a>, emphasis mine)</p>

<blockquote><p> We’ve had the technological capability to “blog” since the creation of the Worldwide Web. The difference now is that it’s getting easier and easier to do. That’s the shift. <strong>More and more content is getting created, and the content is getting increasingly time sensitive in nature</strong>. Given a user-friendly piece of software and a 15 minute introduction, my grandmother or my teenage nephew is just as capable of publishing content on the open internet as I am. And, given the relative free time that each of them probably enjoys, you might say that they’re quite a bit more capable than I am.</p>

<p>So, does this have value? I’d say the answer is “yes” and “no”, with a much heavier weight on the “no”. For my grandmother, in this example, it’s “yes”. Maybe she just wants to write for herself (nevermind the fact that she can do that in a paper journal where people don’t have to read it). Maybe she wants to keep her globally distributed family up to date on the events of her life. To be able to do these things easily is great for her.</p>

<p><strong>But, for the internet as a whole, the answer is “no”</strong>. Nothing against my grandmother of course, but this “blogging” phenomenon is opening the flood gates for anyone with an internet connection to “muddy up” the information available on the internet even further than it already is. While bloggers are probably adding some valuable content to the internet, they’re also increasing the number of sites that fall into my #1,2,3 categories mentioned above. In fact, Pyra itself has 1.1 million registered users, out of which they estimate that only the 200,000 are actively maintaining sites. This means that while Blogger brings us 200,000 sites that at least don’t fall into the “inactive” category (but may still be generally useless or irrelevant), <strong>it has also helped to dilute the internet</strong> with about 900,000 dormant sites.</p>

<p>Given those numbers (about 80% of Blogger sites in category #3 alone), I’d have to say that <strong>“blogging” is more of a problem than it is something to be excited about</strong>.</p></blockquote>

<p>More than a decade ago, and people have moved on from blogs (<em>yawn?</em>) to a variety of comfortable walled gardens, but substitute Twitter above and add a few zeros to the numbers here, and you get a rough idea of what has (or has not) changed since then.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSD on GCE (the last post)]]></title>
    <link href="http://agam.github.io/blog/2015/08/18/freebsd-on-gce-the-last-post/"/>
    <updated>2015-08-18T22:59:29-07:00</updated>
    <id>http://agam.github.io/blog/2015/08/18/freebsd-on-gce-the-last-post</id>
    <content type="html"><![CDATA[<p>After <a href="blog/2014/12/14/trying-out-freebsd-and-failing-at-it/">one unsuccessful attempt</a> and one <a href="blog/2015/06/13/freebsd-on-google-compute-engine/">hack-ey successful one</a>, getting FreeBSD up and running on GCE is now a one-liner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gcloud compute instances create pandora --image freebsd-10-2-release-amd64 --image-project<span class="o">=</span>freebsd-org-cloud-dev
</span><span class='line'><span class="nv">$ </span>gcloud compute ssh agam@pandora
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and that&rsquo;s it. <strong>Kudos</strong> to whoever made this happen!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A BigQuery example]]></title>
    <link href="http://agam.github.io/blog/2015/08/11/a-bigquery-example/"/>
    <updated>2015-08-11T14:55:30-07:00</updated>
    <id>http://agam.github.io/blog/2015/08/11/a-bigquery-example</id>
    <content type="html"><![CDATA[<p>I had read about BigQuery but hadn&rsquo;t had a chance to use the external product yet. This week I came across some article about Uber and taxis etc, and it had a link to recently released data by <a href="http://www.nyc.gov/html/tlc/html/about/statistics.shtml">The NYC Taxi and Limousine Commission</a>. In addition to directly downloading the data, or looking at it through <a href="https://data.cityofnewyork.us/data?agency=Taxi+and+Limousine+Commission+%28TLC%29&amp;cat=&amp;type=new_view&amp;browseSearch=&amp;scope">NYC OpenData</a>, you can also <a href="https://bigquery.cloud.google.com/table/nyc-tlc:yellow.trips_2015">play around with it using BigQuery</a>.</p>

<p>So here&rsquo;s a sample I threw together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">trip_distance</span><span class="p">,</span> <span class="n">fare_amount</span><span class="p">,</span> <span class="n">tip_amount</span><span class="p">,</span> <span class="n">tolls_amount</span><span class="p">,</span> <span class="n">round</span><span class="p">(</span><span class="mi">100</span><span class="p">.</span><span class="mi">0</span> <span class="o">*</span> <span class="n">tip_amount</span> <span class="o">/</span> <span class="n">fare_amount</span><span class="p">)</span> <span class="k">as</span> <span class="n">tip_ratio</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">[</span><span class="n">nyc</span><span class="o">-</span><span class="n">tlc</span><span class="p">:</span><span class="n">yellow</span><span class="p">.</span><span class="n">trips_2015</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fare_amount</span> <span class="o">&gt;</span> <span class="mi">50</span> <span class="k">AND</span> <span class="n">trip_distance</span> <span class="o">&gt;</span> <span class="mi">15</span> <span class="k">AND</span> <span class="n">passenger_count</span> <span class="o">&gt;</span> <span class="mi">8</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">trip_distance</span> <span class="k">DESC</span>
</span></code></pre></td></tr></table></div></figure>


<p>The screenshot shows the cached results, it took about 6 seconds to run (which is not bad, considering the dataset is about <em>10 Gigs</em> !!)</p>

<p><img src="https://lh3.googleusercontent.com/rdJeePtMNq4uPKHvPWRNioZfZpQcqMe86rt-2M1bUAJJ=w1019-h665-no" alt="bigquery example" /></p>

<p><em>(9 people went 27 miles, paid $95 and gave no tip!)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shokunin and Umami in software engineering ....]]></title>
    <link href="http://agam.github.io/blog/2015/08/08/shokunin-and-umami-in-software-engineering-dot-dot-dot/"/>
    <updated>2015-08-08T19:57:05-07:00</updated>
    <id>http://agam.github.io/blog/2015/08/08/shokunin-and-umami-in-software-engineering-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Saw a great movie yesterday, <a href="https://www.youtube.com/watch?v=M-aGPniFvS0">&ldquo;Jiro dreams of Sushi&rdquo;</a>, which is really all about the lifelong quest for perfection. Chef Jiro Ono has been making Sushi for seven decades, and is still trying to get better at it.</p>

<p>Which is admirable, but how can lesser mortals as us draw some inspiration from it? What is the equivalent of being a <em>Shokunin</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> in terms of programming (or realistically, in terms of software engineering)? What is the equivalent experience of <em>Umami</em><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>?</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><em>The Japanese word shokunin is defined by both Japanese and Japanese-English dictionaries as ‘craftsman’ or ‘artisan,’ but such a literal description does not fully express the deeper meaning.  The Japanese apprentice is taught that shokunin means not only having technical skills, but also implies an attitude and social consciousness. … The shokunin has a social obligation to work his/her best for the general welfare of the people.  This obligation is both spiritual and material, in that no matter what it is, the shokunin’s responsibility is to fulfill the requirement.</em> &mdash; <a href="https://wilsonkhoo.wordpress.com/2013/02/23/jiro-dreams-of-sushi-what-it-means-to-be-shokunin/">Tasio Odate</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><em>As the taste of umami itself is subtle and blends well with other tastes to expand and round out flavors, most people don&rsquo;t recognize umami when they encounter it, but it plays an important role making food taste delicious.</em> <a href="http://www.umamiinfo.com/2011/02/What-exactly-is-umami.php">(reference)</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntax transformers (!)]]></title>
    <link href="http://agam.github.io/blog/2015/07/25/syntax-transformers/"/>
    <updated>2015-07-25T21:07:25-07:00</updated>
    <id>http://agam.github.io/blog/2015/07/25/syntax-transformers</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve seen <code>defmacro</code> before, and while the pros and cons of &ldquo;hygiene&rdquo; are contentious, I had never bothered to learn macros in Scheme before. So now I&rsquo;m working my way through Kent Dybvig&rsquo;s <a href="http://www.scheme.com/tspl4/">&ldquo;The Scheme Programming Language&rdquo;</a>, and I have to say, I like what I see. Here&rsquo;s an example I wrote today:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">;;; Exercise 3.1.3</span>
</span><span class='line'><span class="p">(</span><span class="k">define-syntax </span><span class="nv">my-let*</span>
</span><span class='line'>  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span>
</span><span class='line'>    <span class="p">[(</span><span class="nf">_</span> <span class="p">((</span><span class="nf">x</span> <span class="nv">e</span><span class="p">))</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">x</span> <span class="nv">e</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">body</span> <span class="o">...</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">[(</span><span class="nf">_</span> <span class="p">((</span><span class="nf">x1</span> <span class="nv">e1</span><span class="p">)</span> <span class="p">(</span><span class="nf">x2</span> <span class="nv">e2</span><span class="p">)</span> <span class="o">...</span><span class="p">)</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">x1</span> <span class="nv">e1</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">my-let*</span> <span class="p">((</span><span class="nf">x2</span> <span class="nv">e2</span><span class="p">)</span> <span class="o">...</span><span class="p">)</span> <span class="nv">body</span> <span class="o">...</span><span class="p">))]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Used in the REPL as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">my-let*</span> <span class="p">([</span><span class="nv">a</span> <span class="mi">5</span><span class="p">]</span> <span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">a</span><span class="p">)]</span> <span class="p">[</span><span class="nv">c</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)])</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">list </span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">5</span> <span class="mi">10</span> <span class="mi">15</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
