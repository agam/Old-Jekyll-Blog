<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2016-01-25T23:25:42-08:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monthly Programming summary: January 2016]]></title>
    <link href="http://agam.github.io/blog/2016/01/25/monthly-programming-summary-january-2016/"/>
    <updated>2016-01-25T23:22:06-08:00</updated>
    <id>http://agam.github.io/blog/2016/01/25/monthly-programming-summary-january-2016</id>
    <content type="html"><![CDATA[<p>Again, this isn’t really restricted to <em>Programming</em> per se, but more generally “computer-related stuff”. Next time, I’ll pick a better name. Until then, here are a few interesting links I came across last month, in no  particular order:</p>

<ul>
<li>The Handbook of Lisp Functions (cover page below): a <a href="http://www.softwarepreservation.org/projects/LISP/mblisp/Handbook_of_LISP_Functions.pdf">technical report</a> from <em>1961</em>.</li>
</ul>


<p><img src="https://doc-14-48-docs.googleusercontent.com/docs/securesc/o7m1hv4d96s4jtg9a81aobcff174890t/49eh1go9f5v2i53agksqnv1ghn4m8mj9/1453780800000/03675759775475626385/03675759775475626385/0B7bvhABhpDqmMmRPQmRvWXpkZTg"></p>

<ul>
<li><p>Digression on learning new languages: Ugh, I’m too embarassed to even write this. I keep changing my mind about what I like more. I thought this was going to be “the year of Clojure” for me, but then <a href="http://www.amazon.com/Dart-Programming-Language-Gilad-Bracha/dp/0321927702#">Gilad Bracha’s book</a> came out and now I’m torn again (Can I have them <em>both</em>? Maybe, but I fear I don’t have that kind of time anymore :P)</p></li>
<li><p>Busting the myths behind MicroKernels: <a href="http://blog.darknedgy.net/technology/2016/01/01/0/"><em>”Microkernels are slow and Elvis didn’t do no drugs”</em></a></p></li>
<li><p>Here is a paper from 1982 (<a href="http://www.smecc.org/The%20Architecture%20%20of%20the%20Burroughs%20B-5000.htm"><em>”The Architecture of the Burroughs B5000 &ndash; 20 Years Later and Still Ahead of the Times?”</em></a>), which was <em>even then</em> lamenting the sorry state of hardware, and only seems quaint now (as in <em>”why would you do things different?”</em>)</p></li>
<li><p>Various ways to make Clojure programming more productive: <a href="http://dev.solita.fi/2014/03/18/pimp-my-repl.html"><em>”Pimp My REPL”</em></a></p></li>
<li><p>I had a bunch of entertaining blog posts by Crista Lopez in the past (e.g. <a href="http://tagide.com/blog/fiction/jedi-masters/"><em>”Jedi Masters”</em></a>), but was blown away by this set of slides. You’re a programmer, you want to be a programmer for life, you <em>have</em> to read this: <a href="http://gotocon.com/dl/goto-aar-2013/slides/CristinaVideiraLopes_ExercisesInStyle.pdf"><em>”Exercises in Programming Style”</em></a>. And if you really like it, <a href="http://www.amazon.com/Exercises-Programming-Style-Cristina-Videira/dp/1482227371">get the book</a>.</p></li>
<li><p>Came across this intriguing indie film trailer (<a href="https://vimeo.com/147111732"><em>”TraceRoute”</em></a>), though I haven’t gotten around to seeing the movie yet (the writer/protagonist navigates “… the ghosts of nerddom’s past present and future …”). Dunno, added it to my “to watch” list.</p></li>
<li><p>Obviously, the X-Files is back. If you like this sort of stuff, the first episode <a href="http://www.fox.com/watch/607308867569/7756658688">is free to watch</a> on Fox. Go watch it :)</p></li>
<li><p>A couple of articles for “historical interest”. The first is the New York Times reporting on … <a href="http://www.nytimes.com/1996/01/22/business/the-new-york-times-introduces-a-web-site.html">the opening of its web site, in 1996!</a>. But really, you skip ahead to the very last line for your dose of irony-or-tragedy: <em>“The market is booming for newspapers on the World Wide Web”</em>. Ouch.</p></li>
<li><p>The second is hilarious, from even further back (<a href="http://www.nytimes.com/1984/12/25/science/value-of-windowing-is-questioned.html"><em>”Value of Windowing is Questioned”</em></a>, 1984!!), and here the Times speculates on the dubious value of a graphical user interface. The opening line asks: <em>“Does anyone do windows any more?”</em>, and the article concludes by predicting “doom” for the upcoming new OS by Microsoft. I thought I’d see if the author had time to reflect on his past predictions, so I looked through the newspaper’s archives, but it looks like he stopped writing technology articles in 1987 and switched to Food and Travel. Anyway.</p></li>
</ul>


<p>Here’s a “quote of the month” for you:</p>

<blockquote><p>Science is much more ‘sloppy’ and ‘irrational’ than its methodological image.</p></blockquote>

<p>(Paul Feyerabend, <em>Against Method</em>, and I meant to refer to the so-called science of computers)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily programming: simple list stuff]]></title>
    <link href="http://agam.github.io/blog/2016/01/11/daily-programming-simple-list-stuff/"/>
    <updated>2016-01-11T22:36:12-08:00</updated>
    <id>http://agam.github.io/blog/2016/01/11/daily-programming-simple-list-stuff</id>
    <content type="html"><![CDATA[<p>Since I&rsquo;m warming up to Clojure this year, why not get started with the &ldquo;dailyprogrammer&rdquo; subreddit again?</p>

<p>So here&rsquo;s a (noobish) solution to <a href="https://www.reddit.com/r/dailyprogrammer/comments/40h9pd/20160111_challenge_249_easy_playing_the_stock/">this problem</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">dailyprog.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.string</span> <span class="ss">:as</span> <span class="nv">str</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">input-&gt;float</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">input</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">Float/parseFloat</span> <span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nf">str/split</span> <span class="nv">input</span> <span class="o">#</span><span class="s">&quot; &quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">difference</span>
</span><span class='line'>  <span class="s">&quot;Given a list of prices, a price in the list and its index, return the best price to sell it at&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">lst</span> <span class="nb">index </span><span class="nv">buy-price</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">max-sell-price</span> <span class="p">(</span><span class="nb">apply max </span><span class="p">(</span><span class="nb">drop index </span><span class="nv">lst</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:buy-price</span> <span class="nv">buy-price</span>
</span><span class='line'>    <span class="ss">:sell-price</span> <span class="nv">max-sell-price</span>
</span><span class='line'>    <span class="ss">:difference</span> <span class="p">(</span><span class="nb">- </span><span class="nv">max-sell-price</span> <span class="nv">buy-price</span><span class="p">)}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">difference-vector</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">lst</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">map-indexed</span> <span class="p">(</span><span class="nb">partial difference </span><span class="nv">lst</span><span class="p">)</span> <span class="nv">lst</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">println</span><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nb">slurp </span><span class="p">(</span><span class="nb">first </span><span class="nv">args</span><span class="p">))</span>
</span><span class='line'>                <span class="nv">input-&gt;float</span>
</span><span class='line'>                <span class="nv">difference-vector</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">apply max-key </span><span class="ss">:difference</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>and it runs like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; lein run /tmp/challenge-input
</span><span class='line'><span class="o">{</span>:buy-price 8.03, :sell-price 10.02, :difference 1.9900007247924805<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure from the ground up]]></title>
    <link href="http://agam.github.io/blog/2016/01/06/clojure-from-the-ground-up/"/>
    <updated>2016-01-06T13:14:57-08:00</updated>
    <id>http://agam.github.io/blog/2016/01/06/clojure-from-the-ground-up</id>
    <content type="html"><![CDATA[<p>It&rsquo;s time for the same old new year resolution again: going to stop randomly skimming new languages and focus on something in depth.</p>

<p>This time, without loss of generality (hopefully!), I picked Clojure (<em>again ?</em>).</p>

<p>Found this nice series of posts called <a href="https://aphyr.com/posts/301-clojure-from-the-ground-up-welcome"><em>&ldquo;Clojure from the ground up&rdquo;</em></a>.</p>

<p>The best part is that unlike other random free tutorials online, this one has exercises.</p>

<p>For example, <a href="https://aphyr.com/posts/306-clojure-from-the-ground-up-state">the post that introduces concurrency primitives</a> asks us to write our own <code>future</code> macro.</p>

<p>I came up with this kludge:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">my-future</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">body</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">p#</span> <span class="p">(</span><span class="nf">promise</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.start</span> <span class="p">(</span><span class="nf">Thread.</span>
</span><span class='line'>      <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">f#</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="o">~@</span><span class="nv">body</span><span class="p">)</span>
</span><span class='line'>                   <span class="nv">r#</span> <span class="p">(</span><span class="nf">f#</span><span class="p">)]</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">deliver</span> <span class="nv">p#</span> <span class="nv">r#</span><span class="p">)))))</span>
</span><span class='line'>               <span class="nv">p#</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The expansion looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">clojure-noob.core&gt;</span> <span class="p">(</span><span class="nf">pprint</span> <span class="p">(</span><span class="nb">macroexpand </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">my-future</span> <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="mi">5000</span><span class="p">)</span> <span class="p">(</span><span class="nb">prn </span><span class="s">&quot;Hey ... &quot;</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">let*</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">p__9904__auto__</span> <span class="p">(</span><span class="nf">clojure.core/promise</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">.start</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">java.lang.Thread.</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">clojure.core/fn</span>
</span><span class='line'>       <span class="p">[]</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">clojure.core/let</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">f__9905__auto__</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">clojure.core/fn</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="mi">5000</span><span class="p">)</span> <span class="p">(</span><span class="nb">prn </span><span class="s">&quot;Hey ... &quot;</span><span class="p">))</span>
</span><span class='line'>          <span class="nv">r__9906__auto__</span> <span class="p">(</span><span class="nf">f__9905__auto__</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">clojure.core/deliver</span> <span class="nv">p__9904__auto__</span> <span class="nv">r__9906__auto__</span><span class="p">)))))</span>
</span><span class='line'>        <span class="nv">p__9904__auto__</span><span class="p">)</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it seems to work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">clojure-noob.core&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">x</span> <span class="p">(</span><span class="nf">my-future</span> <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="mi">5000</span><span class="p">)</span> <span class="p">(</span><span class="nb">prn </span><span class="s">&quot;Hey ... &quot;</span><span class="p">)))</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;clojure-noob.core/x</span>
</span><span class='line'><span class="nv">clojure-noob.core&gt;</span> <span class="p">(</span><span class="nf">pprint</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="nv">&lt;Promise</span><span class="o">@</span><span class="mi">6</span><span class="nv">a1dc62</span><span class="err">:</span> <span class="ss">:not-delivered&gt;</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="s">&quot;Hey ... &quot;</span>
</span><span class='line'><span class="nv">clojure-noob.core&gt;</span>
</span><span class='line'><span class="nv">clojure-noob.core&gt;</span> <span class="p">(</span><span class="nf">pprint</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="nv">&lt;Promise</span><span class="o">@</span><span class="mi">6</span><span class="nv">a1dc62</span><span class="err">:</span> <span class="nv">nil&gt;</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s hoping to fun times ahead (and a <em>happy new year</em> to you too!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Programming summary: December 2015]]></title>
    <link href="http://agam.github.io/blog/2015/12/26/monthly-programming-summary-december-2015/"/>
    <updated>2015-12-26T20:46:30-08:00</updated>
    <id>http://agam.github.io/blog/2015/12/26/monthly-programming-summary-december-2015</id>
    <content type="html"><![CDATA[<p>A second installment of &ldquo;interesting stuff I came across this month&rdquo; &hellip;</p>

<p>(<em>Aside:</em> I shouldn&rsquo;t call this a &ldquo;programming&rdquo; summary, but I can&rsquo;t think of anything better &mdash; it&rsquo;s more of a &ldquo;math + science + computers&rdquo; newsletter)</p>

<ul>
<li><p>The highlight of the last month for me was the realization of the dream of an ultra-cheap computer, the <a href="https://www.raspberrypi.org/blog/raspberry-pi-zero/">Raspberry Pi Zero</a>, which is cheaper than several drinks at Starbucks.</p></li>
<li><p>Yes, ants displaying &ldquo;collective intelligence&rdquo; is old stuff (I first encountered a reference to it in the pages of <em>Godel, Escher, Bach</em>), but <a href="http://www.kurzweilai.net/army-ants-living-bridges-suggest-collective-intelligence">this article</a> is something else altogether, showing how &ldquo;living bridges&rdquo; are dynamically adjusted by the constituent ants, in response to foraaging needs.</p></li>
<li><p><em>&ldquo;Get Lamp&rdquo;</em> (<a href="https://www.youtube.com/watch?v=UwZxUGmqSOo">link to trailer</a>) is an interesting documentary on the history of interactive text-based fiction, mostly adventure games. If you&rsquo;ve ever telneted to a MUD, you will like this.</p></li>
<li><p>I lap up everything by Bret Victor, and hope for him to turn out as the Alan Kay of our time. <a href="https://medium.com/re-form/the-utopian-ui-architect-34dead42a28#.emrat4pnv">This</a> is aanother recent piece where he insists we haven&rsquo;t really <em>used</em> computers well at all.</p></li>
<li><p>Finally, <a href="http://www.popularmechanics.com/military/weapons/a18343/the-cannons-on-the-b-29-bomber-were-a-mid-century-engineering-masterpiece/">this Popular Mechanics article</a> blew me away &mdash; before there were &ldquo;real&rdquo; computers, the B-29 Superfortress had high-tech computing <em>way</em> ahead of its time, to remotely operate its gun turrets. Obligatory youtube video below:</p></li>
</ul>


<iframe width="560" height="315" src="https://www.youtube.com/embed/nskFayhBcy0" frameborder="0" allowfullscreen></iframe>


<p>This month&rsquo;s QOTM is from Bret Victor&rsquo;s piece above:</p>

<blockquote><p>Now we’re staring at computer screens and moving our hands on a keyboard, but it’s basically the same thing. <strong>We’re computer users thinking paper thoughts.”</strong></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Programming summary: November 2015]]></title>
    <link href="http://agam.github.io/blog/2015/11/27/monthly-programming-summary-november-2015/"/>
    <updated>2015-11-27T13:09:15-08:00</updated>
    <id>http://agam.github.io/blog/2015/11/27/monthly-programming-summary-november-2015</id>
    <content type="html"><![CDATA[<p>A second installment of &ldquo;interesting stuff I came across this month&rdquo; &hellip;</p>

<ul>
<li>A 1972 article in Rolling Stone magazine by Stewart Brand: <a href="http://www.wheels.org/spacewar/stone/rolling_stone.html"><em>&ldquo;Fanatic Life and Symbolic Death Among the Computer Bums&rdquo;</em></a>. If only the present had corresponded a little closer to the imagined future of the past, eh? :)</li>
</ul>


<blockquote><p>The hackers are the technicians of this science &ndash; <em>“It’s a term of derision and also the ultimate compliment.”</em> They are the ones who translate human demands into code that the machines can understand and act on. They are legion. <strong>Fanatics with a potent new toy</strong>. A mobile new-found elite, with its own apparat, language and character, its own legends and humor. Those magnificent men with their flying machines, scouting a leading edge of technology which has an odd softness to it; outlaw country, where rules are not decree or routine so much as the starker demands of what’s possible.</p></blockquote>

<ul>
<li><p>An excellent blog that was forced offline by vociferous commentors, but lives on in the depths of the Wayback Machine: <a href="http://web.archive.org/web/20140107054458/http://yinwang0.wordpress.com/"><em>&ldquo;Surely I am Joking&rdquo;</em></a> by Yin Wang. <em>All</em> the posts are good, my favorites are the ones on the downsides of &ldquo;pure&rdquo; FP and &ldquo;pure&rdquo; OOP (and <a href="http://web.archive.org/web/20140116155929/http://yinwang0.wordpress.com/2013/11/09/oop-fp">how the two are similar!</a>), the one on <a href="http://web.archive.org/web/20131127131340/http://yinwang0.wordpress.com/2012/09/16/what-is-a-program/"><em>&ldquo;what is a program?&rdquo;</em></a>, and the one on the <a href="http://web.archive.org/web/20140103011845/http://yinwang0.wordpress.com/2013/04/05/database/"><em>&ldquo;dark age of programming&rdquo;</em></a>.</p></li>
<li><p>A 1987 article in <em>&ldquo;Computer Language&rdquo;</em> magazine: <a href="http://bit-player.org/wp-content/extras/bph-publications/CompLang-1987-04-Hayes-mutant-lisps.pdf"><em>&ldquo;Mutant languages from the LISP lab&rdquo;</em></a> &mdash; just for fun, and an insight into the pre-Common Lisp era.</p></li>
<li><p>A humorous blog entry from 2009: <a href="http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html"><em>&ldquo;A Brief, Incomplete, and Mostly Wrong History of Programming Languages&rdquo;</em></a>, with a self-explanatory title.</p></li>
</ul>


<p>And finally, a &ldquo;quote-of-the-month&rdquo;. This one is short and succinct <em>Perlisism</em>:</p>

<blockquote><p><strong>Computer Science is embarrassed by the computer.</strong></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Programming summary: October 2015]]></title>
    <link href="http://agam.github.io/blog/2015/10/26/monthly-programming-summary/"/>
    <updated>2015-10-26T20:23:36-07:00</updated>
    <id>http://agam.github.io/blog/2015/10/26/monthly-programming-summary</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s the first installment in an experiment &mdash; writing a monthly roundup of a few things I read/saw/did this month that I found sort of interesting. I do something on my (general, non-programming-specific) <a href="http://abacusnoirform.com/">personal blog</a>, so I thought the same might be a useful exercise here too.</p>

<p>In no particular order:</p>

<ul>
<li><p>The &ldquo;Balloon edition&rdquo; of BYTE magazine <a href="https://archive.org/stream/byte-magazine-1981-08/1981_08_BYTE_06-08_Smalltalk#page/n0/mode/2up">from 1981</a> &hellip; it&rsquo;s amazing how this stuff is <em>still</em> a revolutionary idea (also, the advertisements from three decades ago are hilarious)</p></li>
<li><p><em>&ldquo;&lsquo;SHOULD I learn to program?&rsquo; and &lsquo;Do I have to learn to program?&rsquo; are two variants of the question probably most asked by people testing the waters of computer ownership. The answer usually boils down to an emphatic &lsquo;that depends &hellip;, but probably not.&rsquo;&rdquo;</em> Sounds relevant? Sounds current? In fact, this is from a New York Times article <a href="http://www.nytimes.com/1984/01/17/science/personal-computers-does-everyone-need-to-learn-programming.html">from 1984 (!)</a>, titled <em>&ldquo;Personal computers: Does everyone need to learn programming?&rdquo;</em> (there is a conclusion to be drawn from this, but I won&rsquo;t go there)</p></li>
<li><p>I read through Dijkstra&rsquo;s <a href="https://www.cs.utexas.edu/users/EWD/">notes</a> a while ago, here&rsquo;s <a href="https://www.vex.net/~trebla/ewd.html">someone else&rsquo;s curated version</a> of them.</p></li>
<li><p>A Google Tech Talk from 2007 by Alex Wright, on <a href="https://www.youtube.com/watch?v=72nfrhXroo8"><em>&ldquo;The Web That Wasn&rsquo;t&rdquo;</em></a></p></li>
</ul>


<p>I&rsquo;ll leave you with this quote from Alan Kay:</p>

<blockquote><p>Perhaps it was commercialization in the 1980s that killed off the next expected new thing. Our plan and our hope was that the next generation of kids would come along and do something better than Smalltalk around 1984 or so. We all thought that the next level of programming language would be much more strategic and even policy-oriented and would have much more knowledge about what it was trying to do. But a variety of different things conspired together, and that next generation actually didn’t show up. <strong>One could actually argue—as I sometimes do—that the success of commercial personal computing and operating systems has actually led to a considerable retrogression in many, many respects.</strong></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tiny Taste of J]]></title>
    <link href="http://agam.github.io/blog/2015/10/08/a-taste-of-j/"/>
    <updated>2015-10-08T23:42:45-07:00</updated>
    <id>http://agam.github.io/blog/2015/10/08/a-taste-of-j</id>
    <content type="html"><![CDATA[<p>I recently stumbled across APL and J, as mentioned in a previous post, and began reading a bit of <a href="http://www.jsoftware.com/help/learning/contents.htm">an introductory book</a>.</p>

<p>A couple of days ago, I came across this series of coding tasks on a blog called &ldquo;Programming Praxis&rdquo;, and I picked <a href="http://programmingpraxis.com/2015/10/06/the-iron-bar/">the most recent one</a> as an example to try out some J noobism.</p>

<p>The example is simple but contrived (and <em>median</em> is a terrible name) &mdash; we basically have to write a function that that takes two arguments and either increments, decrements or does nothing, with the first argument. In J, like so many other tasks, this is essentially one line (12 characters, to be precise).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>median =: [ + (* @: -)~</span></code></pre></td></tr></table></div></figure>


<p>To give some idea on what&rsquo;s going on here, this expression can be broken, first, into three parts: <code>[</code>, <code>+</code>, <code>(* @: -)~</code>. Let&rsquo;s start with the sub-expression within the parentheses: <code>* @: -</code>.</p>

<p>Here, <code>*</code> is a <em>verb</em> (think: <em>&ldquo;function&rdquo;</em>) that returns 1, 0, or -1 depending on the sign of its argument. So <code>* 4</code> is <code>1</code>, <code>* _2</code> (that&rsquo;s how -2 is represented) is <code>_1</code>, <code>* 0</code> is <code>0</code>.</p>

<p><code>-</code> is the only thing that does what you would expect: <code>4 - 3</code> is <code>1</code>, and so on.</p>

<p><code>@:</code> is a <em>conjunction</em>, such that <code>f @: g</code> when applied to <em>x</em> has the effect of <em>f (g x)</em>.</p>

<p><code>]</code> is a verb that when given two values, always selects the first of the two.</p>

<p><code>~</code> is an <em>adverb</em> that reverses the order of arguments to its preceding verb. So while <code>%</code> applied to <em>x</em> and <em>y</em> yields <em>(x % y)</em>, <code>%~</code> applied to <em>x</em> and <em>y</em> yields <em>(y % x)</em>.</p>

<p>Now things get a little tricky (but only a <em>little</em>; we&rsquo;re barely scratching the surface of J here). The expression for median can be seen as three verbs laid down together, and this is interpreted as a <em>&ldquo;train&rdquo;</em> of verbs, or more specifically in this case, a <em>&ldquo;dyadic fork&rdquo;</em>.</p>

<p>Basically, <em>(f g h)</em> when applied to two values <em>x</em> and <em>y</em>, is equivalent to <em>g</em> applied to the result of <em>f</em> applied to <em>x</em> and <em>y</em>, and the result of <em>h</em> applied to <em>x</em> and <em>y</em>. Or, using infix notation,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x (f g h) y   is equivalent to    (x f y) g (x h y)</span></code></pre></td></tr></table></div></figure>


<p>The reason <em>x</em> and <em>y</em> aren&rsquo;t present in the definition of <em>median</em> is that it&rsquo;s defined using a &ldquo;tacit&rdquo; form rather than an &ldquo;explicit&rdquo; form (somewhat similar to &ldquo;point-free&rdquo; definitions in Haskell).</p>

<p>Putting it all together now, when applied to two arguments, we get the equivalent of <code>(x [ y) + (* (y - x))</code>, which gives <code>x + 1</code> when <em>y > x</em>, <code>x + 0</code> when <em>y == x</em>, and <code>x + (-1)</code> when <em>y &lt; x</em>, which is what we want.</p>

<p>If you like this sort of thing, head over to <a href="http://www.jsoftware.com/">jsoftware.com</a> for more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Types as constraints ...]]></title>
    <link href="http://agam.github.io/blog/2015/10/02/types-as-constraints-dot-dot-dot/"/>
    <updated>2015-10-02T00:13:54-07:00</updated>
    <id>http://agam.github.io/blog/2015/10/02/types-as-constraints-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>(Don&rsquo;t ask me why or how I got here, but &hellip;) I came across a very old (Nov 1980) <a href="http://ml.cddddr.org/lisp-forum/msg00022.html">post in a mailing list</a> that might be related to our current confusion on the different interpretations of what <em>types</em> mean:</p>

<blockquote><p> The second way is to keep careful tabs on what functions call this one and the way that they have to be changed to match changes in this function.  It is exactly this latter type of control (auditing function) that I mean should be included in NIL (or whatever).  I am not against extending the language any more than I am against GOTOs (which is not very much).</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Mathematical Notation ...]]></title>
    <link href="http://agam.github.io/blog/2015/09/27/on-mathematical-notation-dot-dot-dot/"/>
    <updated>2015-09-27T22:32:17-07:00</updated>
    <id>http://agam.github.io/blog/2015/09/27/on-mathematical-notation-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve always had a vague lingering feeling about mathematical notation being at times inconsistent, excessive, duplicated, and so on. Some of it is of course due to me not knowing enough math, and not knowing math well enough, but some of it, I was recently relieved to find out, was a concern shared by people smarter than me too.</p>

<p>Unfortunately, I&rsquo;m now <em>more</em> confused since the two solutions are (IMO) at odds with each other. Both share the common goal of replacing outdated notation by making it <em>&ldquo;executable&rdquo;</em>, and thus more precise, but the way they go about it is different.</p>

<p>Or so it seems to me, at least. Perhaps someone out there can explain it better to me someday. The two people I came across are, (of course?) Ken Iverson and Gerald Sussman, and the two ideas can be experienced by reading <a href="http://www.jsoftware.com/papers/tot.htm"><em>&ldquo;Notation as a Tool of Thought&rdquo;</em></a>, and watching <a href="https://www.youtube.com/watch?v=arMH5GjBwUQ"><em>&ldquo;The Role of Programming in the Formulation of Ideas&rdquo;</em></a>. Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Field of Languages ...]]></title>
    <link href="http://agam.github.io/blog/2015/09/17/the-field-of-languages-dot-dot-dot/"/>
    <updated>2015-09-17T22:02:44-07:00</updated>
    <id>http://agam.github.io/blog/2015/09/17/the-field-of-languages-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Last year, I spent some time trying out Haskell, Ocaml, Clojure, Dart, Shen, and ClozureCL. I thought I was done surveying the field, but I had barely scratched the surface, and realizing this was quite depressing. There are entire <em>kinds</em> of language paradigms I have no experience of, such as:</p>

<ul>
<li><strong>Forth</strong>: All I&rsquo;ve done is read about people&rsquo;s experience with it, it has always seemed too alien to me.</li>
<li><strong>Smalltalk</strong>: I installed Pharo and took the basic &ldquo;Prof. Stef&rdquo; tutorial, but then stopped before I could really try anything concrete.</li>
<li><strong>APL/J</strong>: Never seemed like anything but line noise, but then I read <a href="https://scottlocklin.wordpress.com/2012/09/18/a-look-at-the-j-language-the-fine-line-between-genius-and-insanity/">this post on J</a> and saw <a href="https://www.youtube.com/watch?v=PlM9BXfu7UY">this video</a> on Dyalog, and I&rsquo;m curious about it</li>
</ul>


<p><em>&ldquo;The lyf so short, the craft so long to lerne&rdquo;</em> :(</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internet Ironies and Idiosyncrasies]]></title>
    <link href="http://agam.github.io/blog/2015/09/12/bubbles-and-busts-a-tale-of-two-snapshots/"/>
    <updated>2015-09-12T23:51:01-07:00</updated>
    <id>http://agam.github.io/blog/2015/09/12/bubbles-and-busts-a-tale-of-two-snapshots</id>
    <content type="html"><![CDATA[<p>A couple of snippets dug up from the past &hellip;</p>

<h2>The Anatomy of a Search Engine</h2>

<p>(original <a href="http://infolab.stanford.edu/~page/google.html">here</a>, emphasis mine, presented without comment)</p>

<blockquote><p>Currently, the predominant business model for commercial search engines is advertising. <em>The goals of the advertising business model do not always correspond to providing quality search to users</em>. For example, in our prototype search engine the top result for cellular phone is &ldquo;The Effect of Cellular Phone Use Upon Driver Attention&rdquo;, a study which explains in great detail the distractions and risk associated with conversing on a cell phone while driving. This search result came up first because of its high importance as judged by the PageRank algorithm, an approximation of citation importance on the web [Page, 98]. It is clear that <em>a search engine which was taking money for showing cellular phone ads would have difficulty justifying the page that our system returned to its paying advertisers</em>. For this type of reason and historical experience with other media [Bagdikian 83], <strong>we expect that advertising funded search engines will be inherently biased towards the advertisers and away from the needs of the consumers.</strong></p></blockquote>

<h2>&ldquo;Other people&rdquo; on the Internet</h2>

<p>(original <a href="http://chadfowler.com/blog/2003/02/16/google-blogs/">here</a>, emphasis mine)</p>

<blockquote><p> We’ve had the technological capability to “blog” since the creation of the Worldwide Web. The difference now is that it’s getting easier and easier to do. That’s the shift. <strong>More and more content is getting created, and the content is getting increasingly time sensitive in nature</strong>. Given a user-friendly piece of software and a 15 minute introduction, my grandmother or my teenage nephew is just as capable of publishing content on the open internet as I am. And, given the relative free time that each of them probably enjoys, you might say that they’re quite a bit more capable than I am.</p>

<p>So, does this have value? I’d say the answer is “yes” and “no”, with a much heavier weight on the “no”. For my grandmother, in this example, it’s “yes”. Maybe she just wants to write for herself (nevermind the fact that she can do that in a paper journal where people don’t have to read it). Maybe she wants to keep her globally distributed family up to date on the events of her life. To be able to do these things easily is great for her.</p>

<p><strong>But, for the internet as a whole, the answer is “no”</strong>. Nothing against my grandmother of course, but this “blogging” phenomenon is opening the flood gates for anyone with an internet connection to “muddy up” the information available on the internet even further than it already is. While bloggers are probably adding some valuable content to the internet, they’re also increasing the number of sites that fall into my #1,2,3 categories mentioned above. In fact, Pyra itself has 1.1 million registered users, out of which they estimate that only the 200,000 are actively maintaining sites. This means that while Blogger brings us 200,000 sites that at least don’t fall into the “inactive” category (but may still be generally useless or irrelevant), <strong>it has also helped to dilute the internet</strong> with about 900,000 dormant sites.</p>

<p>Given those numbers (about 80% of Blogger sites in category #3 alone), I’d have to say that <strong>“blogging” is more of a problem than it is something to be excited about</strong>.</p></blockquote>

<p>More than a decade ago, and people have moved on from blogs (<em>yawn?</em>) to a variety of comfortable walled gardens, but substitute Twitter above and add a few zeros to the numbers here, and you get a rough idea of what has (or has not) changed since then.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSD on GCE (the last post)]]></title>
    <link href="http://agam.github.io/blog/2015/08/18/freebsd-on-gce-the-last-post/"/>
    <updated>2015-08-18T22:59:29-07:00</updated>
    <id>http://agam.github.io/blog/2015/08/18/freebsd-on-gce-the-last-post</id>
    <content type="html"><![CDATA[<p>After <a href="blog/2014/12/14/trying-out-freebsd-and-failing-at-it/">one unsuccessful attempt</a> and one <a href="blog/2015/06/13/freebsd-on-google-compute-engine/">hack-ey successful one</a>, getting FreeBSD up and running on GCE is now a one-liner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gcloud compute instances create pandora --image freebsd-10-2-release-amd64 --image-project<span class="o">=</span>freebsd-org-cloud-dev
</span><span class='line'><span class="nv">$ </span>gcloud compute ssh agam@pandora
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and that&rsquo;s it. <strong>Kudos</strong> to whoever made this happen!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A BigQuery example]]></title>
    <link href="http://agam.github.io/blog/2015/08/11/a-bigquery-example/"/>
    <updated>2015-08-11T14:55:30-07:00</updated>
    <id>http://agam.github.io/blog/2015/08/11/a-bigquery-example</id>
    <content type="html"><![CDATA[<p>I had read about BigQuery but hadn&rsquo;t had a chance to use the external product yet. This week I came across some article about Uber and taxis etc, and it had a link to recently released data by <a href="http://www.nyc.gov/html/tlc/html/about/statistics.shtml">The NYC Taxi and Limousine Commission</a>. In addition to directly downloading the data, or looking at it through <a href="https://data.cityofnewyork.us/data?agency=Taxi+and+Limousine+Commission+%28TLC%29&amp;cat=&amp;type=new_view&amp;browseSearch=&amp;scope">NYC OpenData</a>, you can also <a href="https://bigquery.cloud.google.com/table/nyc-tlc:yellow.trips_2015">play around with it using BigQuery</a>.</p>

<p>So here&rsquo;s a sample I threw together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">trip_distance</span><span class="p">,</span> <span class="n">fare_amount</span><span class="p">,</span> <span class="n">tip_amount</span><span class="p">,</span> <span class="n">tolls_amount</span><span class="p">,</span> <span class="n">round</span><span class="p">(</span><span class="mi">100</span><span class="p">.</span><span class="mi">0</span> <span class="o">*</span> <span class="n">tip_amount</span> <span class="o">/</span> <span class="n">fare_amount</span><span class="p">)</span> <span class="k">as</span> <span class="n">tip_ratio</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">[</span><span class="n">nyc</span><span class="o">-</span><span class="n">tlc</span><span class="p">:</span><span class="n">yellow</span><span class="p">.</span><span class="n">trips_2015</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fare_amount</span> <span class="o">&gt;</span> <span class="mi">50</span> <span class="k">AND</span> <span class="n">trip_distance</span> <span class="o">&gt;</span> <span class="mi">15</span> <span class="k">AND</span> <span class="n">passenger_count</span> <span class="o">&gt;</span> <span class="mi">8</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">trip_distance</span> <span class="k">DESC</span>
</span></code></pre></td></tr></table></div></figure>


<p>The screenshot shows the cached results, it took about 6 seconds to run (which is not bad, considering the dataset is about <em>10 Gigs</em> !!)</p>

<p><img src="https://lh3.googleusercontent.com/rdJeePtMNq4uPKHvPWRNioZfZpQcqMe86rt-2M1bUAJJ=w1019-h665-no" alt="bigquery example" /></p>

<p><em>(9 people went 27 miles, paid $95 and gave no tip!)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shokunin and Umami in software engineering ....]]></title>
    <link href="http://agam.github.io/blog/2015/08/08/shokunin-and-umami-in-software-engineering-dot-dot-dot/"/>
    <updated>2015-08-08T19:57:05-07:00</updated>
    <id>http://agam.github.io/blog/2015/08/08/shokunin-and-umami-in-software-engineering-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Saw a great movie yesterday, <a href="https://www.youtube.com/watch?v=M-aGPniFvS0">&ldquo;Jiro dreams of Sushi&rdquo;</a>, which is really all about the lifelong quest for perfection. Chef Jiro Ono has been making Sushi for seven decades, and is still trying to get better at it.</p>

<p>Which is admirable, but how can lesser mortals as us draw some inspiration from it? What is the equivalent of being a <em>Shokunin</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> in terms of programming (or realistically, in terms of software engineering)? What is the equivalent experience of <em>Umami</em><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>?</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><em>The Japanese word shokunin is defined by both Japanese and Japanese-English dictionaries as ‘craftsman’ or ‘artisan,’ but such a literal description does not fully express the deeper meaning.  The Japanese apprentice is taught that shokunin means not only having technical skills, but also implies an attitude and social consciousness. … The shokunin has a social obligation to work his/her best for the general welfare of the people.  This obligation is both spiritual and material, in that no matter what it is, the shokunin’s responsibility is to fulfill the requirement.</em> &mdash; <a href="https://wilsonkhoo.wordpress.com/2013/02/23/jiro-dreams-of-sushi-what-it-means-to-be-shokunin/">Tasio Odate</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><em>As the taste of umami itself is subtle and blends well with other tastes to expand and round out flavors, most people don&rsquo;t recognize umami when they encounter it, but it plays an important role making food taste delicious.</em> <a href="http://www.umamiinfo.com/2011/02/What-exactly-is-umami.php">(reference)</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syntax transformers (!)]]></title>
    <link href="http://agam.github.io/blog/2015/07/25/syntax-transformers/"/>
    <updated>2015-07-25T21:07:25-07:00</updated>
    <id>http://agam.github.io/blog/2015/07/25/syntax-transformers</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve seen <code>defmacro</code> before, and while the pros and cons of &ldquo;hygiene&rdquo; are contentious, I had never bothered to learn macros in Scheme before. So now I&rsquo;m working my way through Kent Dybvig&rsquo;s <a href="http://www.scheme.com/tspl4/">&ldquo;The Scheme Programming Language&rdquo;</a>, and I have to say, I like what I see. Here&rsquo;s an example I wrote today:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">;;; Exercise 3.1.3</span>
</span><span class='line'><span class="p">(</span><span class="k">define-syntax </span><span class="nv">my-let*</span>
</span><span class='line'>  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span>
</span><span class='line'>    <span class="p">[(</span><span class="nf">_</span> <span class="p">((</span><span class="nf">x</span> <span class="nv">e</span><span class="p">))</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">x</span> <span class="nv">e</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">body</span> <span class="o">...</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">[(</span><span class="nf">_</span> <span class="p">((</span><span class="nf">x1</span> <span class="nv">e1</span><span class="p">)</span> <span class="p">(</span><span class="nf">x2</span> <span class="nv">e2</span><span class="p">)</span> <span class="o">...</span><span class="p">)</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">x1</span> <span class="nv">e1</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">my-let*</span> <span class="p">((</span><span class="nf">x2</span> <span class="nv">e2</span><span class="p">)</span> <span class="o">...</span><span class="p">)</span> <span class="nv">body</span> <span class="o">...</span><span class="p">))]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Used in the REPL as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">my-let*</span> <span class="p">([</span><span class="nv">a</span> <span class="mi">5</span><span class="p">]</span> <span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">a</span><span class="p">)]</span> <span class="p">[</span><span class="nv">c</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)])</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">list </span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">5</span> <span class="mi">10</span> <span class="mi">15</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On the lost unity of programming ...]]></title>
    <link href="http://agam.github.io/blog/2015/07/17/on-the-lost-unity-of-programming-dot-dot-dot/"/>
    <updated>2015-07-17T21:06:01-07:00</updated>
    <id>http://agam.github.io/blog/2015/07/17/on-the-lost-unity-of-programming-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>An excerpt from <a href="http://www.amazon.com/Concepts-Techniques-Models-Computer-Programming/dp/0262220695">&ldquo;Concepts, Techniques, and Models of Computer Programming&rdquo;</a> by Van Roy and Haridi:</p>

<blockquote><p>Despite many efforts to introduce a scientific foundation, programming is almost always taught as a craft. It is usually taught in the context of one (or a few) programming languages (e.g., Java, complemented with Haskell, Scheme, or Prolog). The historical accidents of the particular languages chosen are interwoven together so closely with the fundamental concepts that the two cannot be separated. There is a confusion between tools and concepts. What’s more, different schools of thought have developed, based on different ways of viewing programming, called “paradigms”: object-oriented, logic, functional, etc. Each school of thought has its own science. <strong>The unity of programming as a single discipline has been lost.</strong></p></blockquote>

<p>&hellip;</p>

<blockquote><p><strong>Teaching programming in this fashion is like having separate schools of bridge building</strong>: one school teaches how to build wooden bridges and another school teaches how to build iron bridges. Graduates of either school would implicitly consider the restriction to wood or iron as fundamental and would not think of using wood and iron together</p></blockquote>

<p>An excerpt from <a href="http://www.dreamsongs.com/MobSoftware.html">&ldquo;Mob Software: The Erotic Life of Code&rdquo;</a> by Dick Gabriel &amp; Ron Goldman:</p>

<blockquote><p>The effect of ownership imperatives has caused there to be no body of software as literature. <strong>It is as if all writers had their own private companies and only people in the Melville company could read &ldquo;Moby-Dick&rdquo; and only those in Hemingway’s could read &ldquo;The Sun Also Rises.&rdquo; Can you imagine developing a rich literature under these circumstances?</strong> Under such conditions, there could be neither a curriculum in literature nor a way of teaching writing. And we expect people to learn to program in this exact context?</p></blockquote>

<p>&hellip;</p>

<blockquote><p>When software became merchandise, the opportunity vanished of teaching software development as a craft and as artistry. The literature became frozen. It’s extremely rare today to stumble across someone who is familiar with the same source code as you are. If all remnants of literature disappeared, you’d expect that eventually all respect for it—as an art form, as a craft, as an activity worthy of human attention—would disappear. And so we’ve seen with software: <strong>The focus is on architecture, specifications, design documents, and graphical design languages. Code as code is looked down on</strong>: The lowest rank in the software development chain is &ldquo;coder&#8221;—right alongside QA drone and doc writer.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pharo]]></title>
    <link href="http://agam.github.io/blog/2015/07/06/pharo/"/>
    <updated>2015-07-06T00:02:27-07:00</updated>
    <id>http://agam.github.io/blog/2015/07/06/pharo</id>
    <content type="html"><![CDATA[<p>A lot of thinking about <em>&ldquo;what&rsquo;s the best programming environment for beginners?&rdquo;</em> has led me to the one system I&rsquo;ve never explored (and only read about): <strong>Smalltalk</strong> &mdash; Or more precisely, a particular open-source implementation of Smalltalk, <em>Pharo</em>.</p>

<p>(Clearly, I have very little credibility, since the pattern here is of me saying &ldquo;I&rsquo;m going to learn X&rdquo;, and they getting sidetracked by some Y)</p>

<p>Like Common Lisp (and unlike Scheme or Haskell), Smalltalk is &ldquo;image-based&rdquo; rather than &ldquo;source-file-based&rdquo;, and again like Lisp the <em>&ldquo;ideal&rdquo;</em> it strives for is turtles all the way down, the turtles here being uniform objects instead of uniform s-expressions.</p>

<p>When you start up the Pharo image for the first time after downloading it, one of windows is a <em>Workspace</em>, with various comments and notes, among which is the following innocuous looking line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='smalltalk'><span class='line'><span class="nc">PharoTutorial</span> <span class="nf">go</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executing that line (selecting it and hitting <code>Cmd-D</code>, or right-clicking and selecting <code>Do It</code>) launches a engaging tutorial that &hellip; well .. you have to see it for yourself :) At the very end, you have the option of introspecting the tutorial itself, or creating your own. Here is a screenshot of that:</p>

<p><img src="https://farm1.staticflickr.com/551/19272356888_495113dfc2_b_d.jpg"></p>

<p>Download Pharo <a href="http://pharo.org/download">here</a>, and <strong>enjoy!!</strong></p>

<p>P.S. just for fun, some <em>&ldquo;Pharo Zen&rdquo;</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='smalltalk'><span class='line'><span class="nc">Perfection</span> <span class="nf">can</span> <span class="nf">kill</span> <span class="nf">movement</span><span class="p">.</span>
</span><span class='line'><span class="nc">Simple</span> <span class="nf">processes</span> <span class="nf">to</span> <span class="nf">support</span> <span class="nf">progress</span><span class="p">.</span>
</span><span class='line'><span class="nc">Examples</span> <span class="nf">to</span> <span class="nf">learn</span> <span class="nf">from</span><span class="p">.</span>
</span><span class='line'><span class="nc">Tests</span> <span class="nf">are</span> <span class="nf">important</span> <span class="nf">but</span> <span class="nf">can</span> <span class="nf">be</span> <span class="nf">changed</span><span class="p">.</span>
</span><span class='line'><span class="nc">Classes</span> <span class="nf">structure</span> <span class="nf">our</span> <span class="nf">vocabulary</span><span class="p">.</span>
</span><span class='line'><span class="nc">Fully</span> <span class="nf">dynamic</span> <span class="nf">and</span> <span class="nf">malleable</span><span class="p">.</span>
</span><span class='line'><span class="nc">A</span> <span class="nf">system</span> <span class="nf">with</span> <span class="nf">robust</span> <span class="nf">abstractions</span> <span class="nf">that</span> <span class="nf">a</span> <span class="nf">single</span> <span class="nf">person</span> <span class="nf">can</span> <span class="nf">understand</span><span class="p">.</span>
</span><span class='line'><span class="nc">Explicit</span> <span class="nf">is</span> <span class="nf">better</span> <span class="nf">than</span> <span class="nf">implicit</span><span class="p">.</span>
</span><span class='line'><span class="nc">Simplicity</span> <span class="nf">is</span> <span class="nf">the</span> <span class="nf">ultimate</span> <span class="nf">elegance</span><span class="p">.</span>
</span><span class='line'><span class="nc">Quality</span> <span class="nf">is</span> <span class="nf">an</span> <span class="nf">emerging</span> <span class="nf">property</span><span class="p">.</span>
</span><span class='line'><span class="nc">Polymorphism</span> <span class="nf">is</span> <span class="nf">our</span> <span class="nf">esperanto</span><span class="p">.</span>
</span><span class='line'><span class="nc">Messages</span> <span class="nf">are</span> <span class="nf">our</span> <span class="nf">vocabulary</span><span class="p">.</span>
</span><span class='line'><span class="nc">Better</span> <span class="nf">a</span> <span class="nf">set</span> <span class="nf">of</span> <span class="nf">small</span> <span class="nf">polymorphic</span> <span class="nf">classes</span> <span class="nf">than</span> <span class="nf">a</span> <span class="nf">large</span> <span class="nf">ugly</span> <span class="nf">one</span><span class="p">.</span>
</span><span class='line'><span class="nc">Communication</span> <span class="nf">is</span> <span class="nf">key</span><span class="p">.</span>
</span><span class='line'><span class="nc">Learning</span> <span class="nf">from</span> <span class="nf">mistakes</span><span class="p">.</span>
</span><span class='line'><span class="nc">Magic</span> <span class="nf">only</span> <span class="nf">at</span> <span class="nf">the</span> <span class="nf">right</span> <span class="nf">place</span><span class="p">.</span>
</span><span class='line'><span class="nc">Objects</span> <span class="nf">all</span> <span class="nf">the</span> <span class="nf">way</span> <span class="nf">down</span><span class="p">.</span>
</span><span class='line'><span class="nc">Abstraction</span> <span class="nf">and</span> <span class="nf">composition</span> <span class="nf">are</span> <span class="nf">our</span> <span class="nf">friends</span><span class="p">.</span>
</span><span class='line'><span class="nc">One</span> <span class="nf">step</span> <span class="nf">at</span> <span class="nf">a</span> <span class="nf">time</span><span class="p">.</span>
</span><span class='line'><span class="nc">There</span> <span class="nf">is</span> <span class="nf">no</span> <span class="nf">unimportant</span> <span class="nf">fix</span><span class="p">.</span>
</span><span class='line'><span class="nc">Easy</span> <span class="nf">to</span> <span class="nf">understand,</span> <span class="nv">easy</span> <span class="nf">to</span> <span class="nf">learn</span> <span class="nf">from,</span> <span class="nv">easy</span> <span class="nf">to</span> <span class="nf">change</span><span class="p">.</span>
</span><span class='line'><span class="nc">Beauty</span> <span class="nf">in</span> <span class="nf">the</span> <span class="nf">code,</span> <span class="nv">beauty</span> <span class="nf">in</span> <span class="nf">the</span> <span class="nf">comments</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSD on Google Compute Engine]]></title>
    <link href="http://agam.github.io/blog/2015/06/12/freebsd-on-google-compute-engine/"/>
    <updated>2015-06-12T22:31:14-07:00</updated>
    <id>http://agam.github.io/blog/2015/06/12/freebsd-on-google-compute-engine</id>
    <content type="html"><![CDATA[<p>I had tried running FreeBSD on Google Compute Engine previously, but <a href="blog/2014/12/14/trying-out-freebsd-and-failing-at-it/">given up</a>. Last week I was suddenly reminded of this, and after Googling around a bit, came across <a href="https://github.com/swills/FreeBSD-gcloud">this script</a> by Steve Wills <em>(Thanks, Steve!)</em> that automated the task of building a &ldquo;GCE-ready&rdquo; image on an existing FreeBSD system.</p>

<p>Hooray! No, wait, I <em>don&rsquo;t</em> have an existing FreeBSD system; that&rsquo;s sort of what this is all about. This minor despondency was short-lived, since I had temporarily forgotten how we now live with computers within computers within computers (give or take a layer). So I installed the <a href="http://www.vmware.com/products/workstation">VMWare Workstation</a>, downloaded <a href="ftp://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/10.1/">the iso</a> for <code>10.1-RELEASE</code>, and booted it up.</p>

<p>All you need is the Google Cloud SDK, which is available under the ports tree, so something like the following should suffice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/ports/net/google-cloud-sdk
</span><span class='line'><span class="nv">$ </span>make install
</span></code></pre></td></tr></table></div></figure>


<p>Then grab the script and run it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl https://raw.githubusercontent.com/swills/FreeBSD-gcloud/master/build_google_image.sh &gt; /tmp/swill-script.sh
</span><span class='line'><span class="nv">$ </span>chmod a+x /tmp/swill-script.sh
</span><span class='line'><span class="nv">$ </span>/tmp/swill-script.sh
</span><span class='line'>components
</span><span class='line'>base.txz                                      100% of   <span class="m">63</span> MB <span class="m">7041</span> kBps 00m09s
</span><span class='line'>kernel.txz                                    100% of   <span class="m">84</span> MB <span class="m">3187</span> kBps 00m27s
</span><span class='line'>Creating image
</span><span class='line'>Creating filesystem
</span><span class='line'>Installing base into image
</span><span class='line'>Installing kernel into image
</span><span class='line'>Setting up image
</span><span class='line'>Finishing image
</span><span class='line'>Creating partitioned file
</span><span class='line'>Creating image tar
</span><span class='line'>Now run:
</span><span class='line'>
</span><span class='line'>gcloud auth login
</span><span class='line'>gsutil cp FreeBSD-10.1-RELEASE-amd64-20150612191810.tar.gz gs://swills-test-bucket
</span><span class='line'>gcutil addimage freebsd-101-release-amd64-20150612191810 gs://swills-test-bucket/FreeBSD-10.1-RELEASE-amd64-20150612191810.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>As you might have noticed, the script ends with a helpful suggestion for the subsequent commands to run. Caveats:</p>

<ul>
<li>If you&rsquo;re doing all this within a VM like I was, you&rsquo;ll want to run <code>gcloud auth login --no-launch-browser</code></li>
<li>You might need to run <code>gcloud config set project &lt;project ID&gt;</code> (that&rsquo;s project <em>ID</em>, not project <em>name</em>)</li>
<li>(obviously) replace <code>swills-test-bucket</code> with your bucket (you can create one at the <a href="https://console.developers.google.com">cloud console</a> (Storage &ndash;> Cloud Storage &ndash;> Storage Browser)</li>
</ul>


<p>After this, a few clicks should get you a new instance (remember to select the custom image uploaded earlier), and SSHing into it should show you <code>/etc/motd</code> (which is still a plain old file, and not, you know, <a href="https://web.archive.org/web/20120107210839/http://deadmemes.net/2010/10/19/fear-and-loathing-in-debianubuntu-or-who-needs-etcmotd">this abomination</a>).</p>

<p><strong>Enjoy!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying out stack ...]]></title>
    <link href="http://agam.github.io/blog/2015/06/09/trying-out-stack-dot-dot-dot/"/>
    <updated>2015-06-09T22:01:24-07:00</updated>
    <id>http://agam.github.io/blog/2015/06/09/trying-out-stack-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Tried this out after <a href="https://www.fpcomplete.com/blog/2015/06/announcing-first-public-beta-stack">I read about it</a>. Note: the following was all done on a Macbook, but it should work similarly on Linux too.</p>

<p><strong>Get Stack</strong></p>

<p><a href="https://github.com/fpco/stack/releases/download/v0.0.0-beta/stack-0.0.0-x86_64-osx.gz">Download</a> it.</p>

<p><code>gunzip</code> and copy to some directory in <code>$PATH</code></p>

<p><strong>Use Stack</strong></p>

<p>Create dummy <code>.hs</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="n">putStrLn</span> <span class="s">&quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Digression: first build</em></p>

<p>You need <code>GHC</code> installed, and a file called <code>stack.yaml</code> in the local directory. But if you don&rsquo;t, no problem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack ghc dummy.hs
</span><span class='line'>No .cabal file found in directory /Users/agam/Documents/Haskell/Dummy/
</span><span class='line'>Writing default config file to: /Users/agam/Documents/Haskell/Dummy/stack.yaml
</span><span class='line'>Downloading lts-2.13 build plan ...
</span><span class='line'>Downloaded lts-2.13 build plan.
</span><span class='line'>Populating index cache, may take a moment ...
</span><span class='line'>Updating package index hackage.haskell.org ...
</span><span class='line'>Cloning package index ...
</span><span class='line'>Done populating index cache.
</span><span class='line'>Downloading ghc-7.8.4 ...
</span><span class='line'>Downloaded ghc-7.8.4.
</span><span class='line'>Unpacking GHC ...
</span><span class='line'>Configuring GHC ...
</span><span class='line'>Installing GHC ...
</span><span class='line'>GHC installed.
</span></code></pre></td></tr></table></div></figure>


<p>Run it once more to actually build it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack ghc dummy.hs
</span><span class='line'><span class="o">[</span><span class="m">1</span> of 1<span class="o">]</span> Compiling Main             <span class="o">(</span> dummy.hs, dummy.o <span class="o">)</span>
</span><span class='line'>Linking dummy ...
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>stack.yaml dummy.o dummy.hs dummy.hi dummy
</span></code></pre></td></tr></table></div></figure>


<p><strong>Run the program</strong></p>

<p>Just run the executable created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./dummy
</span><span class='line'>Hello World
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively, combine steps 4 and 5</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack runghc dummy.hs
</span><span class='line'>Hello World
</span></code></pre></td></tr></table></div></figure>


<p><strong>Libraries</strong></p>

<p>(this is why we&rsquo;re <em>really</em> here, right?)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack update
</span><span class='line'>Updating package index hackage.haskell.org ...
</span></code></pre></td></tr></table></div></figure>


<p>What packages do we have ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack <span class="nb">exec</span> -- ghc-pkg list
</span><span class='line'>/Users/agam/.stack/programs/x86_64-osx/ghc-7.8.4/lib/ghc-7.8.4/package.conf.d/
</span><span class='line'>Cabal-1.18.1.5
</span><span class='line'>array-0.5.0.0
</span><span class='line'>base-4.7.0.2
</span><span class='line'>bin-package-db-0.0.0.0
</span><span class='line'>binary-0.7.1.0
</span><span class='line'>bytestring-0.10.4.0
</span><span class='line'>containers-0.5.5.1
</span><span class='line'>deepseq-1.3.0.2
</span><span class='line'>directory-1.2.1.0
</span><span class='line'>filepath-1.3.0.2
</span><span class='line'>ghc-7.8.4
</span><span class='line'>ghc-prim-0.3.1.0
</span><span class='line'>haskeline-0.7.1.2
</span><span class='line'>haskell2010-1.1.2.0
</span><span class='line'>haskell98-2.0.0.3
</span><span class='line'>hoopl-3.10.0.1
</span><span class='line'>hpc-0.6.0.1
</span><span class='line'>integer-gmp-0.5.1.0
</span><span class='line'>old-locale-1.0.0.6
</span><span class='line'>old-time-1.1.0.2
</span><span class='line'>pretty-1.1.1.1
</span><span class='line'>process-1.2.0.0
</span><span class='line'>rts-1.0
</span><span class='line'>template-haskell-2.9.0.0
</span><span class='line'>terminfo-0.4.0.0
</span><span class='line'><span class="nb">time</span>-1.4.2
</span><span class='line'>transformers-0.3.0.0
</span><span class='line'>unix-2.7.0.1
</span><span class='line'>xhtml-3000.2.1
</span></code></pre></td></tr></table></div></figure>


<p><strong>Get a new package using Stack</strong></p>

<p>First, we need to <em>require</em> some new package. Change dummy code to (e.g.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">System.Random</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Monad</span> <span class="p">(</span><span class="nf">replicateM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="n">replicateM</span> <span class="mi">10</span> <span class="p">(</span><span class="n">randomIO</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="kt">Float</span><span class="p">)</span> <span class="o">&gt;&gt;=</span> <span class="n">print</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try to build it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack ghc dummy.hs
</span><span class='line'>
</span><span class='line'>dummy.hs:1:8:
</span><span class='line'>Could not find module ‘System.Random’
</span><span class='line'>Use -v to see a list of the files searched <span class="k">for</span>.
</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s get it then:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack deps random
</span><span class='line'>random-1.1: downloading
</span><span class='line'>random-1.1: configure
</span><span class='line'>random-1.1: build
</span><span class='line'>random-1.1: install
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and then run it again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>stack ghc dummy.hs
</span><span class='line'><span class="o">[</span><span class="m">1</span> of 1<span class="o">]</span> Compiling Main             <span class="o">(</span> dummy.hs, dummy.o <span class="o">)</span>
</span><span class='line'>Linking dummy ...
</span><span class='line'><span class="nv">$ </span>./dummy
</span><span class='line'><span class="o">[</span>0.4301154,0.9796305,4.801333e-2,0.6978437,0.45780963,0.21923387,0.33110678,0.2976914,5.8295727e-3,0.28221375<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not bad at all. Reminds me of the feeling I got after wading through the plethora of python package handling frameworks and discovering Anaconda. This is <em>finally</em> a newbie-friendly language; &ldquo;cabal hell&rdquo; is no more (!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSD and Linux: install paths]]></title>
    <link href="http://agam.github.io/blog/2015/06/05/freebsd-and-linux-install-paths/"/>
    <updated>2015-06-05T19:46:45-07:00</updated>
    <id>http://agam.github.io/blog/2015/06/05/freebsd-and-linux-install-paths</id>
    <content type="html"><![CDATA[<p>One of those <strong>WTF</strong> moments of unexplainable distro choices. This on an ubuntu box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>which netcat
</span><span class='line'>/bin/netcat
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -l /bin/netcat
</span><span class='line'>lrwxrwxrwx <span class="m">1</span> root root <span class="m">24</span> Oct <span class="m">14</span>  <span class="m">2013</span> /bin/netcat -&gt; /etc/alternatives/netcat
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -l /etc/alternatives/netcat
</span><span class='line'>lrwxrwxrwx <span class="m">1</span> root root <span class="m">15</span> Oct <span class="m">14</span>  <span class="m">2013</span> /etc/alternatives/netcat -&gt; /bin/nc.openbsd
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>which nc
</span><span class='line'>/usr/bin/nc
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -l /usr/bin/nc
</span><span class='line'>lrwxrwxrwx <span class="m">1</span> root root <span class="m">7</span> Jun  <span class="m">4</span>  <span class="m">2014</span> /usr/bin/nc -&gt; /bin/nc
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -l /bin/nc
</span><span class='line'>lrwxrwxrwx <span class="m">1</span> root root <span class="m">20</span> Oct <span class="m">14</span>  <span class="m">2013</span> /bin/nc -&gt; /etc/alternatives/nc
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -l /etc/alternatives/nc
</span><span class='line'>lrwxrwxrwx <span class="m">1</span> root root <span class="m">15</span> Oct <span class="m">14</span>  <span class="m">2013</span> /etc/alternatives/nc -&gt; /bin/nc.openbsd
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; whereas on FreeBSD:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% ls -l /usr/bin/nc
</span><span class='line'>-r-xr-xr-x  <span class="m">1</span> root  wheel  <span class="m">28008</span> Nov <span class="m">11</span>  <span class="m">2014</span> /usr/bin/nc
</span><span class='line'>
</span><span class='line'>% file /usr/bin/nc
</span><span class='line'>/usr/bin/nc: ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>FreeBSD<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>, <span class="k">for</span> FreeBSD 10.1, stripped
</span></code></pre></td></tr></table></div></figure>


<p>Which would you rather remember?</p>
]]></content>
  </entry>
  
</feed>
