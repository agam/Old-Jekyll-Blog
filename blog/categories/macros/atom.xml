<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: macros | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/macros/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-10-02T07:18:26+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Syntax transformers (!)]]></title>
    <link href="http://agam.github.io/blog/2015/07/26/syntax-transformers/"/>
    <updated>2015-07-26T04:07:25+00:00</updated>
    <id>http://agam.github.io/blog/2015/07/26/syntax-transformers</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve seen <code>defmacro</code> before, and while the pros and cons of &ldquo;hygiene&rdquo; are contentious, I had never bothered to learn macros in Scheme before. So now I&rsquo;m working my way through Kent Dybvig&rsquo;s <a href="http://www.scheme.com/tspl4/">&ldquo;The Scheme Programming Language&rdquo;</a>, and I have to say, I like what I see. Here&rsquo;s an example I wrote today:</p>

<p>```scheme
;;; Exercise 3.1.3
(define-syntax my-let*
  (syntax-rules ()</p>

<pre><code>[(_ ((x e)) body ...)
  (let ((x e))
    body ...)]
[(_ ((x1 e1) (x2 e2) ...) body ...)
  (let ((x1 e1))
    (my-let* ((x2 e2) ...) body ...))]))
</code></pre>

<p>```</p>

<p>Used in the REPL as follows:</p>

<p>```scheme</p>

<blockquote><p>(my-let* ([a 5] [b (+ a a)] [c (+ a b)])</p>

<pre><code>(list a b c))
</code></pre>

<p>&lsquo;(5 10 15)
```</p></blockquote>
]]></content>
  </entry>
  
</feed>
