<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AlwaysBeCoding | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/alwaysbecoding/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2014-03-31T10:48:03-07:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moar Reddit DailyProgramming: Falling Sand]]></title>
    <link href="http://agam.github.io/blog/2013/11/26/moar-reddit-dailyprogramming-falling-sand/"/>
    <updated>2013-11-26T17:33:00-08:00</updated>
    <id>http://agam.github.io/blog/2013/11/26/moar-reddit-dailyprogramming-falling-sand</id>
    <content type="html"><![CDATA[<p>Another <a href="http://www.reddit.com/r/dailyprogrammer/comments/1rdtky/111113_challenge_142_easy_falling_sand/">easy challenge</a>.</p>

<p>One thing I learnt while doing this: I had to test the program with standard
input and had created a couple of files with sample input that I could pipe in.
I wasted a lot of time debugging a spurious newline (!), so in the future I
should remember to do the following:</p>

<p><code>sh
set listchars=eol:$
</code></p>

<p>What this does is show you <code>$</code> wherever the file has <code>\n</code> in it, so you can use
this to distinguish between &lsquo;real&rsquo; spaces and whitespace.</p>

<p>{% gist 7669304 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reddit DailyProgrammer Computing Pi]]></title>
    <link href="http://agam.github.io/blog/2013/11/26/reddit-dailyprogrammer-computing-pi/"/>
    <updated>2013-11-26T14:50:00-08:00</updated>
    <id>http://agam.github.io/blog/2013/11/26/reddit-dailyprogrammer-computing-pi</id>
    <content type="html"><![CDATA[<p>Another reddit programming exercise, <a href="http://www.reddit.com/r/dailyprogrammer/comments/1qply1/111513_challenge_129_hard_baking_pi/">this one</a> being classified as &lsquo;hard&rsquo; and indeed it <em>did</em> take a while longer, being a distributed programming setup.</p>

<h3>Implementation Notes</h3>

<ul>
<li>In a real world application, I would use something like Protocol Buffers for serialization</li>
<li>ditto for something like Thrift for RPCs</li>
<li>I had to add a sleep to each client so the first client doesn&rsquo;t run through
the whole batch on its own (machines are too fast these days!)</li>
<li>The run was limited to 250 digits, seemed to exhaust accuracy after about 254 digits with my implementation</li>
<li>Every client connects and sends &lsquo;-1&rsquo; before getting its first digit. On
subsequent connections it sends its current digit and computed value, and
receives the next digit to compute.</li>
</ul>


<h3>Server Code</h3>

<p>{% gist 7667732 %}</p>

<h3>Client Code</h3>

<p>{% gist 7667742 %}</p>

<h3>Compiling</h3>

<p><code>sh
$ clang++ -std=c++0x pi-compute-server.cpp  -lPocoNet -lPocoFoundation -o server
$ clang++ -std=c++0x pi-compute-client.cpp  -lPocoNet -lPocoFoundation -o client
</code></p>

<h3>Running</h3>

<p>```sh
$ ./server
Waiting for clients &hellip;
Received -1th digit as 1000
Sent <em>0</em>
Received 0th digit as 2
Divergence from PI (to 10000 accuracy) so far = 165.927
Sent <em>1</em>
Received -1th digit as 1000
Sent <em>2</em>
Received 1th digit as 4
Divergence from PI (to 10000 accuracy) so far = 9.67654
Sent <em>3</em>
Received 2th digit as 3
Divergence from PI (to 10000 accuracy) so far = 2.35232
Sent <em>4</em>
Received -1th digit as 1000
Sent <em>5</em>
Received 3th digit as 15
Divergence from PI (to 10000 accuracy) so far = 0.0634988
Sent <em>6</em>
Received 4th digit as 6
Divergence from PI (to 10000 accuracy) so far = 0.00627833
Sent <em>7</em>
&hellip;
Sent <em>249</em>
Received 246th digit as 1
Divergence from PI (to 10000 accuracy) so far = 0.00597909
Sent <em>250</em>
Received 247th digit as 0
Divergence from PI (to 10000 accuracy) so far = 0.00597909
Sent <em>251</em>
Received 248th digit as 11
Divergence from PI (to 10000 accuracy) so far = 0.00597909
Sent <em>252</em>
Received 249th digit as 3
Divergence from PI (to 10000 accuracy) so far = 0.00597909
Sent <em>253</em>
^C</p>

<p>$ ./client localhost 9090
Connecting to localhost:9090
Digit: 0&hellip;Value: 2
Digit: 1&hellip;Value: 4
Digit: 3&hellip;Value: f
Digit: 6&hellip;Value: 8
Digit: 9&hellip;Value: 5
Digit: 13&hellip;Value: 8
Digit: 17&hellip;Value: 0
Digit: 21&hellip;Value: 7
&hellip;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reddit DailyProgrammer Getting Started]]></title>
    <link href="http://agam.github.io/blog/2013/11/19/reddit-dailyprogrammer-getting-started/"/>
    <updated>2013-11-19T18:57:00-08:00</updated>
    <id>http://agam.github.io/blog/2013/11/19/reddit-dailyprogrammer-getting-started</id>
    <content type="html"><![CDATA[<p>In the vein of &ldquo;Always Be Coding&rdquo;, I stumbled across this subreddit: <a href="http://www.reddit.com/r/dailyprogrammer/">&ldquo;Daily
Programmer&rdquo;</a>, and then decided to do
the &lsquo;easy&rsquo; <a href="http://www.reddit.com/r/dailyprogrammer/comments/1qwkdz/111113_challenge_141_easy_checksums/">question on the
top</a></p>

<p>Here&rsquo;s the gist (problem in comments at the bottom).</p>

<p>{% gist 7556916 %}</p>
]]></content>
  </entry>
  
</feed>
