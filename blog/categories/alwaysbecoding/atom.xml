<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AlwaysBeCoding, | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/alwaysbecoding/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2014-01-08T08:54:25+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming Fun: Braille]]></title>
    <link href="http://agam.github.io/blog/2014/01/07/programming-fun-braille/"/>
    <updated>2014-01-07T23:31:00+00:00</updated>
    <id>http://agam.github.io/blog/2014/01/07/programming-fun-braille</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a simple <a href="http://www.reddit.com/r/dailyprogrammer/comments/1s061q/120313_challenge_143_easy_braille/">one</a>.</p>

<p>```</p>

<h2>Input Description</h2>

<p>Input will consistent of an array of 2x6 space-delimited Braille characters.
This array is always on the same line, so regardless of how long the text is, it
will always be on 3-rows of text. A lowered bump is a dot character &lsquo;.&rsquo;, while a
raised bump is an upper-case &lsquo;O&rsquo; character.</p>

<h2>Output Description</h2>

<p>Print the transcribed Braille.
```</p>

<p>{% gist 8308823 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Fun: Banquet Planning]]></title>
    <link href="http://agam.github.io/blog/2014/01/07/programming-fun-banquet-planning/"/>
    <updated>2014-01-07T02:27:00+00:00</updated>
    <id>http://agam.github.io/blog/2014/01/07/programming-fun-banquet-planning</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s <a href="http://www.reddit.com/r/dailyprogrammer/comments/1rnrs2/112813_challenge_137_intermediate_hard_banquet/">another</a> daily programming problem:</p>

<p>```</p>

<h2>Input Description</h2>

<p>On standard console input, you will be given two space-delimited integers, N and M. N is the number of food items, while M is the number of food-relationships. Food-items are unique single-word lower-case names with optional underscores (the &lsquo;<em>&rsquo; character), while food-relationships are two food items that are space delimited. All food-items will be listed first on their own lines, then all food-relationships will be listed on their own lines afterwards. A food-relationship is where the first item must be served before the second item.
Note that in the food-relationships list, some food-item names can use the wildcard-character &lsquo;<em>&rsquo;. You must support this by expanding the rule to fulfill any combination of strings that fit the wildcard. For example, using the items from Sample Input 2, the rule &ldquo;turkey</em> *</em>pie&rdquo; expands to the following four rules:
turkey almond_pie
turkey_stuffing almond_pie
turkey pecan_pie
turkey_stuffing pecan_pie
A helpful way to think about the wildcard expansion is to use the phrase &ldquo;any item A must be before any item B&rdquo;. An example would be the food-relationship &ldquo;*pie coffee&rdquo;, which can be read as &ldquo;any pie must be before coffee&rdquo;.
Some orderings may be ambiguous: you might have two desserts before coffee, but the ordering of desserts may not be explicit. In such a case, group the items together.</p>

<h2>Output Description</h2>

<p>Print the correct order of food-items with a preceding index, starting from 1. If there are ambiguous ordering for items, list them together on the same line as a comma-delimited array of food-items. Any items that do not have a relationship must be printed with a warning or error message.</p>

<p>```</p>

<p>The second sample input (to take an example) is as follows:</p>

<p><code>
8 5
turkey
pecan_pie
salad
crab_cakes
almond_pie
rice
coffee
turkey_stuffing
turkey_stuffing turkey
turkey* *_pie
*pie coffee
salad turkey*
crab_cakes salad
</code></p>

<p>So this implies a graph that looks something like this:</p>

<p>{% img center /images/programming-fun/graph-dependency-1.jpg 300 %}</p>

<p>Or, if you wish, with the arrows reversed, like this:</p>

<p>{% img center /images/programming-fun/graph-dependency-2.jpg 300 %}</p>

<p>So it&rsquo;s possible to start from the first <code>root</code> node, labelling it as <code>0</code> and its neighbors as <code>1</code>. This process can be repeated, with its neighbors' neighbors being labelled as <code>2</code>, and so on, until there are no nodes left to label.</p>

<p>{% img center /images/programming-fun/graph-dependency-3.jpg 300  %}</p>

<p>Once all nodes are labelled, the solution is just a pairing of these numbers and the corresponding nodes.</p>

<p>{% gist 8293739 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ranked Voting]]></title>
    <link href="http://agam.github.io/blog/2013/12/19/ranked-voting/"/>
    <updated>2013-12-19T02:23:00+00:00</updated>
    <id>http://agam.github.io/blog/2013/12/19/ranked-voting</id>
    <content type="html"><![CDATA[<p>This one might actually make for a medium level interview question (assuming the problem can be successfully communicated)</p>

<p>Here is <a href="http://www.reddit.com/r/dailyprogrammer/comments/1r2mcz/112013_challenge_136_intermediate_ranked_voting/">the problem</a> (also found at the bottom of the gist)</p>

<p>{% gist 8033346 %}</p>
]]></content>
  </entry>
  
</feed>
