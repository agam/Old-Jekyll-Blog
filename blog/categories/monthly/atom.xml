<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monthly | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/monthly/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2016-04-26T22:40:47-07:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monthly Prog/Math/Sci summary: April 2016]]></title>
    <link href="http://agam.github.io/blog/2016/04/26/monthly-prog-slash-math-slash-sci-summary-april-2016/"/>
    <updated>2016-04-26T22:39:42-07:00</updated>
    <id>http://agam.github.io/blog/2016/04/26/monthly-prog-slash-math-slash-sci-summary-april-2016</id>
    <content type="html"><![CDATA[<p>Ok, so here’s this month’s curated list of interesting Math/Sci/Programming <em>stuff</em>. <strong>Note</strong>: this isn’t stuff that <em>happened</em> this month, it’s stuff that <em>I came across</em> this month.</p>

<ul>
<li>To start off with something <em>fun</em>, Gilad Bracha (I try not to miss anything by him) <a href="https://devchat.tv/ruby-rogues/250-rr-programming-language-evolution-and-design-with-gilad-bracha">joins the discussion</a> at <em>Ruby Rogues</em>, they all talk about Dart and Smalltalk and Newspeak, and much hilarity ensues. So, if you’re into that sort of thing.</li>
</ul>


<blockquote><p>GILAD:  And the thing is once you get used to the machine doing it for you it&rsquo;s really hard to go back to the Stone Age. Smalltalk or Smalltalk-like systems, they give you in certain ways the life of luxury. It&rsquo;s so nice that you can, when something goes wrong you can always find out exactly what the state of the objects were and say, “Oh, this is wrong.” And I don&rsquo;t have to restart things to get back there if I figured out what&rsquo;s wrong or I have a hunch what&rsquo;s wrong. I can just change it and tweak it and go forward a lot of times, which is something that again you have to experience because people tend to not believe that. But you usually can not only make the change but you can very often keep going even though the program was wrong. You can adjust its state now a bit and say, “Okay, let&rsquo;s assume that this is now consistent. I can keep moving and see what happens.” <strong>And you get so comfortable with that and it&rsquo;s so much more pleasant that after that yeah, you ramble on about it like I do.</strong></p></blockquote>

<p>Yeah, watch it, it&rsquo;s all good stuff.</p>

<ul>
<li>Something to jog your preconceived notions about what “object oriented” means: a paper from twenty years ago, titled <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.56.4713"><em>”Classes vs. Prototypes &ndash; Some Philosophical and Historical Observations”</em></a></li>
</ul>


<blockquote><p>The distinction between class-based and prototype-based systems reflects a long-lasting philosophical dispute concerning the representation of abstractions. <strong>Plato viewed forms — stable, abstract, “ideal” descriptions of things — as having an existence more real than instances of those things in the real world</strong>. Class-based languages such as Smalltalk, C++ or Simula are Platonic in their explicit use of classes to represent similarity among collections of objects. Prototype-based systems such as Self [UnS87], Omega [Bla91, Bla94], Kevo [Tai92, Tai93], GlyphicScript [Gly94] and NewtonScript [SLS94] represent <strong>another view of the world, in which one does not rely so much on advance categorization and classification, but rather tries to make the concepts in the problem domain as tangible and intuitive as possible</strong>.</p></blockquote>

<ul>
<li><p>And if you liked that, you’ll like <a href="https://www.youtube.com/watch?v=8nfrC-YLYqc">this discussion</a> with David Ungar, the man behind the <em>Self</em> programming language. In case you never heard of it before (as I hadn’t, until recently), that’s where Javascript gets its concept of <em>”prototype”</em> from. And if you’re <em>still</em> hungry for more, see <a href="http://www.infoq.com/presentations/oop-language-context">this presentation</a> titled <em>”Dancing with Symmetry to Harness the Power of Complexity: Subjective Programming in Context”</em></p></li>
<li><p>A set of ten <a href="http://www.allthingsdistributed.com/2016/03/10-lessons-from-10-years-of-aws.html">“learnings”</a> from ten years of AWS. If I had to pick, I’d say the hardest directive would be to <em>”build evolvable systems”</em>, because that almost never happens.</p></li>
<li><p>Someone finally wrote what I&rsquo;ve been thinking for a while &hellip; the answer for &ldquo;how to do X&rdquo; can&rsquo;t always be &ldquo;oh, just use plugin Y” (or, <a href="http://amasad.me/2016/01/03/overcoming-intuition-in-programming/"><em>”How to overcome intuition in programming”</em></a>).</p></li>
<li><p>Marvin Minsky passed away early this year; <a href="http://web.media.mit.edu/~minsky/papers/TuringLecture/TuringLecture.html">here</a> is his 1970 Turing Award lecture, which opens with this interesting sentence:</p></li>
</ul>


<blockquote><p>The trouble with computer science today is an obsessive concern with form instead of content.</p></blockquote>

<p>It’s as true today as it was then, right? :)</p>

<ul>
<li><p>This is something I’ve come across many times before, so skip it if you’ve seen it, or skip it anyway; it’s basically a bunch of Haskell insider jokes, laid out as <a href="http://www.willamette.edu/~fruehr/haskell/evolution.html"><em>”The Evolution of a Haskell Programmer”</em></a>, starting from a freshman, going all the way to a post-doc, and ending, on an anti-climactic note, with the tenured professor.</p></li>
<li><p>This one fulfills this month’s “rant quota”: Brian Will, slightly infamous for ranting against Object-Oriented Programming, talks about <a href="https://www.youtube.com/watch?v=L9v4Mg8wi4U&amp;list=WL&amp;index=6"><em>”Replacing the Unix tradition”</em></a></p></li>
<li><p>Another post in the <em>counter-intuitive</em> category: <a href="http://ib-krajewski.blogspot.com/2015/11/ocaml-and-multithreading.html">the best defense</a> I’ve yet seen for <em>not</em> using shared-memory multithreading, using OCaml as an example.</p></li>
</ul>


<blockquote><p>… parallel processing plus message passing is a much safer model that multithreading …</p></blockquote>

<ul>
<li>Finally, to end on a similar note to which we began, the amazing Eugenia Cheng (look her books up) talks about <a href="https://www.youtube.com/watch?v=h2p68JjSUH0"><em>”How to Bake &lsquo;How to Bake Pi&rsquo;: Reflections on Making Abstract Math Palatable”</em></a>; it’s targeted at people of all ages, and tries to make math fun again!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Prog/Math/Sci summary: March 2016]]></title>
    <link href="http://agam.github.io/blog/2016/04/04/monthly-prog-slash-math-slash-sci-summary-march-2016/"/>
    <updated>2016-04-04T19:50:13-07:00</updated>
    <id>http://agam.github.io/blog/2016/04/04/monthly-prog-slash-math-slash-sci-summary-march-2016</id>
    <content type="html"><![CDATA[<p>(<em>Meta</em>: This month&rsquo;s post is late because I was on vacation)</p>

<p>March&rsquo;s list of curated <em>stuff</em>:</p>

<ul>
<li><p>A <a href="http://ethw.org/Main_Page">grab bag</a> of engineering and technology history: lots of interesting stuff here, such as <a href="http://ethw.org/Creating_Magnetic_Disk_Storage_at_IBM">this overview</a> of early disk storage</p></li>
<li><p><a href="https://www.youtube.com/watch?v=RdE-d_EhzmA">A talk</a> by David West on how &ldquo;Object Oriented Programming&rdquo; has been misunderstood (I ended up buying his book <a href="http://www.amazon.com/Object-Thinking-Developer-Reference-David/dp/0735619654"><em>&ldquo;Object Thinking&rdquo;</em></a>)</p></li>
<li><p>Stumbled across this PhD thesis from 1991 by John Sturdy titled <a href="http://www.cb1.com/~john/thesis/thesis.html"><em>&ldquo;A Lisp through the Looking Glass&rdquo;</em></a>; it seemed vaguely similar to the <em>Black</em> system in Scheme that Nadia demoed a while ago at Strangeloop. Anyway, while I don&rsquo;t quite understand it, there is much coolness here.</p></li>
</ul>


<blockquote><p>This thesis presents a new architecture for programming language interpreters, <strong>in which interpreters are not only first-class values, but are also arranged in a tower of meta-circular interpretation</strong> which is accessible reflectively&mdash;-so that a program may modify elements of the meta-circular tower under which it runs, and thus cause changes in the manner of its own interpretation.</p>

<p>To facilitate such modification, we develop a representation for interpreters that splits each interpreter into a language (a collection of independently implemented constructs) and an evaluator (connecting the constructs together).</p>

<p>To implement such a mutable infinite meta-circular interpreter, we need another interpreter outside the tower, the meta-evaluator. We present this, along with a systematic way of linking it to the meta-circular tower. We show that a further form of meta-circularity may be introduced by bringing the meta-evaluator into the reflectively accessible part of the system; and that this may be repeated without limit, using the same techniques.</p></blockquote>

<ul>
<li><p>Gregory Chaitin wrote an essay on <a href="http://inference-review.com/article/doing-mathematics-differently"><em>&ldquo;Doing Mathematics Differently&rdquo;</em></a>, in which he seems to encourage an experimental branch of mathematics, similar to physics.</p></li>
<li><p>Another essay, this time by Simon Schaffer titled <a href="http://www.imaginaryfutures.net/2007/04/16/babbages-intelligence-by-simon-schaffer/"><em>&ldquo;Babbage&rsquo;s Intelligence&rdquo;</em></a>, which is ridiculously long and meanders endlessly, and is worth reading only for the fascinating nuggets buried here and there.</p></li>
</ul>


<blockquote><p>In his address to the Society in early 1824, the Society’s president, the financier, mathematician and orientalist Henry Colebrooke, summed up the significance of Babbage’s planned device. He referred to contemporary developments of industrial machinery only to contrast them with the Difference Engine. “In other cases, mechanical devices have substituted machines for simpler tools or for bodily labour….But the invention to which I am adverting comes in place of mental exertion: it substitutes mechanical performance for an intellectual process”. In other words, <strong>“Mr Babbage’s invention puts an engine in place of the computer”</strong>.</p>

<p>As Babbage and his allies among the political economists showed, the disaggregation of the production process into its simplest components allowed a series of economies and practices of surveillance. Mechanized production required strict discipline. The same was true of the Analytical Engine. Parcelling the processes of Lagrangean algebra into specific components allowed the increase in speed of the machine, the transformation of infinities of space into manageable durations of time, the most economical recompense to each component in terms of consumed power (if mechanical) or consumed wages (if human). “<strong>The whole history of the invention has been a struggle against time</strong>”, Babbage wrote in 1837. The replacement of individual human intelligence by machine intelligence was as apparent in the workshop as in the engines. In the former, this task was both politically and economically necessary. “One great advantage which we derive from machinery is the check which it affords against the inattention, idleness or the dishonesty of human agents”. This set of failings could produce erroneous astronomical tables, hence the significance of Prony’s reports on the performance of the least intelligent computers when subject to the right management. Unreliable agents could also form trade union combinations, which, Babbage held, were always “injurious” to the workforce itself. His aim here was to contest the influence of “designing persons” and show the working classes that <strong>“the prosperity and success of the master manufacturer is essential to the welfare of the workman”</strong>, even though “I am compelled to admit that this connexion is in many cases too remote to be understood by the latter”.</p>

<p>This problem of the geography of intelligence depended on the fetishisation of the machines and the reification of the labour power exerted around them. As Raphael Samuel has demonstrated, mid-Victorian industrial mechanization was accompanied by the preservation, intensification and expansion of skilled manual labour throughout the economy. “The mid-Victorian engineer was still characteristically a craftsman, an artisan or mechanic rather than an operative or hand”. [67] The representation of this dual process of the intensification of skill and the subordination of mechanization involved a remarkable balancing act amongst the commentators on the factory system. In the report of his Lancashire tour during the Chartist general strike of 1842, in which almost every cotton works was closed, Cooke Taylor premised that “the diffusion of the Factory System has created a larger demand than previously existed for intelligence and contrivance” among the workforce, and deduced that <strong>the machines themselves could not, or should not, be granted tyrannic power</strong>. “The operatives are stringently ruled by their own consent…So strange a combination of perfect despotism with perfect freedom never before existed, and to have produced such a state is one of the noblest triumphs of morality and intelligence”. [68] <strong>The problem remained. Whose intelligence had produced this splendid state of voluntary servitude and supreme skill? Protagonists of the cotton masters had no doubt – it flowed from the machines themselves</strong>. Thus Edward Baines, a veteran lecturer against the Chartists on the benefits of rapid automation, argued in his history of the cotton industry that “all the precision, power and incessant motion belong to the machines alone, and the work-people have merely to supply them with work”. The embodiment of skill within the automatic system was used to distract attention from the labour power exerted by the workforce itself. The most hostile critics of the machine economy, such as the Liberal Manchester medic Peter Gaskell, countered that it followed that any worker would be <strong>“reduced to a mere watcher or feeder of his mighty assistant”, and that “the struggle carrying on between human power on the one hand, and steam aided by machinery, is gradually approaching a crisis”</strong>.</p>

<p>The apotheosis of the intelligent machine was an integral part of Babbage’s ambitious programme. This programme has been used here to illuminate the complex character of systematic vision in the Industrial Revolution. In the Ninth Bridgewater Treatise, <strong>the system was coextensive with the universe, and Babbage explained that its order and logic would only be visible from a privileged point of view</strong>. In his surveys of the factories and workshops, Babbage set out to reveal the systematic character of the machine economy by pointing out the rationale of the production, distribution and deployment of power in the workshops of industrial Britain. In his project to build intelligent calculating engines, he attempted to represent himself as the intellectual manager of the complex labour relations of the machine-tool industry, initially disastrously, and then as part of his overall vision of a newly rational system of automatic precision engineering. In the setting of early Victorian society, <strong>the connections between these spheres of theological, political and technological work cannot be seen as merely metaphorical. These techniques helped make a new social order and a new form of knowledge.</strong></p></blockquote>

<ul>
<li><p>A fascinating <a href="http://www.gmunk.com/OBLIVION-GFX">account</a> of the special effects work on the movie <em>&ldquo;Oblivion&rdquo;</em></p></li>
<li><p>Dave Baggett at Gamasutra describes <a href="http://www.gamasutra.com/blogs/DaveBaggett/20131031/203788/My_Hardest_Bug_Ever.php"><em>&ldquo;my hardest bug ever&rdquo;</em></a>, where setting the timer to a high enough clock rate interfered with the baud rate (??). I would hate to have a problem like that.</p></li>
<li><p>Luke Gorrie shows how a modern CPU is complicated enough <a href="https://github.com/lukego/blog/issues/15">to be thought of</a> as a distributed programming system.</p></li>
</ul>


<p>Finally, if you too get irritated by the mention of the word <em>&ldquo;agile&rdquo;</em>, <a href="https://www.youtube.com/watch?v=hG4LH6P8Syk">Robert Martin explains</a> how it started and how it became so bad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Prog/Math/Sci summary: February 2016]]></title>
    <link href="http://agam.github.io/blog/2016/02/26/monthly-prog-slash-math-slash-sci-summary-february-2016/"/>
    <updated>2016-02-26T23:57:08-08:00</updated>
    <id>http://agam.github.io/blog/2016/02/26/monthly-prog-slash-math-slash-sci-summary-february-2016</id>
    <content type="html"><![CDATA[<p>I said I’d pick a better name, but I couldn’t, so I picked a <em>different</em> name instead. Anyway, here is February’s badly curated list:</p>

<ul>
<li>You may have come across <a href="http://www.templeos.org">TempleOS</a>, one of those crazy things made by crazy people, and it looks like <a href="http://web.archive.org/web/20060702135534/http://www.losethos.com/"><em>“LoseThos”</em></a> was a predecessor (<strong>note</strong>: that it is available at all is due to the ever-amazing “Wayback Machine”)</li>
</ul>


<blockquote><p><strong>You used to buy a computer to program. They didn&rsquo;t do much else</strong>. LoseThos is intended for hobbiest programmers. A working knowledge of C programming is required. It more or less runs on least common denominator PC hardware without networking or the Internet. It is retro in some respects, having no security. As a programmer, I like having full access to my machine &mdash; being able to turn-off interrupts or do direct disk block access. It is highly textual, so things can be scripted.  It boots fast, and you can power-off whenever you feel like, but just don&rsquo;t do it during disk writes.</p></blockquote>

<ul>
<li><p>Someone pointed me to the <a href="https://lab.open.wolframcloud.com/app/">“Wolfram Programming Lab”</a> … I’ve only looked at it superficially, but it might be a good alternative to <em>Scratch</em>, as an initial introduction to programming that “makes things happen”</p></li>
<li><p>This is a theme that I like to share and re-share: Anil Dash talks about <a href="https://www.youtube.com/watch?v=9KKMnoTTHJk">“The Web We Lost”</a> (tl;dr: <strong>the internet we have is not the internet we were promised</strong>)</p></li>
<li><p>I was no fan of Robert Martin, perhaps because I wrongly associated him with excessive “bureaucracy” in software engineering, but it’s clear I was wrong, because <a href="http://www.infoq.com/presentations/history-future-programming-languages"><em>this</em></a> is a <em>great</em> talk, and is one of the few people (other than, say, Alan Kay), who’ve made this connection between the changes in the “culture” of software development and its “popularization”.</p></li>
<li><p><a href="https://www.youtube.com/watch?v=K13_sWm_gZw">This talk</a> by John McCarthy wasn’t particularly interesting, except for a choice quote that’s sure to offend certain “GPL fundamentalists” out there:</p></li>
</ul>


<blockquote><p>I think that <strong>Richard Stallman who has been a hero in many respects, has been a negative force in his view that anything/everything should be free and no one should have to pay for anything unless Stallman would think of a mechanism</strong> … where my daughter who is a professional writer would still be able to make money.</p></blockquote>

<ul>
<li><p>Daniel Spiewak talks about <a href="http://www.infoq.com/presentations/post-functional-scala-clojure-haskell">“Living in a Post-Functional World”</a>. I thought this would be meh, but turned out to be very insightful, and also indicates how close FP and OO really are. More to the point, <strong>since modularity is non-negotiable, any solution to the problem of modularity drags in OO-ish stuff into an FP language</strong>.</p></li>
<li><p>Someone (thanks, @Beobachter!) suggested using <a href="http://learn.getgrav.org/basics/what-is-grav"><em>Grav</em></a>, an intermediate alternative to a fully-static blog (what I have right now), and a fully-dynamic one (e.g. Wordpress), but I’ve been too lazy to investigate how to make the switch.</p></li>
<li><p>Here is a (very, very humorous!) piece in The Register, <a href="http://www.theregister.co.uk/2016/01/13/stob_remember_the_monoids/"><em>”Learn you Func Prog on five minute quick!”</em></a></p></li>
</ul>


<blockquote><p>The object-oriented era of coding is at last drawing to an inevitable and shameful close. We can – and we must! – all join hands and skip gaily into a brave new world, where sloppy state and careless side effects are excised without ruth.</p>

<p>Now every program, from humble Android applet to mighty engine-pollution-test-falsifier, must slough off ridiculous trappings and clumsy complexities of objectivity, and float elegantly forwards down the shiny new functional pipeline – the one, true alimentary canal of code to concurrent computing paradise.</p></blockquote>

<p>And so on.</p>

<ul>
<li>Finally, Gilad Bracha’s <a href="http://www.amazon.com/Dart-Programming-Language-Gilad-Bracha/dp/0321927702?tag=duckduckgo-osx-20">new book</a> is very enticing; I’ve placed it on my “soon-to-read-unless-I’m-lying-to-myself-about-my-available-free-time” list, and so should you.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Programming summary: January 2016]]></title>
    <link href="http://agam.github.io/blog/2016/01/25/monthly-programming-summary-january-2016/"/>
    <updated>2016-01-25T23:22:06-08:00</updated>
    <id>http://agam.github.io/blog/2016/01/25/monthly-programming-summary-january-2016</id>
    <content type="html"><![CDATA[<p>Again, this isn’t really restricted to <em>Programming</em> per se, but more generally “computer-related stuff”. Next time, I’ll pick a better name. Until then, here are a few interesting links I came across last month, in no  particular order:</p>

<ul>
<li>The Handbook of Lisp Functions (cover page below): a <a href="http://www.softwarepreservation.org/projects/LISP/mblisp/Handbook_of_LISP_Functions.pdf">technical report</a> from <em>1961</em>.</li>
</ul>


<p><img class="<a" src="href="https://doc-14-48-docs.googleusercontent.com/docs/securesc/o7m1hv4d96s4jtg9a81aobcff174890t/49eh1go9f5v2i53agksqnv1ghn4m8mj9/1453780800000/03675759775475626385/03675759775475626385/0B7bvhABhpDqmMmRPQmRvWXpkZTg">https://doc-14-48-docs.googleusercontent.com/docs/securesc/o7m1hv4d96s4jtg9a81aobcff174890t/49eh1go9f5v2i53agksqnv1ghn4m8mj9/1453780800000/03675759775475626385/03675759775475626385/0B7bvhABhpDqmMmRPQmRvWXpkZTg</a>"></p>

<ul>
<li><p>Digression on learning new languages: Ugh, I’m too embarassed to even write this. I keep changing my mind about what I like more. I thought this was going to be “the year of Clojure” for me, but then <a href="http://www.amazon.com/Dart-Programming-Language-Gilad-Bracha/dp/0321927702#">Gilad Bracha’s book</a> came out and now I’m torn again (Can I have them <em>both</em>? Maybe, but I fear I don’t have that kind of time anymore :P)</p></li>
<li><p>Busting the myths behind MicroKernels: <a href="http://blog.darknedgy.net/technology/2016/01/01/0/"><em>”Microkernels are slow and Elvis didn’t do no drugs”</em></a></p></li>
<li><p>Here is a paper from 1982 (<a href="http://www.smecc.org/The%20Architecture%20%20of%20the%20Burroughs%20B-5000.htm"><em>”The Architecture of the Burroughs B5000 &ndash; 20 Years Later and Still Ahead of the Times?”</em></a>), which was <em>even then</em> lamenting the sorry state of hardware, and only seems quaint now (as in <em>”why would you do things different?”</em>)</p></li>
<li><p>Various ways to make Clojure programming more productive: <a href="http://dev.solita.fi/2014/03/18/pimp-my-repl.html"><em>”Pimp My REPL”</em></a></p></li>
<li><p>I had a bunch of entertaining blog posts by Crista Lopez in the past (e.g. <a href="http://tagide.com/blog/fiction/jedi-masters/"><em>”Jedi Masters”</em></a>), but was blown away by this set of slides. You’re a programmer, you want to be a programmer for life, you <em>have</em> to read this: <a href="http://gotocon.com/dl/goto-aar-2013/slides/CristinaVideiraLopes_ExercisesInStyle.pdf"><em>”Exercises in Programming Style”</em></a>. And if you really like it, <a href="http://www.amazon.com/Exercises-Programming-Style-Cristina-Videira/dp/1482227371">get the book</a>.</p></li>
<li><p>Came across this intriguing indie film trailer (<a href="https://vimeo.com/147111732"><em>”TraceRoute”</em></a>), though I haven’t gotten around to seeing the movie yet (the writer/protagonist navigates “… the ghosts of nerddom’s past present and future …”). Dunno, added it to my “to watch” list.</p></li>
<li><p>Obviously, the X-Files is back. If you like this sort of stuff, the first episode <a href="http://www.fox.com/watch/607308867569/7756658688">is free to watch</a> on Fox. Go watch it :)</p></li>
<li><p>A couple of articles for “historical interest”. The first is the New York Times reporting on … <a href="http://www.nytimes.com/1996/01/22/business/the-new-york-times-introduces-a-web-site.html">the opening of its web site, in 1996!</a>. But really, you skip ahead to the very last line for your dose of irony-or-tragedy: <em>“The market is booming for newspapers on the World Wide Web”</em>. Ouch.</p></li>
<li><p>The second is hilarious, from even further back (<a href="http://www.nytimes.com/1984/12/25/science/value-of-windowing-is-questioned.html"><em>”Value of Windowing is Questioned”</em></a>, 1984!!), and here the Times speculates on the dubious value of a graphical user interface. The opening line asks: <em>“Does anyone do windows any more?”</em>, and the article concludes by predicting “doom” for the upcoming new OS by Microsoft. I thought I’d see if the author had time to reflect on his past predictions, so I looked through the newspaper’s archives, but it looks like he stopped writing technology articles in 1987 and switched to Food and Travel. Anyway.</p></li>
</ul>


<p>Here’s a “quote of the month” for you:</p>

<blockquote><p>Science is much more ‘sloppy’ and ‘irrational’ than its methodological image.</p></blockquote>

<p>(Paul Feyerabend, <em>Against Method</em>, and I meant to refer to the so-called science of computers)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monthly Programming summary: December 2015]]></title>
    <link href="http://agam.github.io/blog/2015/12/26/monthly-programming-summary-december-2015/"/>
    <updated>2015-12-26T20:46:30-08:00</updated>
    <id>http://agam.github.io/blog/2015/12/26/monthly-programming-summary-december-2015</id>
    <content type="html"><![CDATA[<p>A second installment of &ldquo;interesting stuff I came across this month&rdquo; &hellip;</p>

<p>(<em>Aside:</em> I shouldn&rsquo;t call this a &ldquo;programming&rdquo; summary, but I can&rsquo;t think of anything better &mdash; it&rsquo;s more of a &ldquo;math + science + computers&rdquo; newsletter)</p>

<ul>
<li><p>The highlight of the last month for me was the realization of the dream of an ultra-cheap computer, the <a href="https://www.raspberrypi.org/blog/raspberry-pi-zero/">Raspberry Pi Zero</a>, which is cheaper than several drinks at Starbucks.</p></li>
<li><p>Yes, ants displaying &ldquo;collective intelligence&rdquo; is old stuff (I first encountered a reference to it in the pages of <em>Godel, Escher, Bach</em>), but <a href="http://www.kurzweilai.net/army-ants-living-bridges-suggest-collective-intelligence">this article</a> is something else altogether, showing how &ldquo;living bridges&rdquo; are dynamically adjusted by the constituent ants, in response to foraaging needs.</p></li>
<li><p><em>&ldquo;Get Lamp&rdquo;</em> (<a href="https://www.youtube.com/watch?v=UwZxUGmqSOo">link to trailer</a>) is an interesting documentary on the history of interactive text-based fiction, mostly adventure games. If you&rsquo;ve ever telneted to a MUD, you will like this.</p></li>
<li><p>I lap up everything by Bret Victor, and hope for him to turn out as the Alan Kay of our time. <a href="https://medium.com/re-form/the-utopian-ui-architect-34dead42a28#.emrat4pnv">This</a> is aanother recent piece where he insists we haven&rsquo;t really <em>used</em> computers well at all.</p></li>
<li><p>Finally, <a href="http://www.popularmechanics.com/military/weapons/a18343/the-cannons-on-the-b-29-bomber-were-a-mid-century-engineering-masterpiece/">this Popular Mechanics article</a> blew me away &mdash; before there were &ldquo;real&rdquo; computers, the B-29 Superfortress had high-tech computing <em>way</em> ahead of its time, to remotely operate its gun turrets. Obligatory youtube video below:</p></li>
</ul>


<iframe width="560" height="315" src="https://www.youtube.com/embed/nskFayhBcy0" frameborder="0" allowfullscreen></iframe>


<p>This month&rsquo;s QOTM is from Bret Victor&rsquo;s piece above:</p>

<blockquote><p>Now we’re staring at computer screens and moving our hands on a keyboard, but it’s basically the same thing. <strong>We’re computer users thinking paper thoughts.”</strong></p></blockquote>
]]></content>
  </entry>
  
</feed>
