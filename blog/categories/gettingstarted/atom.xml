<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gettingstarted | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/gettingstarted/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2014-12-17T12:19:07-08:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Up and Running: Scala, Sbt, Ensime]]></title>
    <link href="http://agam.github.io/blog/2014/07/30/up-and-running-with-scala/"/>
    <updated>2014-07-30T12:31:30-07:00</updated>
    <id>http://agam.github.io/blog/2014/07/30/up-and-running-with-scala</id>
    <content type="html"><![CDATA[<p>The &ldquo;Getting started&rdquo; section of the &ldquo;Functional Programming with Scala&rdquo; course mentions using Eclipse to build the first &lsquo;hello world&rsquo; kind of project, but if you&rsquo;d rather not get out of your Emacs comfort zone, there is a different way to do the same (credits to numerous online sources).</p>

<ul>
<li><p>Install <code>sbt</code> (<code>sudo apt-get install sbt</code>) and <code>scala</code> (download <a href="http://www.scala-lang.org/download/">from here</a>)</p></li>
<li><p>Install the <code>ensime</code> plugin for <code>sbt</code>: Create a directory <code>~/.sbt/0.13/plugins</code>, and create <code>plugins.sbt</code></p></li>
</ul>


<p><code>scala
resolvers += "Sonatype releases" at "https://oss.sonatype.org/content/repositories/releases"
addSbtPlugin("org.ensime" % "ensime-sbt-cmd" % "0.1.2")
</code></p>

<ul>
<li><p>Install the <code>scala-mode2</code> Emacs: if you have Emacs24, this is as straightforward as running <code>M-x package-list-packages</code> and finding it)</p></li>
<li><p>Install <code>ensime</code>: <a href="https://github.com/ensime/ensime-server/downloads">Download</a> the latest <code>.tar.gz</code>, and install it somewhere under <code>.emacs.d</code>, then modify your <code>.emacs</code> to load the appropriate paths:</p></li>
</ul>


<p><code>
(add-to-list 'load-path "~/.emacs.d/ensime/elisp")
(require 'ensime)
(add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
</code></p>

<ul>
<li><p>Create a new directory: <code>mkdir helloworld; cd helloworld</code></p></li>
<li><p>Initialize the project: Create <code>build.sbt</code> with the following</p></li>
</ul>


<p><code>scala
name := "hello_world"
version := "1.0"
</code>
* Set up <code>ensime</code>: <code>sbt ensime generate</code></p>

<ul>
<li><p>Open a file (say) <code>Main.scala</code></p></li>
<li><p>Start <code>ensime</code> in Emacs: <code>M-x ensime</code> (say &lsquo;yes&rsquo; to various prompts). You should see something like &ldquo;ENSIME ready. May the _ be with you.&rdquo; in the minibuffer.</p></li>
<li><p>Add something in the file, e.g. (copying from the tutorial)</p></li>
</ul>


<p>```scala
package greeter</p>

<p>object Hello extends App {
  println(&ldquo;Hello World&rdquo;)
}
```</p>

<ul>
<li><p>Hit <code>C-c C-b v</code>, this brings up an <code>sbt</code> console <em>inside Emacs</em> (similar to how Slime works with Lisp)</p></li>
<li><p>Type <code>run</code> in the console, you should see something like</p></li>
</ul>


<p>```</p>

<blockquote><p>run
[info] Compiling 1 Scala source to /home/agam/Scala/hello-world/target/scala-2.10/classes&hellip;
[info] Running greeter.Hello
Hello World
[success] Total time: 2 s, completed Jul 30, 2014 5:03:35 PM
```</p></blockquote>

<p>&hellip; and that&rsquo;s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with clojure: Part 1]]></title>
    <link href="http://agam.github.io/blog/2014/01/29/getting-started-with-clojure-part-1/"/>
    <updated>2014-01-29T18:04:00-08:00</updated>
    <id>http://agam.github.io/blog/2014/01/29/getting-started-with-clojure-part-1</id>
    <content type="html"><![CDATA[<p>(Just a personal log so I don&rsquo;t forget some basic steps here. There may or may not be a Part 2)</p>

<h2>Setting up the REPL</h2>

<p>First, install relevant stuff. This is usually, at the minimum, something like <code>sudo apt-get install clojure1.4</code></p>

<p><code>
$ java -cp /usr/share/java/clojure-1.4.jar clojure.main
Clojure 1.4.0
user=&gt;
</code></p>

<h2>First steps</h2>

<p>Basic Arithmetic</p>

<p><code>
user=&gt; (+ 2 3)
5
</code></p>

<p>Basic string operation</p>

<p>```
user=> &ldquo;foo&rdquo;
&ldquo;foo&rdquo;</p>

<p>user=> (concat &ldquo;foo&rdquo; &ldquo;bar&rdquo;)
(\f \o \o \b \a \r)
```</p>

<p>Variables
```
user=> (def x 4)</p>

<h1>&lsquo;user/x</h1>

<p>user=> (+ x 5)
9</p>

<p>user=> (def strarr [&ldquo;foo&rdquo; &ldquo;bar&rdquo;])</p>

<h1>&lsquo;user/strarr</h1>

<p>```</p>

<p>Basic arrays</p>

<p>```
user=> (count [6 5 3 4 2])
5</p>

<p>user=> (get strarr 1)
&ldquo;bar&rdquo;</p>

<p>user=> (get strarr 0)
&ldquo;foo&rdquo;
```</p>

<p>Basic maps</p>

<p>```
user=> (def mymap {:foo &ldquo;Here is foo&rdquo; :bar &ldquo;&hellip; and here is bar!&rdquo;})</p>

<h1>&lsquo;user/mymap</h1>

<p>user=> (get mymap :bar)
&ldquo;&hellip; and here is bar!&rdquo;
```</p>

<p>Errors</p>

<p>```
user=> (^ 6 4)
IllegalArgumentException Metadata must be Symbol,Keyword,String or Map  clojure.lang.LispReader$MetaReader.invoke (LispReader.java:720)
4
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:170)</p>

<p>user=> (% 6 4)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: % in this context, compiling:(NO_SOURCE_PATH:2)
```</p>

<p>Stack Overflow (!)</p>

<p>```
user=> (defn foo [x] (foo (&ndash; x 1)))</p>

<h1>&lsquo;user/foo</h1>

<p>user=> (foo 4)
StackOverflowError   user/foo (NO_SOURCE_FILE:7)
```</p>

<p>Simple function</p>

<p>```
user=> (defn expt [x y] (if (= y 0) 1 (* x (expt x (&ndash; y 1)))))</p>

<h1>&lsquo;user/expt</h1>

<p>user=> (expt 6 4)
1296
```</p>

<p>Default REPL namespace (<code>user</code>)</p>

<p><code>
user=&gt; (user/expt 6 4)
1296
</code></p>

<h2>Programming primitives</h2>

<p>For loop</p>

<p><code>
user=&gt; (dotimes [_ 5] (println "Hello World."))
Hello World.
Hello World.
Hello World.
Hello World.
Hello World.
nil
</code></p>

<p>While loop</p>

<p><code>
user=&gt; (for [i (range 5) j (range 5) :when (and (&gt; i 0) (&lt; i j))] (println (* i j)))
(2
3
4
nil nil 6
8
nil nil 12
nil nil)
</code></p>

<p>Switch case</p>

<p><code>
user=&gt; (for [i (range 5) j (range 5)]
(case (* i j)
0 "zero"
(* i j)))
("zero" "zero" "zero" "zero" "zero" "zero" 1 2 3 4 "zero" 2 4 6 8 "zero" 3 6 9 12 "zero" 4 8 12 16)
</code></p>

<p>&hellip; the rest in Part 2, if there is one.</p>
]]></content>
  </entry>
  
</feed>
