<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: projecteuler | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/projecteuler/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-02-06T04:21:33+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Euler 23: Non-abundant sums]]></title>
    <link href="http://agam.github.io/blog/2015/02/01/euler-23-non-abundant-sums/"/>
    <updated>2015-02-01T19:01:00+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/01/euler-23-non-abundant-sums</id>
    <content type="html"><![CDATA[<p>Had a slice of free time, so decided to look at the next problem. Here&rsquo;s the initial naive solution:</p>

<p><code>``haskell
divisors n = [x | x &lt;- [1 .. n-1], n</code>mod` x == 0]</p>

<p>isAbundant n = n &lt; (sum $ divisors n)</p>

<p>abundants n = filter isAbundant $ [1 .. n]</p>

<p>expressSum z nums = not $ null [(x,y) | x &lt;&ndash; nums, y &lt;&ndash; nums, x + y == z]</p>

<p>sumAbundants n =
  let a = abundants n in</p>

<pre><code>      sum $ filter (\x -&gt; not $ expressSum x a) [1 .. n]
</code></pre>

<p>```</p>

<p>While it gave the correct answer, it did so in <code>3133.33</code> seconds, which is &hellip; embarrassing.</p>

<p>This is just <em>too</em> inefficient, even the following &hellip;</p>

<p>```lisp
(defun divisors (n)
  (loop for i from 1 below n</p>

<pre><code> when (= 0 (mod n i))
   collect i))
</code></pre>

<p>(defun abundantp (n)
  (&lt; n</p>

<pre><code> (reduce #'+ (divisors n))))
</code></pre>

<p>(defun abundants (n)
  (loop for i from 1 below n</p>

<pre><code> when (abundantp i)
   collect i))
</code></pre>

<p>(defun possible-summands (z nums)
  (loop for x in nums do</p>

<pre><code>   (loop for y in nums
  when (= z (+ x y)) do
    (return-from possible-summands (cons x y)))))
</code></pre>

<p>(defun sum-abundants (n)
  (let* ((ab (abundants n))</p>

<pre><code> (summands 
  (loop for i from 1 to n
     when (null (possible-summands i ab))
     collect i)))
(reduce #'+ summands)))
</code></pre>

<p>```</p>

<p>&hellip; takes no less than half as long, at <code>1329.168</code> seconds.</p>

<p>BTW why is <code>28123</code> the upper limit for this sequence? I had no idea, and found <a href="http://mathschallenge.net/full/sum_of_two_abundant_numbers">this explanation</a> (and tangentially, <a href="http://mathschallenge.net/view/even_sum_of_two_abundant_numbers">this one</a> too).</p>

<p>Anyway, I&rsquo;m ashamed to say I didn&rsquo;t put in the effort to learn how to profile Haskell programs (<em>next time ?</em>) and profiled the Lisp version instead, which showed that (<strong>duh</strong>) all the time was going in finding divisors. Obviously, we can just loop till the <em>square root of N</em> instead of looping <em>all the way to N</em>. After this change:</p>

<p>```lisp
(defun divisors (n)
(declare (type fixnum n))
  (loop for i from 1 below (floor (sqrt n))</p>

<pre><code> when (= 0 (mod n i))
   collect i))
</code></pre>

<p>```</p>

<p>&hellip; it runs in <code>38 milliseconds</code> !!</p>

<p>And a similar change to the Haskell version:</p>

<p><code>haskell
divisors :: Int -&gt; [Int]
divisors n = [x | x &lt;- [1 .. round $ sqrt $ fromIntegral n], n `mod` x == 0]
</code></p>

<p>gave the expected answer in <code>180 milliseconds</code>. Not bad (though it should be noted we&rsquo;re still an order of magnitude away in efficiency).</p>

<p><strong>Notes:</strong></p>

<ul>
<li><p>Haskell makes it very easy to quickly arrive at a <em>correct</em> solution, but the road from there to an <em>efficient</em> solution is less clear.</p></li>
<li><p>The brevity of the notation helps, but I get a feeling it&rsquo;s also due to the single-letter variable names &mdash; which is all right (and indeed well-suited) for a tiny math problem, but unclear whether it&rsquo;ll hold up for code in a large-scale project.</p></li>
<li><p>People usually jump to the <a href="">&ldquo;Programming Language shootout&rdquo;</a>, but if the code <em>there</em> is any indication, writing performant Haskell code is a dark art, and <em>the three-line quicksort is a devilish honeytrap</em>.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 22: Scoring names ?]]></title>
    <link href="http://agam.github.io/blog/2015/02/01/euler-22-scoring-names/"/>
    <updated>2015-02-01T05:01:13+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/01/euler-22-scoring-names</id>
    <content type="html"><![CDATA[<p>This one seemed simple but turned out to be a good showcase for a short haskell program (I&rsquo;m sure it can be shorter but IMHO that would probably approach <em>Perl-ness</em>)</p>

<p>```haskell
import qualified Data.Char as C
import qualified Data.List as L
import qualified Debug.Trace as T</p>

<p>charValue c = C.ord (C.toUpper c) &ndash; C.ord &lsquo;A&rsquo; + 1</p>

<p>nameValue n = sum $ map charValue n</p>

<p>nameProduct (name, index) = index * nameValue name</p>

<p>splitString c s =
  case break (== c) s of</p>

<pre><code>   ([], _:xs) -&gt; [xs]
   (y, _:xs) -&gt; [y] ++ splitString c xs
   (xs, []) -&gt; [xs]
</code></pre>

<p>getNameSum f =</p>

<pre><code> let w = splitString ',' $ filter (/= '\"') f
 in
    T.traceShow (length w)
    sum $ map nameProduct $ zip (L.sort w) [1 .. ]
</code></pre>

<p>getNames fileName =
  do</p>

<pre><code> f &lt;- readFile fileName
 return $ getNameSum f
</code></pre>

<p>```</p>

<p>I left the `traceShow' in there to give an example of the debugging I relied upon. Other than that, it was enjoyable, and I really do appreciate how much longer this would have been in most other languages.</p>

<p><strong>Notes:</strong></p>

<ul>
<li><p>I skipped the part about <em>sorting</em> the input and spent a long time (<em>unnecessarily!</em>) complaining about the <em>black-boxness</em> of the &ldquo;IO&rdquo;</p></li>
<li><p>I suspected the initial version had an off-by-one error; luckily <code>awk</code> was on hand to sanity check the number of words:</p></li>
</ul>


<p><code>sh
$ cat /tmp/p022_names.txt | tr ',' ' ' | tr '"' ' ' | tr -s " " | awk 'BEGIN { RS = " " }; END { print NR }'
5163
</code></p>

<ul>
<li>Just to dump it out there, the <em>other</em> way of checking the soundness of the logic:</li>
</ul>


<p>```lisp
(defun char-value &copy;
  (1+ (&ndash; (char-code c)</p>

<pre><code> (char-code #\A))))
</code></pre>

<p>(defun string-value (str)
  (loop for c across (string-upcase str)</p>

<pre><code>   sum (char-value c)))
</code></pre>

<p>(defun name-product (name index)
  (* index</p>

<pre><code> (string-value name)))
</code></pre>

<p>(defun range (n)
  (loop for i from 1 to n</p>

<pre><code> collect i))
</code></pre>

<p>(defun sum-names (names)
  (reduce #&lsquo;+</p>

<pre><code>  (mapcar #'name-product
      names
      (range (length names)))))
</code></pre>

<p>```</p>

<p>&hellip; used (e.g.) as <code>(sum-names (list "foo" "bar"))</code></p>

<ul>
<li>For some reason, the code-formatter for Jekyll (<code>pygments</code>) is completely thrown off by the Haskell source above. Perhaps this post have been in &ldquo;literate code&rdquo;. Most likely it would have been procrastinated out of existence if attempted that way.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 21: Amicable numbers (in unamicable languages)]]></title>
    <link href="http://agam.github.io/blog/2015/01/31/euler-21-amicable-numbers/"/>
    <updated>2015-01-31T04:01:08+00:00</updated>
    <id>http://agam.github.io/blog/2015/01/31/euler-21-amicable-numbers</id>
    <content type="html"><![CDATA[<p><em>Picking up where I left off, apparently 2 years ago !! :(</em></p>

<p>To avoid a procrastination excuse, I decided to skip the step of adding it to the github repo I had started earlier. Here is the raw, unedited form of the attempt at the next problem in my sequence, #21.</p>

<p><code>``haskell
isDiv a b = a</code>mod` b == 0</p>

<p>divisors n = [x | x &lt;&ndash; [1 .. n-1], isDiv n x]</p>

<p>&mdash; d(n) = sum of divisors of n
sumDiv n = sum $ divisors n</p>

<p>&mdash; a and b are &lsquo;amicable&rsquo; if d(a) = b, and d(b) = a
amicable a b = (a /= b) &amp;&amp; (sumDiv a == b) &amp;&amp; (sumDiv b == a)</p>

<p>&mdash; evaluate all pairs under 1000
&mdash; amicableUnder1000 = [(x,y) | x &lt;&ndash; [1 .. 999], y &lt;&ndash; [1 .. 999], amicable x y]
&mdash; euler21 = foldr ((x,y) &ndash;> x + y) 0  amicableUnder1000
```</p>

<p>This naive version was predictably going to take forever, so interrupted Ghci and decided to try a slightly different approach (to explicitly pre-evaluate the sums of divisors).</p>

<p>```haskell
sumDivNumbersUnder10000 = [sumDiv n | n &lt;&ndash; [1 .. 9999]]
sumDiv' n = sumDivNumbersUnder10000 !! (n-1)</p>

<p>amicable' (a,sa) (b,sb) = (a /= b) &amp;&amp; (sa == b) &amp;&amp; (sb == a)</p>

<p>amicableUnder10000 = [(x,y) | x &lt;&ndash; [1 .. 9999], y &lt;&ndash; [1 .. 9999], amicable' (x,sumDiv' x) (y, sumDiv' y)]
```</p>

<p>This version took <code>4.64</code> seconds in Ghci for the numbers less than 1000, at which point I realized the problem had actually called for the numbers less than <em>10000</em> instead. I left it running, out of curiosity, and it took <code>1758.96</code> seconds (not to mention a <em>prodigious</em> amount of memory: <code>97202052160</code> bytes!)</p>

<p>This done, the final answer was easy:</p>

<p><code>haskell
sum $ map fst amicableUnder10000
31626
</code></p>

<p>But this sort of gets to my problem with Haskell; I&rsquo;m never sure what&rsquo;s <em>really</em> going on, and how to make it do <em>what I want it to do</em>. On the other hand, I can feel an excess of &ldquo;imperative thinking&rdquo; is getting in the way (why isn&rsquo;t this as fast as a nested for loop?) Obviously, I need more time at this :)</p>

<p>Anyway, I tried yet another way towards this:</p>

<p>```haskell
partialAmicable x n = [(x,y) | y &lt;&ndash; [1 .. n-1], amicable' (x, sumDiv' x) (y, sumDiv' y)]</p>

<p>fullAmicable n = filter (not . null) (map f $ take n [1 ..])</p>

<pre><code>         where f x = partialAmicable x n
</code></pre>

<p>```</p>

<p>&hellip; which ran into <code>*** Exception: Prelude.(!!): index too large</code></p>

<p>At this point I realized that:</p>

<ul>
<li>I had no idea how to &lsquo;debug&rsquo; this (lacking a &lsquo;stack trace&rsquo;), but also</li>
<li>I was still dealing with <strong>lists</strong>, when I really wanted <strong>vectors</strong>.</li>
</ul>


<p>So I gave it one <em>final</em> shot:</p>

<p>```haskell
import Data.Vector as V</p>

<p>divSums n = V.fromList [sumDiv x | x &lt;&ndash; [1 .. n-1]]</p>

<p>amicables n = let ds = divSums n in</p>

<pre><code>              V.fromList [(x,y) | x &lt;- [1 .. n-1], y &lt;- [1 .. n-1], amicable' (x, ds ! (x-1)) (y, ds ! (y-1))]
</code></pre>

<p>```</p>

<p>&hellip; and this time, I got</p>

<p><code>haskell
λ&gt; amicables 10000
fromList [(220,284),(284,220),(1184,1210),(1210,1184),(2620,2924),(2924,2620),(5020,5564),(5564,5020),(6232,6368),(6368,6232)]
(204.01 secs, 97203591888 bytes)
</code></p>

<p>Ok, I can stop here; perhaps <code>204</code> seconds of brute-forcing isn&rsquo;t all that bad?</p>

<p>Unfortunately, my &ldquo;comfort zone&rdquo; yielded this:</p>

<p>```lisp
(defun div (x y)
  (= (mod x y) 0))</p>

<p>(defun divisors (x)
  (loop for i from 1 below x</p>

<pre><code> when (div x i)
   collect i))
</code></pre>

<p>(defun sum-divs (x)
  (reduce #&lsquo;+ (divisors x)))</p>

<p>(defun pre-sum-divs (n)
  (let ((myarr (make-array n :element-type &lsquo;fixnum)))</p>

<pre><code>(loop for i from 1 below n
 do (setf (aref myarr i) (sum-divs i)))
myarr))
</code></pre>

<p>(defun amicablep (x sx y sy)
  (and (not (= x y))</p>

<pre><code>   (= sx y)
   (= sy x)))
</code></pre>

<p>(defun amicables (n)
  (let ((ds (pre-sum-divs n)))</p>

<pre><code>(loop for i from 1 below n do
 (loop for j from 1 below n
    when (amicablep i (aref ds i) j (aref ds j))
    do (print j)))))
</code></pre>

<p>```</p>

<p>which runs <em>just a little bit faster</em> (!!)</p>

<p>```lisp
CL-USER> (time (amicables 10000))</p>

<p>284
220
1210
1184
2924
2620
5564
5020
6368
6232
Evaluation took:
2.815 seconds of real time
2.820000 seconds of total run time (2.820000 user, 0.000000 system)
100.18% CPU
7,318,463,192 processor cycles
3,939,984 bytes consed
```</p>

<p>So this is my problem: I need to find a way to get my mental model of Haskell to perform at this speed (and clearly, it&rsquo;s two orders of magnitude off). It isn&rsquo;t going to be easy &hellip;</p>

<p><strong>EDIT</strong>: Make that just <em>one</em> order of magnitude.
It&rsquo;s possible for Ghci to use compiled object code instead of byte code, by entering <code>:set -fobject-code</code>.
After this, evaluating <code>amicables 10000</code> took <code>23.71</code> seconds.</p>
]]></content>
  </entry>
  
</feed>
