<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lisp | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-03-21T19:45:48+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Euler 40: Champernowne's Constant]]></title>
    <link href="http://agam.github.io/blog/2015/03/21/euler-40-champernownes-constant/"/>
    <updated>2015-03-21T19:34:12+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/21/euler-40-champernownes-constant</id>
    <content type="html"><![CDATA[<p>I was too lazy to avoid the brute-force approach here, especially since it took less than a second to run. The following seems longer than it should be, partly because I left in some helper and debugging functions &hellip;</p>

<p><strong>Statutory Warning</strong>: <em>Spoilers Ahead</em></p>

<p>```lisp
(defparameter <em>max-digits</em> 2000000)</p>

<p>(defun digits (n)
  (declare (type fixnum n))
  (nreverse (loop</p>

<pre><code>           for tmp = n then (floor (/ tmp 10))
           until (= tmp 0)
           collect (mod tmp 10))))
</code></pre>

<p>(defun set-digits (d start all-digits)
  (loop</p>

<pre><code> for elem in d
 for idx = start then (1+ idx) do
   (setf (aref all-digits idx) elem)))
</code></pre>

<p>;; Fills out the array of digits and returns an accessor function
;; Note: the index increments by the length of the number of
;; digits of the <em>previous</em> number.
(let ((all-digits (make-array (list <em>max-digits</em>) :element-type &lsquo;(integer 0 9) :initial-element 0)))
  (defun populate-digits (n)</p>

<pre><code>(progn
  (loop
     for num = 1 then (1+ num)
     for d = (digits num)
     for i = 0 then (+ i (length (digits (1- num))))
     while (&lt; i n) do
       (set-digits d i all-digits))
(lambda (idx)
  (aref all-digits idx)))))
</code></pre>

<p>(defun power-list ()
  (let ((champer (populate-digits 1000000)))</p>

<pre><code>(loop for p from 0 to 6 collect
     (funcall champer (1- (expt 10 p))))))
</code></pre>

<p>(defun euler40 ()
  (apply &lsquo;* (power-list)))</p>

<p>;; Useful debugging tool
(defun scan-list (start end)
  (let ((champer (populate-digits)))</p>

<pre><code>(loop for i from start to end do
     (print (cons i (funcall champer i))))))
</code></pre>

<p>```</p>

<p>The &ldquo;final answer&rdquo; is given by <code>(euler40)</code>, and the intermediate digits themselves by <code>(power-list)</code>. I found <code>(scan-list)</code> useful to debug an embarassing off-by-one error in the loop.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 39: Integer Right Triangles]]></title>
    <link href="http://agam.github.io/blog/2015/03/20/euler-39-integer-right-triangles/"/>
    <updated>2015-03-20T23:09:44+00:00</updated>
    <id>http://agam.github.io/blog/2015/03/20/euler-39-integer-right-triangles</id>
    <content type="html"><![CDATA[<p>Straightfoward, this. An interesting insight into speed difference between <code>SBCL</code> and <code>Clozure</code>: the former took <em>0.75 seconds</em> to run this, while the latter took about <em>4 seconds</em> (without the type annotations, <code>SBCL</code> takes <em>33 seconds</em>).</p>

<p>```lisp
(defun is-right-triangle (n1 n2 n3)
  (declare (type fixnum n1 n2 n3))
  (= (+ (expt n1 2) (expt n2 2)) (expt n3 2)))</p>

<p>(defun triangle-solutions (n)
  (declare (type fixnum n))
  ;; Largest side (hyp) can&rsquo;t be less than a third of the total
  (loop for hyp from (floor (/ n 3)) upto (&ndash; n 2)</p>

<pre><code> ;; Avoid repeating combinations, so WLOG let one side
 ;; be greater than the other
 for sides-sum = (- n hyp)
 when (loop for side1 from (ceiling (/ sides-sum 2)) to (1- sides-sum)
         for side2 = (- sides-sum side1) 
         when (is-right-triangle side1 side2 hyp)
         collect (list side1 side2 hyp))
 collect it))
</code></pre>

<p>(defun max-triangle-solutions (n)
  (declare (type fixnum n))
  ;; n cannot be less than 3
  (let* ((solutions (loop for i from 3 to n</p>

<pre><code>                   collect (length (triangle-solutions i))))
     (max-solution (loop for elem in solutions maximizing elem)))
(cons max-solution (+ 3 (position max-solution solutions)))))
</code></pre>

<p>```</p>

<p>The answer needed is given by <code>(max-triangle-solutions 1000)</code>, while any specific solution can be got by (e.g.) running <code>(triangle-solutions 120)</code> which yields <code>(((40 30 50)) ((45 24 51)) ((48 20 52)))</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 26: Reciprocal Cycles]]></title>
    <link href="http://agam.github.io/blog/2015/02/11/euler-26-reciprocal-cycles/"/>
    <updated>2015-02-11T18:07:38+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/11/euler-26-reciprocal-cycles</id>
    <content type="html"><![CDATA[<p><strong>Statutory Warning</strong>: Spoilers ahead</p>

<p><em>Problem: find the number less than 1000 with the largest repeating cycle of digits in the decimal expansion of its reciprocal</em></p>

<p>As always, the initial reacion was on the lines of <em>aha! this is obvious!</em>:</p>

<p>```lisp
(defun get-repeated-substring-length (str len)
  (let* ((rev-str (reverse str))</p>

<pre><code> (offset (- (length str) (* 2 len)))
 (match (equal (subseq rev-str 0 len)
           (reverse (subseq str offset (+ offset len))))))
(if match
len
0)))
</code></pre>

<p>(defun get-cycle-length (dec)
  (declare (type double-float dec))
  (let* ((dec-str (princ-to-string dec))</p>

<pre><code> (exp-str (subseq dec-str
          (1+ (position #\. dec-str))
          (position #\d dec-str))))
(do ((i 0 (1+ i))
 (cycle-length 0 (get-repeated-substring-length exp-str i)))
((or (&gt; cycle-length 0) (&gt; i (/ (length exp-str) 2))) cycle-length))))
</code></pre>

<p>(defun inverse-cycle-digits (n)
  (let ((inverse (/ 1.0 (coerce n &lsquo;double-float))))</p>

<pre><code>(do* ((i 0 (1+ i))
 (dec (* 1.0 inverse) (* 10.0 dec))
 (cycle-length 0 (get-cycle-length dec)))
 ((&gt; cycle-length 0) cycle-length))))
</code></pre>

<p>(defun euler-26-fail ()
  (let ((all-cycles (mapcar #&lsquo;inverse-cycle-digits (loop for i from 1 to 1000 collect i))))</p>

<pre><code>(reduce #'max all-cycles)))
</code></pre>

<p>```</p>

<p>But the aptly named <code>euler-26-fail</code> fails to do what we want, because once again, the largest reciprocal when expanded fully, lies beyond the standard <em>double-float</em> range. So, we hand-roll &hellip;</p>

<p>```lisp</p>

<p>(defun inverse (n &amp;key (precision))
  (do* ((i 0 (1+ i))</p>

<pre><code>(numerator 10 (* 10 (mod numerator n)))
(dec (floor (/ 10 n)) (floor (/ numerator n)))
(declist (list dec) (cons dec declist)))
   ((&gt; i precision) (nreverse declist))))
</code></pre>

<p>(defun cycle-length-helper (declist)
  (do ((i 0 (1+ i))</p>

<pre><code>   (cycle-length 0 (get-repeated-substring-length declist i)))
  ((or (&gt; cycle-length 0) (&gt; i (/ (length declist) 2))) cycle-length)))
</code></pre>

<p>(defun cycle-length (declist)
  (loop for length in (loop for i from 1 to (length declist)</p>

<pre><code>         collect (cycle-length-helper (subseq declist 0 i)))
   maximizing length))
</code></pre>

<p>(defun get-all-inverse-lengths (lst max-precision)
  (mapcar #&lsquo;(lambda (n) (cycle-length (inverse n :precision max-precision)))</p>

<pre><code>  lst))
</code></pre>

<p>(defun unique-max (list)
  (let ((max (reduce #&lsquo;max list)))</p>

<pre><code>(if (= 1 (count max list))
max
0)))
</code></pre>

<p>(defun biggest-cycle (max-num prec)
  (let* ((lst (loop for i from 1 to  max-num collect i))</p>

<pre><code> (lengths (get-all-inverse-lengths lst prec))
 (max-len (reduce #'max lengths)))
;;(format t "Debug: lengths = ~A, max = ~A~%" lengths max-len)
(nth (position max-len lengths) lst)))
</code></pre>

<p>```</p>

<p>The idea is to loop over all numbers with a given precision, find the max, then maybe increase the precision and try again. This is a terrible idea, relying on the ability to submit multiple answers at the Project Euler website :(</p>

<p>But more than that, it&rsquo;s terribly slow. It becomes marginally faster if we restrict our search to primes.</p>

<p>```lisp
(defun biggest-cycle (max-num prec)
  (let* ((lst (eratosthenes max-num))</p>

<pre><code> (lengths (get-all-inverse-lengths lst prec))
 (max-len (reduce #'max lengths)))
;;(format t "Debug: lengths = ~A, max = ~A~%" lengths max-len)
(nth (position max-len lengths) lst)))
</code></pre>

<p>(defun sieve (prime list)
  (if (null list)</p>

<pre><code>  (list prime)
  (cons prime (sieve (first list)
         (remove-if #'(lambda (n)
                (= 0 (mod n prime)))
                (rest list))))))
</code></pre>

<p>(defun eratosthenes (max-num)
  (let ((all-numbers (loop for i from 2 to max-num collect i)))</p>

<pre><code>(sieve (first all-numbers) (rest all-numbers))))
</code></pre>

<p>```</p>

<p>With this change, <code>(biggest-cycle 1000 1000)</code> yielded <code>499</code> (in <em>211 seconds</em>), but it turned out to be incorrect. <code>(biggest-cycle 1000 10000)</code> took <em>22810 seconds</em>, which is shameful, but yielded the right answer.</p>

<h3>Update</h3>

<p>Here is an effort to redeem myself:</p>

<p>```haskell
import qualified Data.List as L
import qualified Data.Vector as V</p>

<p>eratosthenes :: Int &ndash;> [Int]
&mdash; ^Get a list of prime numbers less than the given number.              <br/>
eratosthenes n =
  let x = [2 .. n] in
  sieve (head x) (tail x)</p>

<p>sieve :: Int &ndash;> [Int] &ndash;> [Int]
sieve p nums =
  let rest = filter (\x &ndash;> x <code>mod</code> p > 0) nums
  in if null rest</p>

<pre><code> then [p]
 else p : sieve (head rest) (tail rest)
</code></pre>

<p>inverse :: Int &ndash;> Int &ndash;> V.Vector Int      <br/>
&mdash; ^Given a number and the required precision, calculate the decimal expansion of its reciprocal.
inverse n prec =
  let truncate x y = (x <code>div</code> y, x <code>mod</code> y)</p>

<pre><code>  nextDigit x count
    | count == 0 = []
    | otherwise = let (d,m) = truncate (x * 10) n
                  in d : nextDigit m (count - 1)
</code></pre>

<p>  in
   V.fromList $ nextDigit 1 prec</p>

<p>getInverses :: Int &ndash;> Int &ndash;> [V.Vector Int]
&mdash; ^Get a list of all the inverses of all numbers upto a given number, for a given precision
getInverses maxNum maxPrec = [inverse x maxPrec | x &lt;&ndash; [1 .. maxNum]]</p>

<p>checkRepeatLength :: V.Vector Int &ndash;> Int &ndash;> Int &ndash;> Int
checkRepeatLength expansion end len =
  let s1 = V.slice (end &ndash; len) len expansion</p>

<pre><code>  s2 = V.slice (end - len - len) len expansion
  c = V.zipWith (==) s1 s2
</code></pre>

<p>  in
   if V.and c
   then len
   else 0</p>

<p>checkCycles :: V.Vector Int &ndash;> Int &ndash;> Int
&mdash; ^Check if a cycle exists at a given end point with a given length; if it does, returns the length itself, otherwise 0
checkCycles expansion end =
  let l = quot end 2</p>

<pre><code>  cycles = filter (&gt; 0) $ map (checkRepeatLength expansion end) [1 .. l]
</code></pre>

<p>  in
   case cycles of</p>

<pre><code>x:xs -&gt; x
otherwise -&gt; 0
</code></pre>

<p>findCycleLength :: V.Vector Int &ndash;> Int
&mdash; ^Get the length of a cycle at a certain end point; if none found, returns 0
findCycleLength expansion =
  let l = V.length expansion</p>

<pre><code>  minEnd = quot l 2
  cycles = filter (&gt; 0) $ map (checkCycles expansion) [l, l-1 .. minEnd]
</code></pre>

<p>  in
   case cycles of</p>

<pre><code>x:xs -&gt; x
otherwise -&gt; 0
</code></pre>

<p>euler26 :: Int &ndash;> Int
&mdash; ^Attempts to solve Euler Problem #26 for a given precision
euler26 prec =
  let nums = [2 .. 1000]</p>

<pre><code>  cycles = map (\x -&gt; findCycleLength $ inverse x prec) nums
  maxPos = L.elemIndex (maximum cycles) cycles
</code></pre>

<p>  in
   case maxPos of</p>

<pre><code>Just n -&gt; nums !! n
_ -&gt; 0
</code></pre>

<p>```</p>

<p>This gives the same answer (<code>euler26 10000</code>) in <code>7.5 seconds</code> (which is a 3000x speedup). Just to make sure you don&rsquo;t jump to that conclusion, it isn&rsquo;t a Haskell vs Lisp thing, it&rsquo;s just <em>calculating less stuff</em>, and doing it with <em>vectors instead of lists</em>.</p>

<p>In particular, the first version was running for <em>12 hours</em> before I killed it out of disgust, and realized that instead of checking if the <code>length</code> of the list was greater than 0, I should do a <code>case</code> match instead since I only needed the first element. This made a <em>big</em> difference. Also, this is the first time I <em>didn&rsquo;t</em> have to rely on <code>Debug.Trace</code>, so I feel good about that :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 25: Fibonacci Digits]]></title>
    <link href="http://agam.github.io/blog/2015/02/10/euler-25-fibonacci-digits/"/>
    <updated>2015-02-10T18:43:52+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/10/euler-25-fibonacci-digits</id>
    <content type="html"><![CDATA[<p><strong>Statutory Warning</strong>: spoilers ahead</p>

<p><em>Problem: find the first fibonacci number with 1000 digits</em></p>

<p>First though: hah, I can get the Nth fibonacci number in O(1) time!</p>

<p>```lisp
(defun fib (n)
  (let ((inv-sq-5 (/ 1 (sqrt 5)))</p>

<pre><code>(phi (/ (1+ (sqrt 5)) 2)))
(floor (+ 0.5 (* inv-sq-5 (expt phi n))))))
</code></pre>

<p>(defun digits (n)
  (round (1+ (log n 10))))</p>

<p>(defun log-fib-10 (n)
  (let ((log-10 (log 10))</p>

<pre><code>(log-phi (log (/ (1+ (sqrt 5)) 2)))
(log-k (log (/ 1 (sqrt 5)))))
(* log-10 (+ log-k (* n log-phi)))))
</code></pre>

<p>```</p>

<p>Nope, floating point numbers don&rsquo;t go beyond 308 digits or so</p>

<p><code>lisp
CL-USER&gt; most-positive-double-float
1.7976931348623157d308
</code></p>

<p>Perhaps there was a clever way to workaround this, but I wasn&rsquo;t feeling clever enough at the time. So, back to brute force.</p>

<p>```lisp
(defun fib (n)
  (cond ((= n 0) 0)</p>

<pre><code>((= n 1) 1)
(t (+ (fib (- n 1)) (fib (- n 2))))))
</code></pre>

<p>```</p>

<p>Well, this just takes <em>too long</em> (<code>(fib 40)</code> takes <code>3.883</code> seconds, and that has just 9 digits, so forget about anything bigger). Next step: memoization.</p>

<p>```lisp
(let ((memo-table (make-hash-table)))
  (defun memo-fib (n)</p>

<pre><code>(multiple-value-bind (hash-val exists) (gethash n memo-table)
  (if exists
  hash-val
  (let ((new-val (cond ((= n 0) 0)
                       ((= n 1) 1)
                       (t (+ (memo-fib (- n 1)) (memo-fib (- n 2)))))))
    (setf (gethash n memo-table) new-val)
    new-val)))))
</code></pre>

<p>(defun digits-num (n)
  (length (princ-to-string n)))
```</p>

<p>(yeah just to be even less clever, I get the digits by seeing the length of the string representation of the number &hellip; works)</p>

<p><code>(memo-fib 40)</code> is instantaneous, so is <code>(memo-fib 1000)</code>, and <code>(memo-fib 10000)</code> takes <code>3 ms</code>, so this should do it.</p>

<p>I used this to manually guess my way around and found the answer. Woohoo!</p>

<p>But this last part felt a bit &hellip; dirty, so before quitting this problem, I decided to automate it this way:</p>

<p>```lisp
(defun bin-search-range (fn target)
  (do<em> ((i 1 (</em> 2 i))</p>

<pre><code>   (val (funcall fn 1) (funcall fn i)))
   ((&gt;= val target) (values i (/ i 2)))
(format t "Debug: Trying (~A, ~A)~%" i val)))
</code></pre>

<p>(defun bin-search (fn low high target)
  (let* ((mid (round (/ (+ low high) 2)))</p>

<pre><code> (mid-val (funcall fn mid)))
(format t "Debug: Searching b/w (~A, ~A), found (~A, ~A)~%" low high mid mid-val)
(cond ((= high mid) mid)
  ((&gt;= mid-val target) (bin-search fn low mid target))
  ((&lt; mid-val target) (bin-search fn mid high target)))))
</code></pre>

<p>(defun solve (fn target)
  &ldquo;Two-phase search; first, exponentially increase argument until target is exceeded, then begin binary search with last argument&rdquo;
  (multiple-value-bind (high low) (bin-search-range fn target)</p>

<pre><code>(bin-search fn low high target)))
</code></pre>

<p>(defun target-function (n)
  (digits-num (memo-fib n)))</p>

<p>(defun euler-25 ()
  (solve #&lsquo;target-function 1000))
```</p>

<p>Yes, it does work. I left in my original debug statements (BTW the initial version had not one but <em>two</em> off-by-one errors! I learn slowly &hellip;), so the working is illustrated as follows:</p>

<p><code>lisp
CL-USER&gt; (euler-25)
Debug: Trying (1, 1)
Debug: Trying (2, 1)
Debug: Trying (4, 1)
Debug: Trying (8, 2)
Debug: Trying (16, 3)
Debug: Trying (32, 7)
Debug: Trying (64, 14)
Debug: Trying (128, 27)
Debug: Trying (256, 54)
Debug: Trying (512, 107)
Debug: Trying (1024, 214)
Debug: Trying (2048, 428)
Debug: Trying (4096, 856)
Debug: Searching b/w (4096, 8192), found (6144, 1284)
Debug: Searching b/w (4096, 6144), found (5120, 1070)
Debug: Searching b/w (4096, 5120), found (4608, 963)
Debug: Searching b/w (4608, 5120), found (4864, 1017)
Debug: Searching b/w (4608, 4864), found (4736, 990)
Debug: Searching b/w (4736, 4864), found (4800, 1003)
Debug: Searching b/w (4736, 4800), found (4768, 997)
Debug: Searching b/w (4768, 4800), found (4784, 1000)
Debug: Searching b/w (4768, 4784), found (4776, 998)
Debug: Searching b/w (4776, 4784), found (4780, 999)
Debug: Searching b/w (4780, 4784), found (4782, 1000)
Debug: Searching b/w (4780, 4782), found (4781, 999)
Debug: Searching b/w (4781, 4782), found (4782, 1000)
4782
</code></p>

<p>The whole thing took <code>6 ms</code>. Not bad, eh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler 24: Permutations, a long story]]></title>
    <link href="http://agam.github.io/blog/2015/02/08/euler-24-permutations/"/>
    <updated>2015-02-08T07:48:20+00:00</updated>
    <id>http://agam.github.io/blog/2015/02/08/euler-24-permutations</id>
    <content type="html"><![CDATA[<p>(The fact that this turned out to be a long story is <em>ridiculous</em>, but perhaps it&rsquo;ll be useful to someone else)</p>

<p>The idea here is intuitive: given say <code>0</code>, <code>1</code> and <code>2</code>, we can immediately come up with the following orderings:</p>

<p><code>
012
021
102
120
201
210
</code></p>

<p>The problem here is to find the millionth permutation of <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, <code>9</code>.</p>

<p>The first way is to <em>cheat</em> and work it out with pen-and-paper, upon which you soon realize that there are cycles for each set of numbers. E.g. for two numbers we would have 2 possible orderings (<code>01</code> and <code>10</code>), for three we have the ones shown above, etc, and this is because for <code>n</code> numbers we have <code>n!</code> combinations. Right, that&rsquo;s obvious. But the next step is to see that <em>within</em> each block of <code>n!</code>, there are <code>n</code> blocks of size <code>(n-1)!</code>, where the first digit is the same, which means we have a straightforward way of reducing the problem of size <code>n</code> to a problem of size <code>n-1</code>.</p>

<p>As an example, to find the fifth permutation in the example above, we would see that it involves two cycles of two digits each, and then halfway through a single cycle. So we can come up with the first digit being <code>2</code>, and the next digit being the second of the remaining digits (i.e. <code>1</code>), and we&rsquo;re finally left with <code>0</code>.</p>

<p>(<strong>Note</strong>: Argh &hellip; This sentence is wrong! But I didn&rsquo;t realize that until later)</p>

<p>So I wrote the code for this, and I used Ocaml because I&rsquo;m a complete n00b at it.</p>

<p>```ocaml
let rec fact n =
  if n = 0 then 1
  else n * fact (n &ndash; 1)</p>

<p>let perm_total = 1_000_000;;</p>

<p>let get_perm total index =
  let fact_index = fact index in
  total / (fact_index), total mod fact_index</p>

<p>let rec get_all_perms total index_size =
  let rec get_next_perm total index_size perm_list =</p>

<pre><code>if index_size = 0 then perm_list
else match get_perm total index_size with
 | p, new_total -&gt; get_next_perm new_total (index_size - 1) (p :: perm_list)
</code></pre>

<p>  in List.rev (get_next_perm total index_size [])</p>

<p>let rec digits_list n lst =
  if n = 0 then (0 :: lst)
  else digits_list (n &ndash; 1) (n :: lst)</p>

<p>let remove_digit digit lst =
  List.filter (fun x &ndash;> x &lt;> digit) lst</p>

<p>let rec get_next_perm_digit perm_list digit_list pdlist =
  if List.length perm_list = 0 then pdlist
  else let p = List.hd perm_list in</p>

<pre><code>   let d = List.nth digit_list p in
   get_next_perm_digit (List.tl perm_list) (remove_digit d digit_list) (d :: pdlist)
</code></pre>

<p>let rec get_perm_digits perm_list =
  let digits = digits_list (List.length perm_list) [] in
  List.rev (get_next_perm_digit perm_list digits [])</p>

<p>let euler24 = get_perm_digits (get_all_perms perm_total 9);;     <br/>
```</p>

<p>Yes, the names are terrible. Many of the started out as nested functions which I pulled into the top-level to test separately. Anyway, the point is &hellip; the answer was <strong>wrong</strong>.</p>

<p>Ok, I thought, I must&rsquo;ve screwed up in the <em>Ocaml-ness</em> of my solution. So I rewrote it thusly:</p>

<p>```lisp
(defun fact (n)
  (if (= n 1)</p>

<pre><code>  1
  (* n (fact (1- n)))))
</code></pre>

<p>(defparameter <em>total</em> 1000000)</p>

<p>(defun get-perm (total index)
  (let ((f (fact index)))</p>

<pre><code>(truncate total f)))
</code></pre>

<p>(defun get-next-perm (total index-size perm-list)
  (if (= index-size 0)</p>

<pre><code>  (cons 0 perm-list)
  (multiple-value-bind (p new_total)
  (get-perm total index-size)
(get-next-perm new_total (1- index-size) (cons p perm-list)))))
</code></pre>

<p>(defun get-all-perms (total index-size)
  (reverse (get-next-perm total index-size &lsquo;())))</p>

<p>(defun digits-list (n)
  (loop for i from 0 to n</p>

<pre><code>   collect i))
</code></pre>

<p>(defun get-next-perm-digit (perm-list digit-list p-d-list)
  (if (null perm-list)</p>

<pre><code>  p-d-list
  (let* ((p (first perm-list))
     (d (nth p digit-list)))
(get-next-perm-digit (rest perm-list)
             (remove d digit-list)
             (cons d p-d-list)))))
</code></pre>

<p>(defun get-perm-digits (perm-list)
  (let ((digits (digits-list (1- (length perm-list)))))</p>

<pre><code>(reverse (get-next-perm-digit perm-list digits '()))))
</code></pre>

<p>(defun euler-24 ()
  (get-perm-digits (get-all-perms <em>total</em> 9)))
```</p>

<p>The <em>same</em> answer popped out &mdash; which means I was successful at my translation &mdash; but it was still the wrong answer. In the initial few seconds of denial, I refreshed the Project Euler page and tried again. No luck.</p>

<p>Now it was time for desperate measures, so I came up with this brute force solution:</p>

<p>```lisp
(defun list->number (list)
  (reduce (lambda (x y) (+ (* x 10) y)) list))</p>

<p>(defun number->list (n)
  (do ((tempn n (floor (/ tempn 10)))</p>

<pre><code>   (digits '() (cons (mod tempn 10) digits)))
  ((= tempn 0) digits)))
</code></pre>

<p>(defun has-digits (n digit-list)
  (let ((nlist (number->list n)))</p>

<pre><code>(not (set-difference digit-list nlist))))
</code></pre>

<p>(defun brute-force-next-permutation (digit-list)
  (let ((n (list->number digit-list)))</p>

<pre><code>(do ((trynum (1+ n) (1+ trynum)))
((has-digits trynum digit-list) (number-&gt;list trynum))
  (format t "Trying ~A~%" trynum))))
</code></pre>

<p>```</p>

<p>&hellip;. which wasn&rsquo;t <em>quite</em> right either, since it skipped the leading zero in our lists. This one seemed to work:</p>

<p>```lisp</p>

<p>(defun add-num (digit-list)
  (let ((sum (1+ (first digit-list))))</p>

<pre><code>(if (&lt; sum 10)
(cons sum (rest digit-list))
(cons (mod sum 10) (add-num (rest digit-list))))))
</code></pre>

<p>(defun next-number (digit-list)
  (let ((revlist (reverse digit-list)))</p>

<pre><code>(nreverse (add-num revlist))))
</code></pre>

<p>(defun brute-force-next-permutation (digit-list)
  (do ((trynum (next-number digit-list) (next-number trynum)))</p>

<pre><code>  ((not (set-difference digit-list trynum)) trynum)))
</code></pre>

<p>(defun brute-force-nth-permutation (digit-list n)
  (do ((i 1 (1+ i))</p>

<pre><code>   (trynum digit-list (brute-force-next-permutation trynum)))
  ((= i n) trynum)))
</code></pre>

<p>```</p>

<p>So I set that running with <code>(brute-force-nth-permutation '(0 1 2 3 4 5 6 7 8 9) 1000000)</code>, and it looked like it was clearly going to take a while.</p>

<p>At this point I was really depressed, since I couldn&rsquo;t figure out <em>what</em> was wrong with the initial approach which was so <em>straightforward</em> &hellip; and then I realized that <strong>I was probably off by one</strong>.</p>

<p>So I took the answer submitted earlier, and entered the <em>next</em> permutation. Nope. Ok, what about the <em>previous</em> one? That worked!</p>

<p>(<strong>Note</strong>: To circle back to the &lsquo;trivial&rsquo; example at the top of the post: I didn&rsquo;t catch myself talking about the fifth permutation as being 0,1,2,3,4,5 &mdash; so I was really talking about the <em>sixth</em> permutation &hellip;)</p>

<p>Later, the (inefficient) brute-force computation terminated in <code>1668</code> seconds, and happily, the answers matched. I tried the previous code with a small modification:</p>

<p><code>lisp
(defun euler-24 ()
  (get-perm-digits (get-all-perms (1- *total*) 9)))
</code></p>

<p>&hellip; and it gave the same answer (and obviously, so did the Ocaml version). So a happy ending to this story, but a painful reminder of the fact that <strong>there are only two hard problems in computer science: naming, caching, and off-by-one errors.</strong></p>
]]></content>
  </entry>
  
</feed>
