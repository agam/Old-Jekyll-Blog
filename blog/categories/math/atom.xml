<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: math | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/math/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-10-26T21:34:22-07:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Mathematical Notation ...]]></title>
    <link href="http://agam.github.io/blog/2015/09/27/on-mathematical-notation-dot-dot-dot/"/>
    <updated>2015-09-27T22:32:17-07:00</updated>
    <id>http://agam.github.io/blog/2015/09/27/on-mathematical-notation-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve always had a vague lingering feeling about mathematical notation being at times inconsistent, excessive, duplicated, and so on. Some of it is of course due to me not knowing enough math, and not knowing math well enough, but some of it, I was recently relieved to find out, was a concern shared by people smarter than me too.</p>

<p>Unfortunately, I&rsquo;m now <em>more</em> confused since the two solutions are (IMO) at odds with each other. Both share the common goal of replacing outdated notation by making it <em>&ldquo;executable&rdquo;</em>, and thus more precise, but the way they go about it is different.</p>

<p>Or so it seems to me, at least. Perhaps someone out there can explain it better to me someday. The two people I came across are, (of course?) Ken Iverson and Gerald Sussman, and the two ideas can be experienced by reading <a href="http://www.jsoftware.com/papers/tot.htm"><em>&ldquo;Notation as a Tool of Thought&rdquo;</em></a>, and watching <a href="https://www.youtube.com/watch?v=arMH5GjBwUQ"><em>&ldquo;The Role of Programming in the Formulation of Ideas&rdquo;</em></a>. Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell/Math]]></title>
    <link href="http://agam.github.io/blog/2014/11/11/haskell-slash-math/"/>
    <updated>2014-11-11T18:05:43-08:00</updated>
    <id>http://agam.github.io/blog/2014/11/11/haskell-slash-math</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t recall the very first articles I might have read about Haskell, but the first non-short text was Real World Haskell, which I went through the year it came out. I didn&rsquo;t write any code at that time (a mistake!)</p>

<p>Then, a coupffle of years later, I thought I&rsquo;d try my hand at <a href="https://projecteuler.net/">Project Euler</a> with Haskell. I did the first 10-15 and then got bored.</p>

<p><em>Another</em> couple of years later, I decided to &ldquo;try it out&rdquo; again. This time, it was by starting a static blog (this one!) in <a href="http://jaspervdj.be/hakyll/">Hakyll</a>, and disassembling some trivial programs. This also didn&rsquo;t last, and after my initial brush with &ldquo;<a href="https://www.haskell.org/haskellwiki/Cabal/Survival">cabal</a> <a href="http://www.well-typed.com/blog/2014/09/how-we-might-abolish-cabal-hell-part-1/">hell</a>&rdquo;, I switched to <a href="http://jekyllrb.com/">Jekyll</a> instead.</p>

<p>I poked around with <a href="http://www.yesodweb.com/">Yesod</a> and its various <a href="https://hackage.haskell.org/package/shakespeare">&ldquo;shakespearean&rdquo;</a> plugins, and gave that up too.</p>

<p>At one point I found myself asking the question: &ldquo;Why am I doing this in Haskell at all?&rdquo; And the answer, obviously, was that (of course!) I <em>didn&rsquo;t need to</em>. So I lost interest altogether.</p>

<p>Now I realize these were all misguided efforts. What I should have done was to approach the whole thing from a more <em>fundamental</em> plane, the way SICP introduces Scheme. So, I&rsquo;ve decided to make my way through <a href="http://www.amazon.com/Haskell-Programming-Second-Edition-Computing/dp/0954300696">The Haskell Road to Maths, Logic and Programming</a>, trying as hard as I can to <em>not</em> let preconceived notions filter through, and to take it all in with a &ldquo;beginner&rsquo;s mind&rdquo;.</p>

<p>It&rsquo;s going to be a while :)</p>

<br><br>


<p><em>P.S. Emacs support for Haskell is pretty sweet. Here&rsquo;s a n00b-level screenshot showing a &ldquo;SLIME-style&rdquo; ghci session</em></p>

<p><img class="center" src="/images/haskell-emacs-ghci.png"></p>

<p><strong>Update:</strong> Someone suggested I should read <em>a more recent</em> book, <a href="http://www.cs.nott.ac.uk/~gmh/book.html">Programming in Haskell</a> by Graham Hutton, so I guess I&rsquo;ll do that first.</p>
]]></content>
  </entry>
  
</feed>
