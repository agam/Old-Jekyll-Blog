<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang, | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2016-03-03T02:17:22-08:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Ridiculous graph]]></title>
    <link href="http://agam.github.io/blog/2014/09/02/a-ridiculous-graph/"/>
    <updated>2014-09-02T16:44:27-07:00</updated>
    <id>http://agam.github.io/blog/2014/09/02/a-ridiculous-graph</id>
    <content type="html"><![CDATA[<p>Following in the theme of the previous post, <a href="https://gist.github.com/agam/fe8983acccd455fd9510">here (see linked Gist)</a> is a concurrent graph. Again, this is not an efficient way to do something like this, it&rsquo;s just a fun example of showing something that&rsquo;s easy in Go but probably harder or more verbose in other languages.</p>

<p>The basic idea here is that <em>every node is a goroutine</em>. So instead of using some structure like a matrix or an adjacency list to &ldquo;get a handle&rdquo; on all the nodes and their connections, you let the nodes take care of that themselves. Graph algorithms (trivial ones here are self-identification and depth calculation) are then constructed as interactions with the nodes, without an explicit traversal of vertices and edges.</p>

<p>```go
func node_agent(node *Node) {</p>

<pre><code>for {
    cmd := &lt;-node.comm
    switch cmd.cmdtype {
    case NameCmd:
        fmt.Println("I am ", node.name)
    case PingCmd:
        cmd.cmdchan &lt;- PingCmd
    case SetDepthCmd:
        // Ask all neighbors to modify depth, and pass
        // along the notification channel to them
        depth := cmd.cmdarg
        if node.state.depth &gt; 0 {
            break
        }
        node.state.depth = depth
        for _, ch := range node.neighbors {
            ch &lt;- Command{SetDepthCmd, cmd.cmdchan, depth + 1}
        }
        cmd.cmdchan &lt;- 1
    case GetDepthCmd:
        cmd.cmdchan &lt;- node.state.depth
    }
}
</code></pre>

<p>}
```</p>

<p>The &ldquo;Hello world&rdquo; in this scenario is just finding out which nodes exist, which is something as follows:</p>

<p>```go
func IsAlive(node *Node) bool {</p>

<pre><code>// Ping the node with a 10ms timeout
pingchan := make(chan int)
node.comm &lt;- Command{PingCmd, pingchan, 0}
select {
case &lt;-pingchan:
    return true
case &lt;-time.After(10 * time.Millisecond):
    return false
}
</code></pre>

<p>}</p>

<p>func printGraph(g *Graph) {</p>

<pre><code>fmt.Println("Graph :")

for _, node := range g.nodes {
    if IsAlive(node) {
        node.comm &lt;- Command{NameCmd, nil, 0}
    }
}
</code></pre>

<p>}
```</p>

<p>A slightly more complicated operation is finding the depth of all nodes relative to the root node:</p>

<p>```go</p>

<p>func calculateDepths(g *Graph) {</p>

<pre><code>// Recursively trigger computation from root node
notification := make(chan int)
g.nodes["root"].comm &lt;- Command{SetDepthCmd, notification, 1}

for i := 0; i &lt; len(g.nodes); i++ {
    // Wait for every node to receive this atleast once
    &lt;-notification
}

// Now check all the depths
depthchan := make(chan int)
for name, node := range g.nodes {
    node.comm &lt;- Command{GetDepthCmd, depthchan, 0}
    fmt.Println(name, " =&gt; ", &lt;-depthchan)
}
</code></pre>

<p>}
```</p>

<p>This being Go, you can play around with the implementation <a href="http://play.golang.org/p/SBoF_FnsMu">in the playground</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang setup]]></title>
    <link href="http://agam.github.io/blog/2014/08/12/golang-setup/"/>
    <updated>2014-08-12T15:21:15-07:00</updated>
    <id>http://agam.github.io/blog/2014/08/12/golang-setup</id>
    <content type="html"><![CDATA[<p>Just some basic personal notes here.</p>

<p>Obviously, get the <code>go-mode</code> for Emacs. It has useful shortcuts, like <code>C-c C-a</code> to import a package while you&rsquo;re editing some code and don&rsquo;t want to scroll up and add this, or <code>C-c C-d</code> to show the signature of the function at point. There are other useful functions (for which you can add your own shortcuts), such as <code>gofmt</code> which does what you&rsquo;d expect, and <code>go-play-region</code>, which is nifty (but perhaps not that useful): it sends the selected code to <a href="http://play.golang.org/">the Go Playground</a>, and displays the result.</p>

<p>It&rsquo;ll also be useful to get <code>godef</code>. So, just <code>go get code.google.com/p/rog-go/exp/cmd/godef</code> (remember to set <code>$GOPATH</code> first &mdash; I use <code>~/Golang/Packages</code>).</p>

<p>If you&rsquo;re enthusiastic about further Emacs-Go integration, you can try out <a href="http://github.com/dougm/goflymake"><code>goflymake</code></a> &mdash; I haven&rsquo;t used it myself (the compile step is nearly-instantaneous for me anyway), but I&rsquo;ve heard its good, so YMMV.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ridiculous Concurrency]]></title>
    <link href="http://agam.github.io/blog/2014/08/12/ridiculous-concurrency/"/>
    <updated>2014-08-12T15:09:01-07:00</updated>
    <id>http://agam.github.io/blog/2014/08/12/ridiculous-concurrency</id>
    <content type="html"><![CDATA[<p>Ok, so I went through the <a href="http://tour.golang.org/">Go Tour</a>, and it&rsquo;s pretty impressive; having this sort of super-fast edit-compile-run cycle is something usually associated with Javascript-ish languages, certainly not a statically compiled systems language.</p>

<p>One of the big selling points of Go (apart from its &ldquo;familiar&rdquo; yet clean syntax) is the ubiquitous concurrency primitives available. Yes, you could obviously do the same in other languages (see a good <a href="http://blog.drewolson.org/blog/2013/07/04/clojure-core-dot-async-and-go-a-code-comparison/">Clojure translation here</a>), but channels and goroutines being first-class objects in Go, passing them is as normal as ints and strings.</p>

<p>Except its not really that normal, is it? But it <em>should</em> be. So I thought, why not try out something that I called &ldquo;ridiculous concurrency&rdquo;, a sort of roundabout way of doing normal stuff, while <em>overusing</em> concurrency.</p>

<p>This isn&rsquo;t meant to be a good way of showing how to do anything, but rather <strong>making it easy to <em>abuse</em> concurrency, so that you can later <em>use</em> it</strong>.</p>
]]></content>
  </entry>
  
</feed>
