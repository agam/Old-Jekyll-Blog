<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: reddit | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/reddit/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2014-01-06T07:45:51+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ranked Voting]]></title>
    <link href="http://agam.github.io/blog/2013/12/19/ranked-voting/"/>
    <updated>2013-12-19T02:23:00+00:00</updated>
    <id>http://agam.github.io/blog/2013/12/19/ranked-voting</id>
    <content type="html"><![CDATA[<p>This one might actually make for a medium level interview question (assuming the problem can be successfully communicated)</p>

<p>Here is <a href="http://www.reddit.com/r/dailyprogrammer/comments/1r2mcz/112013_challenge_136_intermediate_ranked_voting/">the problem</a> (also found at the bottom of the gist)</p>

<p><div><script src='https://gist.github.com/8033346.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>#include &lt;cmath&gt;
#include &lt;cstdint&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

using namespace std;

void GetVotes(
    const vector&lt;vector&lt;int&gt;&gt;&amp; votes,
    int loser_index,
    vector&lt;int&gt;* candidate_votes) {
  // Use the round# to determine if votes should be transferred.
  for (const vector&lt;int&gt;&amp; vote : votes) {
    int first_choice = vote[0];
    int second_choice = vote[1];
    if (loser_index &gt;= 0) {
      if (loser_index == first_choice) {
        ++((*candidate_votes)[second_choice]);
      }
    } else {
      // first pass; just add the votes
      ++((*candidate_votes)[first_choice]);
    }
  }
  if (loser_index &gt;=0) { ((*candidate_votes)[loser_index]) = 0; }
}

bool CheckMajority(const vector&lt;int&gt;&amp; candidate_votes, int total_votes, int* winner, int* loser) {
  int max_votes = 0, min_votes = total_votes;
  for (int i = 0; i &lt; candidate_votes.size(); ++i) {
    int v = candidate_votes[i];
    if (max_votes &lt; v) {
      max_votes = v;
      *winner = i;
    }
    if (min_votes &gt; v) {
      min_votes = v;
      *loser = i;
    }
  }
  if (max_votes * 2 &gt; total_votes) {
    return true;
  } else {
    return false;
  }
}

void PrintStats(const vector&lt;int&gt;&amp; candidate_votes, int total_votes, const vector&lt;string&gt;&amp; candidate_names) {
  for (int i = 0; i &lt; candidate_votes.size(); ++i) {
    if (candidate_votes[i] == 0) continue;
    cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; (100.0 * candidate_votes[i])/total_votes &lt;&lt; &quot;% &quot; &lt;&lt; candidate_names[i];
    if (i &lt; candidate_votes.size() - 1) {
      cout &lt;&lt; &quot;, &quot;;
    }
  }
  cout &lt;&lt; endl;
}

int main() {
  int num_votes, num_candidates;
  cin &gt;&gt; num_votes &gt;&gt; num_candidates;
  cout &lt;&lt; &quot;Will read in &quot; &lt;&lt; num_votes &lt;&lt; &quot; votes for &quot; &lt;&lt; num_candidates &lt;&lt; &quot; candidates.&quot; &lt;&lt; endl;
  vector&lt;string&gt; candidate_names;
  vector&lt;vector&lt;int&gt;&gt; votes(num_votes, vector&lt;int&gt;(num_candidates));
  for (int i = 0; i &lt; num_candidates; ++i) {
    string name;
    cin &gt;&gt; name;
    candidate_names.push_back(name);
  }
  for (int i = 0; i &lt; num_votes; ++i) {
    for (int j = 0; j &lt; num_candidates; ++j) {
      cin &gt;&gt; votes[i][j];
    }
  }

  // Sanity check what we got.
  cout  &lt;&lt; &quot;Read in the following candidates :- \n&quot;;
  for (const string&amp; name : candidate_names) {
    cout &lt;&lt; name &lt;&lt; endl;
  }
  cout &lt;&lt; &quot;Read in the following votes :- \n&quot;;
  for (int i = 0; i &lt; num_votes; ++i) {
    for (int j = 0; j &lt; num_candidates; ++j) {
      cout &lt;&lt; votes[i][j] &lt;&lt; &quot; &quot;;
    }
    cout &lt;&lt; endl;
  }

  vector&lt;int&gt; candidate_votes(num_candidates);
  int round = 0, winner_index = -1, loser_index = -1;
  do {
    ++round;
    GetVotes(votes, loser_index, &amp;candidate_votes);
    cout &lt;&lt; &quot;Round &quot; &lt;&lt; round &lt;&lt; &quot;: &quot;;
    PrintStats(candidate_votes, num_votes, candidate_names);
  } while (!CheckMajority(candidate_votes, num_votes, &amp;winner_index, &amp;loser_index) &amp;&amp; round &lt; 10);
  cout &lt;&lt; candidate_names[winner_index] &lt;&lt; &quot; is the winner.\n&quot;;
}

/*
Input Description
-----------------
On standard console input, you will be given two space-delimited integers, N and M. N is the number of votes, while M is the number of candidates. After this line, you will be given the candidates line, which is a space-delimited set of M-number of candidate names. These names are one-word lower-case letters only. This is followed by N-lines of ballots, where each ballot is a list of M-integers, from 0 to M-1, representing the order of preference.
Note that the order of preference for ballots goes from left-to-right. The integers are the index into the candidate list. For the example below, you can map 0: Knuth, 1: Turing, 2: Church. This means that if the ballot row is &quot;1 0 2&quot;, that means the voter prefers Turing over Knuth over Church.

Output Description
------------------
Given the candidates and ballots, compute the first-round of successful candidates (e.g. rank them based on all ballot&#39;s first choice). If the percentage of votes for any one candidate is more than 50%, print the candidate name as the winner. Else, take all the votes of the least-successful candidate, and use their ballot&#39;s 2nd choice, summing again the total votes. If needed (e.g. there is no candidate that has more than 50% of the votes), repeat this process for the 3rd, 4th, etc. choice, and print the winner of the election.
For each round of computation, print the percentage of votes for each candidate, and rank them based on that percentage, using the output format.
*/
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
