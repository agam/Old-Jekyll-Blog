<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: games | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/games/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-02-18T01:01:58+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lunar Lander]]></title>
    <link href="http://agam.github.io/blog/2015/01/20/lunar-lander/"/>
    <updated>2015-01-20T02:08:35+00:00</updated>
    <id>http://agam.github.io/blog/2015/01/20/lunar-lander</id>
    <content type="html"><![CDATA[<p>While I&rsquo;m on a roll, here&rsquo;s something else &hellip; a very simple game that is a contender for the &ldquo;first&rdquo; one, since it basically revolves around a couple of lines that involve a basic speed/distance calculation. Still, it <em>is</em> fun to play. It might be really hard though, since I haven&rsquo;t yet been able to <em>&ldquo;win&rdquo;</em> :P</p>

<p>Anyhow, here&rsquo;s the Go source:</p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"math"
"math/rand"
"strings"
"time"
</code></pre>

<p>)</p>

<p>const (</p>

<pre><code>initialHeight   = 500.0
initialFuel     = 120.0
initialVelocity = 50.0
deviance        = 0.05
</code></pre>

<p>)</p>

<p>const (</p>

<pre><code>maxThrust                      = 30
maxDistance                    = 600
maxDistancePlotWidth           = 60
maxAllowableImpactVelocity     = 2
lunarGravitationalAccelaration = 5.3
</code></pre>

<p>)</p>

<p>var height float64
var fuel float64
var velocity float64</p>

<p>func floatEqual(x, y float64) bool {</p>

<pre><code>return math.Abs(x-y) &lt; 0.00000001
</code></pre>

<p>}</p>

<p>func setInitialParameters() {</p>

<pre><code>randomize := func(val float64, deviance float64) float64 {
    mult := 1
    if rand.Intn(2) &gt; 0 {
        mult = -1
    }
    return val + (rand.Float64()*deviance)*val*float64(mult)
}
height = randomize(initialHeight, deviance)
velocity = randomize(initialVelocity, deviance)
fuel = randomize(initialFuel, deviance)
</code></pre>

<p>}</p>

<p>func showUsage() {</p>

<pre><code>fmt.Println("\n    Welcome to the Lunar Landing Simulation!")
fmt.Println("--------------------------------------------------------------\n")
fmt.Printf("Do you want instructions ? (enter 'y' or 'n'): ")
var choice string
fmt.Scan(&amp;choice)
if strings.ToLower(choice) == "n" {
    return
}
fmt.Printf("You are landing on the moon and have taken over manual control %5.2f feet above a good landing spot. You have a downward velocity of %5.2f ft/sec. %5.2f units of fuel remain.\n", height, velocity, fuel)
fmt.Println("\nHere are the rules that govern your space vehicle: ")
fmt.Println("(1) After each second, the height, velocity and remaining fuel will be reported.")
fmt.Println("(2) You will enter the number of units of fuel to burn during the next second. Each unit will slow your descent by 1 ft/sec (at a prompt showing '?')")
fmt.Printf("(3) The maximum thrust of your engine is %d ft/sec/sec, or %d units of fuel per second.\n", maxThrust, maxThrust)
fmt.Println("(4) When you contact the lunar surface, you will be given a report of your landing speed and remaining fuel.")
fmt.Println("(5) If you run out of fuel, you will no longer be prompted, but the second-by-second report will continue.")
fmt.Println("(6) You may enter a number greater than the total amount of fuel remaining to indicate that you want to use all your fuel.")
fmt.Println("\n... beginning landing procedure ...\n")
fmt.Println("GOOD LUCK!\n")
</code></pre>

<p>}</p>

<p>func getFuel() float64 {</p>

<pre><code>for {
    fmt.Printf("? ")
    var fuelToBurn float64
    fmt.Scan(&amp;fuelToBurn)
    if fuelToBurn &gt; fuel {
        return fuel
    }
    if fuelToBurn &gt; maxThrust {
        fmt.Printf("Sorry, you cannot use more than %d units at a time!\n", maxThrust)
    } else {
        return fuelToBurn
    }
}
</code></pre>

<p>}</p>

<p>func update(height, velocity, fuel float64) (newheight, newvelocity float64) {</p>

<pre><code>newvelocity = velocity - fuel + lunarGravitationalAccelaration
newheight = height - 0.5*(velocity+newvelocity)
return
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>rand.Seed(time.Now().Unix())
setInitialParameters()
showUsage()
seconds := 0
fuelUnitsToBurn := 0.0
fmt.Println("Seconds Height     Speed     Fuel     |    Plot of Distance")
for height &gt; 0.0 &amp;&amp; height &lt; maxDistance {
    fmt.Printf("%5d %8.2f %9.2f %9.2f    | ", seconds, height, velocity, fuel)
    scaledDistance := maxDistancePlotWidth * height / maxDistance
    for i := 0; i &lt; int(scaledDistance); i++ {
        fmt.Printf(" ")
    }
    fmt.Println("*")
    if fuel &gt; 0 {
        fuelUnitsToBurn = getFuel()
        if floatEqual(fuel, fuelUnitsToBurn) {
            fmt.Println("   ***   OUT OF FUEL   ***")
        }
    } else {
        fuelUnitsToBurn = 0.0
    }
    height, velocity = update(height, velocity, fuelUnitsToBurn)
    fuel = fuel - fuelUnitsToBurn
    seconds++
}
if height &gt; maxDistance {
    fmt.Println("\nSomehow, you managed to drift away into space. Unfortunately, we can't afford a rescue mission. Say hello to Dave Bowman in a few years. Goodbye.\n\n")
    return
}
fmt.Println("\n   *** CONTACT ***\n")
fmt.Printf("Touchdown at %d seconds.\n", seconds)
fmt.Printf("Landing velocity = %5.2f ft/sec.\n\n", velocity)

if math.Abs(velocity) &gt; maxAllowableImpactVelocity {
    fmt.Println("Sorry, you didn't make it. Condolences will be sent to your next of kin ...\n")
} else {
    fmt.Println("Good job! Now make yourself comfortable, and come back with the next mission that makes it there ...\n")
}
</code></pre>

<p>}
```</p>

<p>&hellip; and the original BASIC &hellip;</p>

<p><code>basic
2 PRINT TAB(34);"LEM"
4 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
7 REM ROCKT2 IS AN INTERACTIVE GAME THAT SIMULATES A LUNAR
8 REM LANDING IS SIMILAR TO THAT OF THE APOLLO PROGRAM.
9 REM THERE IS ABSOLUTELY NO CHANCE INVOLVED
10 Z$="GO"
15 B1=1
20 M=17.95
25 F1=5.25
30 N=7.5
35 R0=926
40 V0=1.29
45 T=0
50 H0=60
55 R=R0+H0
60 A=-3.425
65 R1=0
70 A1=8.84361E-04
75 R3=0
80 A3=0
85 M1=7.45
90 M0=M1
95 B=750
100 T1=0
105 F=0
110 P=0
115 N=1
120 M2=0
125 S=0
130 C=0
135 IF Z$="YES" THEN 1150
140 PRINT
145 PRINT "LUNAR LANDING SIMULATION"
150 PRINT
155 PRINT "HAVE YOU FLOWN AN APOLLO/LEM MISSION BEFORE";
160 PRINT " (YES OR NO)";
165 INPUT Q$
170 IF Q$="YES" THEN 190
175 IF Q$="NO" THEN 205
180 PRINT "JUST ANSWER THE QUESTION, PLEASE, ";
185 GOTO 160
190 PRINT
195 PRINT "INPUT MEASUREMENT OPTION NUMBER";
200 GOTO 225
205 PRINT
210 PRINT "WHICH SYSTEM OF MEASUREMENT DO YOU PREFER?"
215 PRINT " 1=METRIC     0=ENGLISH"
220 PRINT "ENTER THE APPROPRIATE NUMBER";
225 INPUT K
230 PRINT
235 IF K=0 THEN 280
240 IF K=1 THEN 250
245 GOTO 220
250 Z=1852.8
255 M$="METERS"
260 G3=3.6
265 N$=" KILOMETERS"
270 G5=1000
275 GOTO 305
280 Z=6080
285 M$="FEET"
290 G3=.592
295 N$="N.MILES"
300 G5=Z
305 IF B1=3 THEN 670
310 IF Q$="YES" THEN 485
315 PRINT
320 PRINT "  YOU ARE ON A LUNAR LANDING MISSION.  AS THE PILOT OF"
325 PRINT "THE LUNAR EXCURSION MODULE, YOU WILL BE EXPECTED TO"
330 PRINT "GIVE CERTAIN COMMANDS TO THE MODULE NAVIGATION SYSTEM."
335 PRINT "THE ON-BOARD COMPUTER WILL GIVE A RUNNING ACCOUNT"
340 PRINT "OF INFORMATION NEEDED TO NAVIGATE THE SHIP."
345 PRINT
350 PRINT
355 PRINT "THE ATTITUDE ANGLE CALLED FOR IS DESCRIBED AS FOLLOWS."
360 PRINT "+ OR -180 DEGREES IS DIRECTLY AWAY FROM THE MOON"
365 PRINT "-90 DEGREES IS ON A TANGENT IN THE DIRECTION OF ORBIT"
370 PRINT "+90 DEGREES IS ON A TANGENT FROM THE DIRECTION OF ORBIT"
375 PRINT "0 (ZERO) DEGREES IS DIRECTLY TOWARD THE MOON"
380 PRINT
385 PRINT TAB(30);"-180|+180"
390 PRINT TAB(34);"^"
395 PRINT TAB(27);"-90 &lt; -+- &gt; +90"
400 PRINT TAB(34);"!"
405 PRINT TAB(34);"0"
410 PRINT TAB(21);"&lt;&lt;&lt;&lt; DIRECTION OF ORBIT &lt;&lt;&lt;&lt;"
415 PRINT
420 PRINT TAB(20);"------ SURFACE OF MOON ------"
425 PRINT
430 PRINT
435 PRINT "ALL ANGLES BETWEEN -180 AND +180 DEGREES ARE ACCEPTED."
440 PRINT
445 PRINT "1 FUEL UNIT = 1 SEC. AT MAX THRUST"
450 PRINT "ANY DISCREPANCIES ARE ACCOUNTED FOR IN THE USE OF FUEL"
455 PRINT "FOR AN ATTITUDE CHANGE."
460 PRINT "AVAILABLE ENGINE POWER: 0 (ZERO) AND ANY VALUE BETWEEN"
465 PRINT "10 AND 100 PERCENT."
470 PRINT
475 PRINT"NEGATIVE THRUST OR TIME IS PROHIBITED."
480 PRINT
485 PRINT
490 PRINT "INPUT: TIME INTERVAL IN SECONDS ------ (T)"
495 PRINT "       PERCENTAGE OF THRUST ---------- (P)"
500 PRINT "       ATTITUDE ANGLE IN DEGREES ----- (A)"
505 PRINT
510 IF Q$="YES" THEN 535
515 PRINT "FOR EXAMPLE:"
520 PRINT "T,P,A? 10,65,-60"
525 PRINT "TO ABORT THE MISSION AT ANY TIME, ENTER 0,0,0"
530 PRINT
535 PRINT "OUTPUT: TOTAL TIME IN ELAPSED SECONDS"
540 PRINT "        HEIGHT IN ";M$
545 PRINT "        DISTANCE FROM LANDING SITE IN ";M$
550 PRINT "        VERTICAL VELOCITY IN ";M$;"/SECOND"
555 PRINT "        HORIZONTAL VELOCITY IN ";M$;"/SECOND"
560 PRINT "        FUEL UNITS REMAINING"
565 PRINT
570 GOTO 670
575 PRINT
580 PRINT "T,P,A";
585 INPUT T1,F,P
590 F=F/100
595 IF T1&lt;0 THEN 905
600 IF T1=0 THEN 1090
605 IF ABS(F-.05)&gt;1 THEN 945
610 IF ABS(F-.05)&lt;.05 THEN 945
615 IF ABS(P)&gt;180 THEN 925
620 N=20
625 IF T1&lt;400 THEN 635
630 N=T1/20
635 T1=T1/N
640 P=P*3.14159/180
645 S=SIN(P)
650 C=COS(P)
655 M2=M0*T1*F/B
660 R3=-.5*R0*((V0/R)^2)+R*A1*A1
665 A3=-2*R1*A1/R
670 FOR I=1 TO N
675 IF M1=0 THEN 715
680 M1=M1-M2
685 IF M1&gt;0 THEN 725
690 F=F*(1+M1/M2)
695 M2=M1+M2
700 PRINT "YOU ARE OUT OF FUEL."
705 M1=0
710 GOTO 725
715 F=0
720 M2=0
725 M=M-.5*M2
730 R4=R3
735 R3=-.5*R0*((V0/R)^2)+R*A1*A1
740 R2=(3*R3-R4)/2+.00526*F1*F*C/M
745 A4=A3
750 A3=-2*R1*A1/R
755 A2=(3*A3-A4)/2+.0056*F1*F*S/(M*R)
760 X=R1*T1+.5*R2*T1*T1
765 R=R+X
770 H0=H0+X
775 R1=R1+R2*T1
780 A=A+A1*T1+.5*A2*T1*T1
785 A1=A1+A2*T1
790 M=M-.5*M2
795 T=T+T1
800 IF H0&lt;3.287828E-04 THEN 810
805 NEXT I
810 H=H0*Z
815 H1=R1*Z
820 D=R0*A*Z
825 D1=R*A1*Z
830 T2=M1*B/M0
835 PRINT " ";T;TAB(10);H;TAB(23);D;
840 PRINT TAB(37);H1;TAB(49);D1;TAB(60);T2
845 IF H0&lt;3.287828E-04 THEN 880
850 IF R0*A&gt;164.474 THEN 1050
855 IF M1&gt;0 THEN 580
860 T1=20
865 F=0
870 P=0
875 GOTO 620
880 IF R1&lt;-8.21957E-04 THEN 1020
885 IF ABS(R*A1)&gt;4.93174E-04 THEN 1020
890 IF H0&lt;-3.287828E-04 THEN 1020
895 IF ABS(D)&gt;10*Z THEN 1065
900 GOTO 995
905 PRINT
910 PRINT "THIS SPACECRAFT IS NOT ABLE TO VIOLATE THE SPACE-";
915 PRINT "TIME CONTINUUM."
920 GOTO 575
925 PRINT
930 PRINT "IF YOU WANT TO SPIN AROUND, GO OUTSIDE THE MODULE"
935 PRINT "FOR AN E.V.A."
940 GOTO 575
945 PRINT
950 PRINT "IMPOSSIBLE THRUST VALUE ";
955 IF F&lt;0 THEN 985
960 IF F-.05&lt;.05 THEN 975
965 PRINT "TOO LARGE"
970 GOTO 575
975 PRINT "TOO SMALL"
980 GOTO 575
985 PRINT "NEGATIVE"
990 GOTO 575
995 PRINT
1000 PRINT "TRANQUILITY BASE HERE -- THE EAGLE HAS LANDED."
1005 PRINT "CONGRATULATIONS -- THERE WAS NO SPACECRAFT DAMAGE."
1010 PRINT "YOU MAY NOW PROCEED WITH SURFACE EXPLORATION."
1015 GOTO 1100
1020 PRINT
1025 PRINT "CRASH !!!!!!!!!!!!!!!!"
1030 PRINT "YOUR IMPACT CREATED A CRATER";ABS(H);M$;" DEEP."
1035 X1=SQR(D1*D1+H1*H1)*G3
1040 PRINT "AT CONTACT YOU WERE TRAVELING";X1;N$;"/HR"
1045 GOTO 1100
1050 PRINT
1055 PRINT "YOU HAVE BEEN LOST IN SPACE WITH NO HOPE OF RECOVERY."
1060 GOTO 1100
1065 PRINT "YOU ARE DOWN SAFELY - "
1075 PRINT
1080 PRINT "BUT MISSED THE LANDING SITE BY";ABS(D/G5);N$;"."
1085 GOTO 1100
1090 PRINT
1095 PRINT "MISSION ABENDED"
1100 PRINT
1105 PRINT "DO YOU WANT TO TRY IT AGAIN (YES/NO)?"
1110 INPUT Z$
1115 IF Z$="YES" THEN 20
1120 IF Z$="NO" THEN 1130
1125 GOTO 1105
1130 PRINT
1135 PRINT "TOO BAD, THE SPACE PROGRAM HATES TO LOSE EXPERIENCED"
1140 PRINT "ASTRONAUTS."
1145 STOP
1150 PRINT
1155 PRINT "OK, DO YOU WANT THE COMPLETE INSTRUCTIONS OR THE INPUT -"
1160 PRINT "OUTPUT STATEMENTS?"
1165 PRINT "1=COMPLETE INSTRUCTIONS"
1170 PRINT "2=INPUT-OUTPUT STATEMENTS"
1175 PRINT "3=NEITHER"
1180 INPUT B1
1185 Q$="NO"
1190 IF B1=1 THEN 205
1195 Q$="YES"
1200 IF B1=2 THEN 190
1205 IF B1=3 THEN 190
1210 GOTO 1165
1215 END
</code></p>

<p>&hellip; and the <em>delightful</em> gameplay (you&rsquo;ll have to scroll a bit to the right to see the whole screenful):</p>

<p>```sh
$ go run lander.go</p>

<h2>Welcome to the Lunar Landing Simulation!</h2>

<p>Do you want instructions ? (enter &lsquo;y&rsquo; or &lsquo;n&rsquo;): y
You are landing on the moon and have taken over manual control 499.33 feet above a good landing spot. You have a downward velocity of 49.17 ft/sec. 114.86 units of fuel remain.</p>

<p>Here are the rules that govern your space vehicle:
(1) After each second, the height, velocity and remaining fuel will be reported.
(2) You will enter the number of units of fuel to burn during the next second. Each unit will slow your descent by 1 ft/sec (at a prompt showing &lsquo;?&rsquo;)
(3) The maximum thrust of your engine is 30 ft/sec/sec, or 30 units of fuel per second.
(4) When you contact the lunar surface, you will be given a report of your landing speed and remaining fuel.
(5) If you run out of fuel, you will no longer be prompted, but the second-by-second report will continue.
(6) You may enter a number greater than the total amount of fuel remaining to indicate that you want to use all your fuel.</p>

<p>&hellip; beginning landing procedure &hellip;</p>

<p>GOOD LUCK!</p>

<p>Seconds Height     Speed     Fuel     |    Plot of Distance
0   499.33     49.17    114.86    |                                                  *
? 30
1   462.52     24.47     84.86    |                                               *
? 20
2   445.40      9.77     64.86    |                                             *
? 10
3   437.98      5.07     54.86    |                                            *
? 0
4   430.27     10.37     54.86    |                                            *
? 0
5   417.25     15.67     54.86    |                                          *
? 0
6   398.94     20.97     54.86    |                                        *
? 0
7   375.32     26.27     54.86    |                                      *
? 10
8   351.40     21.57     44.86    |                                    *
? 0
9   327.19     26.87     44.86    |                                 *
? 0
10   297.67     32.17     44.86    |                              *
? 10
11   267.85     27.47     34.86    |                           *
? 0
12   237.74     32.77     34.86    |                        *
? 10
13   207.32     28.07     24.86    |                     *
? 10
14   181.60     23.37     14.86    |                   *
? 5
15   158.09     23.67      9.86    |                *
? 10
<strong><em>   OUT OF FUEL   </em></strong>
16   136.70     19.11      0.00    |              *
17   114.94     24.41      0.00    |            *
18    87.89     29.71      0.00    |         *
19    55.53     35.01      0.00    |      *
20    17.87     40.31      0.00    |  *</p>

<p><strong><em> CONTACT </em></strong></p>

<p>Touchdown at 21 seconds.
Landing velocity = 45.61 ft/sec.</p>

<p>Sorry, you didn&rsquo;t make it. Condolences will be sent to your next of kin &hellip;
```</p>

<p>As always, copy-paste and try it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Battleships]]></title>
    <link href="http://agam.github.io/blog/2015/01/20/battleships/"/>
    <updated>2015-01-20T01:02:31+00:00</updated>
    <id>http://agam.github.io/blog/2015/01/20/battleships</id>
    <content type="html"><![CDATA[<p>All right, here you go, a first draft of a <em>dumb</em> Battleships player.</p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"log"
"math/rand"
"time"
"unicode"
</code></pre>

<p>)</p>

<p>// &ldquo;Classic&rdquo; Battleship game, played as follows:
// &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
// &ndash; Player gets a chance to select positions for ships
// &ndash; Player and computer take turns guessing a square on a grid
// &ndash; If the square corresponds to a ship, it is a hit;
//   if not, it is a miss
// &ndash; Whoever sinks the opponents' ships first, wins</p>

<p>// Internal representation:
// &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
// Board size: 10 x 10
// 0 represents empty board
// 1 represents destroyer (2 units)
// 2 represents submarine (3 units)
// 3 represents cruiser (3 units)
// 4 represents battleship (4 units)
// 5 represents carrier (5 units)
// 6 represents a hit
// 7 represents a miss</p>

<p>const boardSize = 10</p>

<p>type direction int</p>

<p>const (</p>

<pre><code>up direction = iota
down
left
right
</code></pre>

<p>)</p>

<p>const (</p>

<pre><code>hitValue  = 6
missValue = 7
</code></pre>

<p>)</p>

<p>const (</p>

<pre><code>emptyStr = "   "
shipStr  = " + "
hitStr   = " X "
missStr  = " . "
</code></pre>

<p>)</p>

<p>var shipSizes = map[int]int{</p>

<pre><code>1: 2, // destroyer
2: 3, // submarine
3: 3, // cruiser
4: 4, // battleship
5: 5, // carrier
</code></pre>

<p>}</p>

<p>type computerState struct {</p>

<pre><code>lastShotHit        bool
lastShotSunk       bool
lastHitRow         int
lastHitColumn      int
missesSinceLastHit int
</code></pre>

<p>}</p>

<p>// TODO: fold this into the map above
func getShipName(ship int) string {</p>

<pre><code>switch ship {
case 1:
    return "Destroyer"
case 2:
    return "Submarine"
case 3:
    return "Cruiser"
case 4:
    return "Battleship"
case 5:
    return "Aircraft Carrier"
default:
    log.Fatalf("Unknown ship! : %d", ship)
}
return "" // unfortunately, this is needed
</code></pre>

<p>}</p>

<p>func printBoard(board [][]int, shipsVisible bool) {</p>

<pre><code>fmt.Println("    0  1  2  3  4  5  6  7  8  9 ")
for i := 0; i &lt; boardSize; i++ {
    fmt.Printf(" %c ", i+'A')
    for j := 0; j &lt; boardSize; j++ {
        switch board[i][j] {
        case 0:
            fmt.Printf(emptyStr)
        case 6:
            fmt.Printf(hitStr)
        case 7:
            fmt.Printf(missStr)
        case 1, 2, 3, 4, 5:
            if shipsVisible {
                fmt.Printf(shipStr)
            } else {
                fmt.Printf(emptyStr)
            }
        default:
            log.Fatalf("invalid board element: %d", board[i][j])
        }
    }
    fmt.Println()
}
</code></pre>

<p>}</p>

<p>func makeBoard() [][]int {</p>

<pre><code>board := make([][]int, boardSize)
for i := 0; i &lt; boardSize; i++ {
    board[i] = make([]int, boardSize)
}
return board
</code></pre>

<p>}</p>

<p>func getTargetLocation(opponentBoard [][]int) (int, int) {</p>

<pre><code>for {
    fmt.Printf("\nChoose a grid position to hit : ")
    var choiceRow rune
    var col int
    fmt.Scanf("%c", &amp;choiceRow)
    fmt.Scan(&amp;col)

    row := int(unicode.ToLower(choiceRow) - 'a')

    if row &lt; 0 || row &gt; boardSize-1 || col &lt; 0 || col &gt; boardSize-1 {
        fmt.Println("Please enter a row from A to J, and a column from 1 to 10")
        continue
    }

    square := opponentBoard[row][col]
    if square == hitValue || square == missValue {
        fmt.Println("You already guessed this location! Try again ...")
        continue
    }

    // Ok, we got a valid square
    return row, col
}
</code></pre>

<p>}</p>

<p>// TODO: slices are passed by reference, we don&rsquo;t need pointers!
func updateShot(opponentBoard [][]int, y, x int) {</p>

<pre><code>square := opponentBoard[y][x]
if square == 0 {
    opponentBoard[y][x] = missValue
} else {
    opponentBoard[y][x] = hitValue
}
</code></pre>

<p>}</p>

<p>func scanBoardForShip(board [][]int, ship int) (sum int) {</p>

<pre><code>for i := 0; i &lt; boardSize; i++ {
    for j := 0; j &lt; boardSize; j++ {
        if board[i][j] == ship {
            sum++
        }
    }
}
return
</code></pre>

<p>}</p>

<p>func handlePlayerMove(computerBoard [][]int) bool {</p>

<pre><code>fmt.Println("\nHere is the computer's board so far: \n")
printBoard(computerBoard, false)
y, x := getTargetLocation(computerBoard)

// Give the user some feedback
square := computerBoard[y][x]
if square == 0 {
    fmt.Println("\nYou missed")
} else {
    // it has to be a ship, since a previous hit/miss is an invalid choice
    fmt.Println("\nYou scored a hit!")
    fmt.Printf("You hit a %s\n", getShipName(square))
}

updateShot(computerBoard, y, x)

// Let the user know if a complete ship was sunk
if scanBoardForShip(computerBoard, square) == 0 {
    fmt.Printf("You sunk the enemy's %s!\n", getShipName(square))
}

return !shipsLeft(computerBoard)
</code></pre>

<p>}</p>

<p>func shipsLeft(board [][]int) bool {</p>

<pre><code>for ship, _ := range shipSizes {
    if scanBoardForShip(board, ship) &gt; 0 {
        return true
    }
}
return false
</code></pre>

<p>}</p>

<p>func findNewGuess(board [][]int) (int, int) {</p>

<pre><code>for {
    randRow := rand.Intn(boardSize)
    randCol := rand.Intn(boardSize)
    square := board[randRow][randCol]
    if square != hitValue &amp;&amp; square != missValue {
        return randRow, randCol
    }
}
</code></pre>

<p>}</p>

<p>func findAdjacentGuess(board [][]int, row, col int) (int, int) {</p>

<pre><code>// Try random directions
for {
    randDir := direction(rand.Intn(4))
    if newRow, newCol, ok := getNextSquare(row, col, randDir); ok {
        square := board[newRow][newCol]
        if square != hitValue &amp;&amp; square != missValue {
            return newRow, newCol
        }
    }
}
</code></pre>

<p>}</p>

<p>func showGuess(row, col int) string {</p>

<pre><code>return fmt.Sprintf("%c%d", row+'A', col)
</code></pre>

<p>}</p>

<p>func handleComputerMove(playerBoard [][]int, state *computerState) bool {</p>

<pre><code>// The following (dumb!) algorithm is used:
// - If the last shot was not a hit, guess randomly
// - If the last shot sunk a ship, guess randomly
// - If the last shot was a hit, then pick a new square "next to it"
// - At the end, update state
var row, col int
if !state.lastShotHit || state.lastShotSunk {
    row, col = findNewGuess(playerBoard)
} else {
    row, col = findAdjacentGuess(
        playerBoard, state.lastHitRow, state.lastHitColumn)
}
fmt.Printf("\nThe computer guessed: %s\n", showGuess(row, col))
square := playerBoard[row][col]
if square == 0 {
    fmt.Println("\nIt missed.")
    // Keep the last 'hit' sticky for a few rounds
    if state.lastShotHit {
        if state.missesSinceLastHit &lt; 3 {
            state.missesSinceLastHit++
        } else {
            state.lastShotHit = false
            state.missesSinceLastHit = 0
        }
    }
} else {
    fmt.Printf("It hit your %s!\n", getShipName(square))
    state.lastShotHit = true
    state.missesSinceLastHit = 0
    state.lastHitRow = row
    state.lastHitColumn = col
}
updateShot(playerBoard, row, col)
if scanBoardForShip(playerBoard, square) == 0 {
    fmt.Printf("It sunk your %s!\n", getShipName(square))
    state.lastShotSunk = true
} else {
    state.lastShotSunk = false
}
return !shipsLeft(playerBoard)
</code></pre>

<p>}</p>

<p>func addPlayerShips(board [][]int) {</p>

<pre><code>fmt.Println(
    "Begin adding ships. For each ship, enter the row and " +
        "column separated by a space, followed by another space " +
        "and then the direction to place it in.\n\n" +
        "For directions, use the following numeric codes: " +
        "1 = facing up, 2 = facing down, 3 = facing left, " +
        "4 = facing right\n" +
        "E.g. to place a submarine at E7 facing left, enter " +
        "E 7 3\n\n" +
        "This will result in it occupying squares E7, E6, E5.\n\n")
for ship, size := range shipSizes {
    fmt.Println("This is your board so far: ")
    printBoard(board, true)
    for {
        fmt.Printf("\nEnter row, column, direction for your %s (occupying %d squares): ", getShipName(ship), size)
        var row, col, dir int
        var rowInput rune
        fmt.Scanf("%c", &amp;rowInput)
        fmt.Scan(&amp;col)
        fmt.Scan(&amp;dir)
        row = int(unicode.ToLower(rowInput) - 'a')
        if placeShip(board, row, col, direction(dir-1), ship, size) {
            break
        } else {
            fmt.Println("Sorry, that doesn't seem to be a valid arrangement, please try again!\n")
        }
    }
}
</code></pre>

<p>}</p>

<p>func getNextSquare(row, col int, d direction) (int, int, bool) {</p>

<pre><code>// TODO: Investigate possibile duplicate code between this
// function and showShip() above
switch d {
case up:
    if row &gt; 0 {
        return row - 1, col, true
    }
case down:
    if row &lt; boardSize-1 {
        return row + 1, col, true
    }
case left:
    if col &gt; 0 {
        return row, col - 1, true
    }
case right:
    if col &lt; boardSize-1 {
        return row, col + 1, true
    }
}
return row, col, false
</code></pre>

<p>}</p>

<p>func placeShip(board [][]int, row, col int, d direction, ship, size int) bool {</p>

<pre><code>if row &lt; 0 || row &gt; boardSize-1 || col &lt; 0 || col &gt; boardSize-1 {
    return false
}
// First check the starting square
if board[row][col] != 0 {
    return false
}

// Place the given ship, of the given size, inf the board
// starting from the given row and column, along the given
// direction
origRow, origCol := row, col
ok := false
for i := 0; i &lt; size-1; i++ {
    row, col, ok = getNextSquare(row, col, d)
    if !ok {
        return false
    }
    if board[row][col] != 0 {
        return false
    }
}
// Ok, now actually change the board
row, col = origRow, origCol
for i := 0; i &lt; size; i++ {
    board[row][col] = ship
    row, col, _ = getNextSquare(row, col, d)
}
return true
</code></pre>

<p>}</p>

<p>func addComputerShips(board [][]int) {</p>

<pre><code>// TODO: try placing ships in descending order of size
for ship, size := range shipSizes {
    for {
        randRow := rand.Intn(boardSize)
        randCol := rand.Intn(boardSize)
        randDirection := direction(rand.Intn(4))
        if placeShip(board, randRow, randCol, randDirection, ship, size) {
            break
        }
    }
}
</code></pre>

<p>}</p>

<p>func showUsage() {</p>

<pre><code>fmt.Println("\n      Welcome to BATTLESHIP !!   ")
fmt.Println("----------------------------------------\n")
fmt.Printf("First, you place your ships, then I place mine, and then we take turns guessing squares on each other's board, until one of us sinks the other's ships.\n")
fmt.Println("\n     *** GOOD LUCK *** \n")
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>// Initialize boards for player and
rand.Seed(time.Now().Unix())
showUsage()
playerBoard := makeBoard()
computerBoard := makeBoard()

addPlayerShips(playerBoard)
addComputerShips(computerBoard)

var state computerState

victory := false
defeat := false
for {
    fmt.Println("\nHere is your board so far: \n")
    printBoard(playerBoard, true)
    victory = handlePlayerMove(computerBoard)
    if victory {
        fmt.Println("======== YOU WON !!! =======")
        break
    }
    defeat = handleComputerMove(playerBoard, &amp;state)
    if defeat {
        fmt.Println("------ You Lost :( -------")
        break
    }
}
</code></pre>

<p>}
```</p>

<p>As always, the corresponding BASIC code:</p>

<p><code>basic
1000 PRINT TAB(33);"SALVO"
1010 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
1020 PRINT:PRINT:PRINT
1030 REM
1040 DIM A(10,10),B(10,10),C(7),D(7),E(12),F(12),G(12),H(12),K(10,10)
1050 Z8=0
1060 FOR W=1 TO 12
1070 E(W)=-1
1080 H(W)=-1
1090 NEXT W
1100 FOR X=1 TO 10
1110 FOR Y=1 TO 10
1120 B(X,Y)=0
1130 NEXT Y
1140 NEXT X
1150 FOR X=1 TO 12
1160 F(X)=0
1170 G(X)=0
1180 NEXT X
1190 FOR X=1 TO 10
1200 FOR Y=1 TO 10
1210 A(X,Y)=0
1220 NEXT Y
1230 NEXT X
1240 FOR K=4 TO 1 STEP -1
1250 U6=0
1260 GOSUB 2910
1270 DEF FNA(K)=(5-K)*3-2*INT(K/4)+SGN(K-1)-1
1280 DEF FNB(K)=K+INT(K/4)-SGN(K-1)
1290 IF V+V2+V*V2=0 THEN 1260
1300 IF Y+V*FNB(K)&gt;10 THEN 1260
1310 IF Y+V*FNB(K)&lt;1 THEN 1260
1320 IF X+V2*FNB(K)&gt;10 THEN 1260
1330 IF X+V2*FNB(K)&lt;1 THEN 1260
1340 U6=U6+1
1350 IF U6&gt;25 THEN 1190
1360 FOR Z=0 TO FNB(K)
1370 F(Z+FNA(K))=X+V2*Z
1380 G(Z+FNA(K))=Y+V*Z
1390 NEXT Z
1400 U8=FNA(K)
1405 IF U8&gt;U8+FNB(K) THEN 1460
1410 FOR Z2= U8 TO U8+FNB(K)
1415 IF U8&lt;2 THEN 1450
1420 FOR Z3=1 TO U8-1
1430 IF SQR((F(Z3)-F(Z2))^2 + (G(Z3)-G(Z2))^2) &lt; 3.59 THEN 1260
1440 NEXT Z3
1450 NEXT Z2
1460 FOR Z=0 TO FNB(K)
1470 A(F(Z+U8),G(Z+U8))=.5+SGN(K-1)*(K-1.5)
1480 NEXT Z
1490 NEXT K
1500 PRINT "ENTER COORDINATES FOR..."
1510 PRINT "BATTLESHIP"
1520 FOR X=1 TO 5
1530 INPUT Y,Z
1540 B(Y,Z)=3
1550 NEXT X
1560 PRINT "CRUISER"
1570 FOR X=1 TO 3
1580 INPUT Y,Z
1590 B(Y,Z)=2
1600 NEXT X
1610 PRINT "DESTROYER&lt;A&gt;"
1620 FOR X=1 TO 2
1630 INPUT Y,Z
1640 B(Y,Z)=1
1650 NEXT X
1660 PRINT "DESTROYER&lt;B&gt;"
1670 FOR X=1 TO 2
1680 INPUT Y,Z
1690 B(Y,Z)=.5
1700 NEXT X
1710 PRINT "DO YOU WANT TO START";
1720 INPUT J$
1730 IF J$&lt;&gt;"WHERE ARE YOUR SHIPS?" THEN 1890
1740 PRINT "BATTLESHIP"
1750 FOR Z=1 TO 5
1760 PRINT F(Z);G(Z)
1770 NEXT Z
1780 PRINT "CRUISER"
1790 PRINT F(6);G(6)
1800 PRINT F(7);G(7)
1810 PRINT F(8);G(8)
1820 PRINT "DESTROYER&lt;A&gt;"
1830 PRINT F(9);G(9)
1840 PRINT F(10);G(10)
1850 PRINT "DESTROYER&lt;B&gt;"
1860 PRINT F(11);G(11)
1870 PRINT F(12);G(12)
1880 GOTO 1710
1890 C=0
1900 PRINT "DO YOU WANT TO SEE MY SHOTS";
1910 INPUT K$
1920 PRINT
1930 IF J$&lt;&gt;"YES" THEN 2620
1940 REM*******************START
1950 IF J$&lt;&gt;"YES" THEN 1990
1960 C=C+1
1970 PRINT
1980 PRINT "TURN";C
1990 A=0
2000 FOR W=.5 TO 3 STEP .5
2010 FOR X=1 TO 10
2020 FOR Y=1 TO 10
2030 IF B(X,Y)=W THEN 2070
2040 NEXT Y
2050 NEXT X
2060 GOTO 2080
2070 A=A+INT(W+.5)
2080 NEXT W
2090 FOR W=1 TO 7
2100 C(W)=0
2110 D(W)=0
2120 F(W)=0
2130 G(W)=0
2140 NEXT W
2150 P3=0
2160 FOR X=1 TO 10
2170 FOR Y=1 TO 10
2180 IF A(X,Y)&gt;10 THEN 2200
2190 P3=P3+1
2200 NEXT Y
2210 NEXT X
2220 PRINT "YOU HAVE";A;"SHOTS."
2230 IF P3&gt;=A THEN 2260
2240 PRINT "YOU HAVE MORE SHOTS THAN THERE ARE BLANK SQUARES."
2250 GOTO 2890
2260 IF A&lt;&gt;0 THEN 2290
2270 PRINT "I HAVE WON."
2280 STOP
2290 FOR W=1 TO A
2300 INPUT X,Y
2310 IF X&lt;&gt;INT(X) THEN 2370
2320 IF X&gt;10 THEN 2370
2330 IF X&lt;1 THEN 2370
2340 IF Y&lt;&gt;INT(Y) THEN 2370
2350 IF Y&gt;10 THEN 2370
2360 IF Y&gt;=1 THEN 2390
2370 PRINT "ILLEGAL, ENTER AGAIN."
2380 GOTO 2300
2390 IF A(X,Y)&gt;10 THEN 2440
2400 C(W)=X
2410 D(W)=Y
2420 NEXT W
2430 GOTO 2460
2440 PRINT "YOU SHOT THERE BEFORE ON TURN";A(X,Y)-10
2450 GOTO 2300
2460 FOR W=1 TO A
2470 IF A(C(W),D(W))=3 THEN 2540
2480 IF A(C(W),D(W))=2 THEN 2560
2490 IF A(C(W),D(W))=1 THEN 2580
2500 IF A(C(W),D(W))=.5 THEN 2600
2510 A(C(W),D(W))=10+C
2520 NEXT W
2530 GOTO 2620
2540 PRINT "YOU HIT MY BATTLESHIP."
2550 GOTO 2510
2560 PRINT "YOU HIT MY CRUISER."
2570 GOTO 2510
2580 PRINT "YOU HIT MY DESTROYER&lt;A&gt;."
2590 GOTO 2510
2600 PRINT "YOU HIT MY DESTROYER&lt;B&gt;."
2610 GOTO 2510
2620 A=0
2630 IF J$="YES" THEN 2670
2640 C=C+1
2650 PRINT
2660 PRINT "TURN";C
2670 A=0
2680 FOR W=.5 TO 3 STEP .5
2690 FOR X=1 TO 10
2700 FOR Y=1 TO 10
2710 IF A(X,Y)=W THEN 2750
2720 NEXT Y
2730 NEXT X
2740 GOTO 2760
2750 A=A+INT(W+.5)
2760 NEXT W
2770 P3=0
2780 FOR X=1 TO 10
2790 FOR Y=1 TO 10
2800 IF A(X,Y)&gt;10 THEN 2820
2810 P3=P3+1
2820 NEXT Y
2830 NEXT X
2840 PRINT "I HAVE";A;"SHOTS."
2850 IF P3&gt;A THEN 2880
2860 PRINT "I HAVE MORE SHOTS THAN BLANK SQUARES."
2870 GOTO 2270
2880 IF A&lt;&gt;0 THEN 2960
2890 PRINT "YOU HAVE WON."
2900 STOP
2910 X=INT(RND(1)*10+1)
2920 Y=INT(RND(1)*10+1)
2930 V=INT(3*RND(1)-1)
2940 V2=INT(3*RND(1)-1)
2950 RETURN
2960 FOR W=1 TO 12
2970 IF H(W)&gt;0 THEN 3800
2980 NEXT W
2990 REM*******************RANDOM
3000 W=0
3010 R3=0
3020 GOSUB 2910
3030 RESTORE
3040 R2=0
3050 R3=R3+1
3060 IF R3&gt;100 THEN 3010
3070 IF X&gt;10 THEN 3110
3080 IF X&gt;0 THEN 3120
3090 X=1+INT(RND(1)*2.5)
3100 GOTO 3120
3110 X=10-INT(RND(1)*2.5)
3120 IF Y&gt;10 THEN 3160
3130 IF Y&gt;0 THEN 3270
3140 Y=1+INT(RND(1)*2.5)
3150 GOTO 3270
3160 Y=10-INT(RND(1)*2.5)
3170 GOTO 3270
3180 F(W)=X
3190 G(W)=Y
3200 IF W=A THEN 3380
3210 IF R2=6 THEN 3030
3220 READ X1,Y1
3230 R2=R2+1
3240 DATA 1,1,-1,1,1,-3,1,1,0,2,-1,1
3250 X=X+X1
3260 Y=Y+Y1
3270 IF X&gt;10 THEN 3210
3280 IF X&lt;1 THEN 3210
3290 IF Y&gt;10 THEN 3210
3300 IF Y&lt;1 THEN 3210
3310 IF B(X,Y)&gt;10 THEN 3210
3320 FOR Q9=1 TO W
3330 IF F(Q9)&lt;&gt;X THEN 3350
3340 IF G(Q9)=Y THEN 3210
3350 NEXT Q9
3360 W=W+1
3370 GOTO 3180
3380 IF K$&lt;&gt;"YES" THEN 3420
3390 FOR Z5=1 TO A
3400 PRINT F(Z5);G(Z5)
3410 NEXT Z5
3420 FOR W=1 TO A
3430 IF B(F(W),G(W))=3 THEN 3500
3440 IF B(F(W),G(W))=2 THEN 3520
3450 IF B(F(W),G(W))=1 THEN 3560
3460 IF B(F(W),G(W))=.5 THEN 3540
3470 B(F(W),G(W))=10+C
3480 NEXT W
3490 GOTO 1950
3500 PRINT "I HIT YOUR BATTLESHIP"
3510 GOTO 3570
3520 PRINT "I HIT YOUR CRUISER"
3530 GOTO 3570
3540 PRINT "I HIT YOUR DESTROYER&lt;B&gt;"
3550 GOTO 3570
3560 PRINT "I HIT YOUR DESTROYER&lt;A&gt;"
3570 FOR Q=1 TO 12
3580 IF E(Q)&lt;&gt;-1 THEN 3730
3590 E(Q)=10+C
3600 H(Q)=B(F(W),G(W))
3610 M3=0
3620 FOR M2=1 TO 12
3630 IF H(M2)&lt;&gt;H(Q) THEN 3650
3640 M3=M3+1
3650 NEXT M2
3660 IF M3&lt;&gt;INT(H(Q)+.5)+1+INT(INT(H(Q)+.5)/3) THEN 3470
3670 FOR M2=1 TO 12
3680 IF H(M2)&lt;&gt;H(Q) THEN 3710
3690 E(M2)=-1
3700 H(M2)=-1
3710 NEXT M2
3720 GOTO 3470
3730 NEXT Q
3740 PRINT "PROGRAM ABORT:"
3750 FOR Q=1 TO 12
3760 PRINT "E(";Q;") =";E(Q)
3770 PRINT "H(";Q;") =";H(Q)
3780 NEXT Q
3790 STOP
3800 REM************************USINGEARRAY
3810 FOR R=1 TO 10
3820 FOR S=1 TO 10
3830 K(R,S)=0
3840 NEXT S
3850 NEXT R
3860 FOR U=1 TO 12
3870 IF E(U)&lt;10 THEN 4020
3880 FOR R=1 TO 10
3890 FOR S=1 TO 10
3900 IF B(R,S)&lt;10 THEN 3930
3910 K(R,S)=-10000000
3920 GOTO 4000
3930 FOR M=SGN(1-R) TO SGN(10-R)
3940 FOR N=SGN(1-S) TO SGN(10-S)
3950 IF N+M+N*M=0 THEN 3980
3960 IF B(R+M,S+N)&lt;&gt;E(U) THEN 3980
3970 K(R,S)=K(R,S)+E(U)-S*INT(H(U)+.5)
3980 NEXT N
3990 NEXT M
4000 NEXT S
4010 NEXT R
4020 NEXT U
4030 FOR R=1 TO A
4040 F(R)=R
4050 G(R)=R
4060 NEXT R
4070 FOR R=1 TO 10
4080 FOR S=1 TO 10
4090 Q9=1
4100 FOR M=1 TO A
4110 IF K(F(M),G(M))&gt;=K(F(Q9),G(Q9)) THEN 4130
4120 Q9=M
4130 NEXT M
4131 IF R&gt;A THEN 4140
4132 IF R=S THEN 4210
4140 IF K(R,S)&lt;K(F(Q9),G(Q9)) THEN 4210
4150 FOR M=1 TO A
4160 IF F(M)&lt;&gt;R THEN 4190
4170 IF G(M)=S THEN 4210
4180 NEXT M
4190 F(Q9)=R
4200 G(Q9)=S
4210 NEXT S
4220 NEXT R
4230 GOTO 3380
4240 END
</code></p>

<p>And finally (drumroll!) some gameplay:</p>

<p>(aren&rsquo;t you glad <em>BASIC</em> isn&rsquo;t pushed as a &ldquo;first programming language&rdquo; any more?!)</p>

<p>```sh
$ go run battleship.go</p>

<h2>Welcome to BATTLESHIP !!</h2>

<p>First, you place your ships, then I place mine, and then we take turns guessing squares on each other&rsquo;s board, until one of us sinks the other&rsquo;s ships.</p>

<p><strong><em> GOOD LUCK </em></strong></p>

<p>Begin adding ships. For each ship, enter the row and column separated by a space, followed by another space and then the direction to place it in.</p>

<p>For directions, use the following numeric codes: 1 = facing up, 2 = facing down, 3 = facing left, 4 = facing right
E.g. to place a submarine at E7 facing left, enter E 7 3</p>

<p>This will result in it occupying squares E7, E6, E5.</p>

<p>This is your board so far:
0  1  2  3  4  5  6  7  8  9
A
B
C
D
E
F
G
H
I
J</p>

<p>Enter row, column, direction for your Battleship (occupying 4 squares): B 3 2
This is your board so far:
0  1  2  3  4  5  6  7  8  9
A
B           +
C           +
D           +
E           +
F
G
H
I
J</p>

<p>Enter row, column, direction for your Aircraft Carrier (occupying 5 squares): I 2 4
This is your board so far:
0  1  2  3  4  5  6  7  8  9
A
B           +
C           +
D           +
E           +
F
G
H
I        +  +  +  +  +
J</p>

<p>Enter row, column, direction for your Destroyer (occupying 2 squares): C 8 2
This is your board so far:
0  1  2  3  4  5  6  7  8  9
A
B           +
C           +              +
D           +              +
E           +
F
G
H
I        +  +  +  +  +
J</p>

<p>Enter row, column, direction for your Submarine (occupying 3 squares): F 5 4
This is your board so far:
0  1  2  3  4  5  6  7  8  9
A
B           +
C           +              +
D           +              +
E           +
F                 +  +  +
G
H
I        +  +  +  +  +
J</p>

<p>Enter row, column, direction for your Cruiser (occupying 3 squares): E 0 2</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           +
C           +              +
D           +              +
E  +        +
F  +              +  +  +
G  +
H
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B
C
D
E
F
G
H
I
J</p>

<p>Choose a grid position to hit : C 4</p>

<p>You missed</p>

<p>The computer guessed: H6</p>

<p>It missed.</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           +
C           +              +
D           +              +
E  +        +
F  +              +  +  +
G  +
H                    .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B
C              .
D
E
F
G
H
I
J</p>

<p>Choose a grid position to hit : H 7</p>

<p>You missed</p>

<p>The computer guessed: D4</p>

<p>It missed.</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           +
C           +              +
D           +  .           +
E  +        +
F  +              +  +  +
G  +
H                    .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B
C              .
D
E
F
G
H                       .
I
J</p>

<p>Choose a grid position to hit : G2</p>

<p>You missed</p>

<p>The computer guessed: C7</p>

<p>It missed.</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           +
C           +           .  +
D           +  .           +
E  +        +
F  +              +  +  +
G  +
H                    .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B
C              .
D
E
F
G        .
H                       .
I
J</p>

<p>Choose a grid position to hit : F 7</p>

<p>You missed</p>

<p>The computer guessed: C9</p>

<p>It missed.</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           +
C           +           .  +  .
D           +  .           +
E  +        +
F  +              +  +  +
G  +
H                    .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B
C              .
D
E
F                       .
G        .
H                       .
I
J</p>

<p>Choose a grid position to hit : E7</p>

<p>You missed</p>

<p>The computer guessed: D1</p>

<p>It missed.</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           +
C           +           .  +  .
D     .     +  .           +
E  +        +
F  +              +  +  +
G  +
H                    .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B
C              .
D
E                       .
F                       .
G        .
H                       .
I
J</p>

<p>Choose a grid position to hit : C3</p>

<p>You missed</p>

<p>The computer guessed: H2</p>

<p>It missed.</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           +
C           +           .  +  .
D     .     +  .           +
E  +        +
F  +              +  +  +
G  +
H        .           .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B
C           .  .
D
E                       .
F                       .
G        .
H                       .
I
J</p>

<p>Choose a grid position to hit : B 3</p>

<p>You missed</p>

<p>The computer guessed: A0</p>

<p>It missed.</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A  .
B           +
C           +           .  +  .
D     .     +  .           +
E  +        +
F  +              +  +  +
G  +
H        .           .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           .
C           .  .
D
E                       .
F                       .
G        .
H                       .
I
J</p>

<p>Choose a grid position to hit : E 2</p>

<p>You missed</p>

<p>The computer guessed: E2</p>

<p>It missed.</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A  .
B           +
C           +           .  +  .
D     .     +  .           +
E  +     .  +
F  +              +  +  +
G  +
H        .           .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           .
C           .  .
D
E        .              .
F                       .
G        .
H                       .
I
J</p>

<p>Choose a grid position to hit : G 5</p>

<p>You missed</p>

<p>The computer guessed: E1</p>

<p>It missed.</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A  .
B           +
C           +           .  +  .
D     .     +  .           +
E  +  .  .  +
F  +              +  +  +
G  +
H        .           .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           .
C           .  .
D
E        .              .
F                       .
G        .        .
H                       .
I
J</p>

<p>Choose a grid position to hit : C 8</p>

<p>You missed</p>

<p>The computer guessed: F0
It hit your Cruiser!</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A  .
B           +
C           +           .  +  .
D     .     +  .           +
E  +  .  .  +
F  X              +  +  +
G  +
H        .           .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           .
C           .  .           .
D
E        .              .
F                       .
G        .        .
H                       .
I
J</p>

<p>Choose a grid position to hit : I 4</p>

<p>You missed</p>

<p>The computer guessed: F1</p>

<p>It missed.</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A  .
B           +
C           +           .  +  .
D     .     +  .           +
E  +  .  .  +
F  X  .           +  +  +
G  +
H        .           .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           .
C           .  .           .
D
E        .              .
F                       .
G        .        .
H                       .
I              .
J</p>

<p>Choose a grid position to hit : C6</p>

<p>You scored a hit!
You hit a Battleship</p>

<p>The computer guessed: E0
It hit your Cruiser!</p>

<p>Here is your board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A  .
B           +
C           +           .  +  .
D     .     +  .           +
E  X  .  .  +
F  X  .           +  +  +
G  +
H        .           .
I        +  +  +  +  +
J</p>

<p>Here is the computer&rsquo;s board so far:</p>

<p>0  1  2  3  4  5  6  7  8  9
A
B           .
C           .  .     X     .
D
E        .              .
F                       .
G        .        .
H                       .
I              .
J</p>

<p>&lt;&hellip; and so on &hellip;>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BlackJack!]]></title>
    <link href="http://agam.github.io/blog/2015/01/13/blackjack/"/>
    <updated>2015-01-13T22:33:18+00:00</updated>
    <id>http://agam.github.io/blog/2015/01/13/blackjack</id>
    <content type="html"><![CDATA[<p>As promised, the next installment in the line of text-based games written in Go. This one is a simplified form of Blackjack (no splitting, insurance bets, etc)</p>

<p>First, <strong>the Go code</strong></p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"math/rand"
"strings"
"time"
</code></pre>

<p>)</p>

<p>const deckSize = 52
const maxHandValue = 21</p>

<p>var houseLimits = []int{100, 500}</p>

<p>var suits = []string{&ldquo;Hearts&rdquo;, &ldquo;Clubs&rdquo;, &ldquo;Diamonds&rdquo;, &ldquo;Spades&rdquo;}
var cards = []string{&ldquo;Ace&rdquo;, &ldquo;Two&rdquo;, &ldquo;Three&rdquo;, &ldquo;Four&rdquo;, &ldquo;Five&rdquo;, &ldquo;Six&rdquo;, &ldquo;Seven&rdquo;, &ldquo;Eight&rdquo;, &ldquo;Nine&rdquo;, &ldquo;Ten&rdquo;, &ldquo;Jack&rdquo;, &ldquo;Queen&rdquo;, &ldquo;King&rdquo;}
var cardCosts = []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10}</p>

<p>type card int</p>

<p>type hand []card</p>

<p>func (c card) getDeckIndex() (suit int, rank int) {</p>

<pre><code>// Assume the deck is ordered from 1 to 52, with the suits
// being Hearts, Clubs, Diamonds, Spades, and the cards
// ranging from Ace (1) to King (13)

cardValue := int(c)
suit = cardValue / 13
rank = cardValue - suit*13
return
</code></pre>

<p>}</p>

<p>func (c card) show() string {</p>

<pre><code>suit, rank := c.getDeckIndex()
return fmt.Sprintf("%s of %s", cards[rank], suits[suit])
</code></pre>

<p>}</p>

<p>func (h hand) score() int {</p>

<pre><code>// Sum up all cards, add aces in later
numAces := 0
handValue := 0
for _, c := range h {
    _, rank := c.getDeckIndex()
    if rank == 0 {
        numAces++
    } else {
        handValue += cardCosts[rank]
    }
}

// TODO: Aces can be valued at 1 or 10
aceValue := numAces * 10
return handValue + aceValue
</code></pre>

<p>}</p>

<p>func showUsage() {</p>

<pre><code>fmt.Println("\n    Welcome to BlackJack!")
fmt.Println("------------------------------------\n")
fmt.Println("Here are the (simple!) rules: \n")
fmt.Println("1. We begin by dealing out one card for me and two cards for you")
fmt.Println("2. The dealer (that's me!) must hit on 16 or less, " +
    "and will stay on 17 or more.")
fmt.Printf("3. Whoever has a hand that totals more than %d, loses.\n", maxHandValue)
fmt.Println("4. I will deal from 'infinite decks'.")
fmt.Printf("5. The house limit is $%d.00.\n\n", houseLimits[1])
fmt.Println("\n\nOk, let's begin!\n\n")
</code></pre>

<p>}</p>

<p>func getYesNo(prompt string) bool {</p>

<pre><code>for {
    fmt.Printf("\n%s (enter 'yes' or 'no') ", prompt)
    var choice string
    fmt.Scan(&amp;choice)
    choice = strings.ToLower(choice)
    if choice == "yes" {
        return true
    }
    if choice == "no" {
        return false
    }
}
</code></pre>

<p>}</p>

<p>func getPlayerMoney() int {</p>

<pre><code>for {
    fmt.Printf("\nHow much money would you like to start with (enter a number between %d and %d) ? ", houseLimits[0], houseLimits[1])
    var money int
    fmt.Scan(&amp;money)
    if money &gt;= houseLimits[0] &amp;&amp; money &lt;= houseLimits[1] {
        return money
    }
}
</code></pre>

<p>}</p>

<p>func getWager(total int) (wager int) {</p>

<pre><code>for {
    fmt.Printf("\nWhat is your wager ? ")
    fmt.Scan(&amp;wager)
    if wager &gt; 0 || wager &lt;= total {
        return
    }
    fmt.Printf("You must enter a number between 0 and %d !", total)
}
</code></pre>

<p>}</p>

<p>func getNewCard() card {</p>

<pre><code>return card(rand.Intn(deckSize))
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>rand.Seed(time.Now().Unix())
if getYesNo("Do you want to see instructions?") {
    showUsage()
}

playerMoney := getPlayerMoney()
playerStartingMoney := playerMoney

for {
    fmt.Printf("\nYou have $%d\n", playerMoney)
    wager := getWager(playerMoney)

    var dealerHand, playerHand hand

    // Draw one card for dealer, two for player
    dealerCard := getNewCard()
    playerCard1 := getNewCard()
    playerCard2 := getNewCard()

    fmt.Printf("\nYour first card is a %s\n", playerCard1.show())
    fmt.Printf("Your second card is a %s\n", playerCard2.show())
    fmt.Printf("\nDealer shows a %s\n", dealerCard.show())

    dealerHand = append(dealerHand, dealerCard)
    playerHand = append(playerHand, playerCard1, playerCard2)

    playerWon := false
    playerLost := false
    playerScore := playerHand.score()
    for {
        fmt.Printf("\nYou have %d showing.\n", playerScore)
        if !getYesNo("Do you want a hit ?") {
            break
        }
        playerCard := getNewCard()
        playerHand = append(playerHand, playerCard)

        fmt.Printf("\nYou got a %s.\n\n", playerCard.show())

        playerScore = playerHand.score()
        if playerScore &gt; maxHandValue {
            fmt.Println("You LOSE!")
            playerLost = true
            break
        }
    }

    for !playerLost {
        dealerCard := getNewCard()
        dealerHand = append(dealerHand, dealerCard)

        fmt.Printf("Dealer got a %s.\n", dealerCard.show())

        dealerScore := dealerHand.score()
        fmt.Printf("Dealer has %d\n\n", dealerScore)

        if dealerScore &gt; playerScore &amp;&amp; dealerScore &lt;= maxHandValue {
            fmt.Println("You LOSE!\n")
            playerLost = true
            break
        }

        if dealerScore &lt;= 16 {
            continue
        }
        if dealerScore &gt; maxHandValue {
            fmt.Println("Dealer busted. You WIN!\n")
            playerWon = true
            break
        }
        // Coin toss to decide whether to draw over 17
        coin := rand.Intn(100)
        if coin &gt; 50 {
            continue
        }

        // Dealer is done
        if dealerScore &lt; playerScore {
            fmt.Println("\nYou WIN!\n")
            playerWon = true
        } else {
            fmt.Println("\nIt's a DRAW (you get your money back ... this time)\n")
        }
    }

    if playerWon {
        playerMoney += wager
    }

    if playerLost {
        playerMoney -= wager
    }

    if playerMoney &lt;= 0 {
        fmt.Println("Sorry, but it appears you have run out of money.\n")
        break
    }

    if !getYesNo("Play another hand?") {
        break
    }
}

playerDiff := playerMoney - playerStartingMoney
if playerDiff &gt; 0 {
    fmt.Printf("You won $%d today!\n\n", playerDiff)
} else if playerDiff &lt; 0 {
    fmt.Printf("You lost $%d today!\n\n", -playerDiff)
} else {
    fmt.Printf("You broke even!\n\n")
}

fmt.Println("Come back next time with more money!")
</code></pre>

<p>}
```</p>

<p>And then, for comparison, the <strong>original BASIC version</strong> (ok, this one is not a fair comparison since it <em>does</em> allow splitting and insurance, but still).</p>

<p><code>basic
2 PRINT TAB(31);"BLACK JACK"
4 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
6 PRINT:PRINT:PRINT
10 DEF FNA(Q)=Q+11*(Q&gt;=22)
20 DIM P(15,12),Q(15),C(52),D(52),T(8),S(7),B(15)
30 DIM R(15)
40 REM--P(I,J) IS THE JTH CARD IN HAND I, Q(I) IS TOTAL OF HAND I
50 REM--C IS THE DECK BEING DEALT FROM, D IS THE DISCARD PILE,
60 REM--T(I) IS THE TOTAL FOR PLAYER I, S(I) IS THE TOTAL THIS HAND FOR
70 REM--PLAYER I, B(I) IS TH BET FOR HAND I
80 REM--R(I) IS THE LENGTH OF P(I,*)
90 GOTO 1500
100 REM--SUBROUTINE TO GET A CARD.  RESULT IS PUT IN X.
110 IF C&lt;51 THEN 230
120 PRINT "RESHUFFLING"
130 FOR D=D TO 1 STEP -1
140 C=C-1
150 C(C)=D(D)
160 NEXT D
170 FOR C1=52 TO C STEP -1
180 C2=INT(RND(1)*(C1-C+1))+C
190 C3=C(C2)
200 C(C2)=C(C1)
210 C(C1)=C3
220 NEXT C1
230 X=C(C)
240 C=C+1
250 RETURN
300 REM--SUBROUTINE TO EVALUATE HAND I.  TOTAL IS PUT INTO
310 REM--Q(I). TOTALS HAVE THE FOLLOWING MEANING:
320 REM--  2-10...HARD 2-10
330 REM-- 11-21...SOFT 11-21
340 REM-- 22-32...HARD 11-21
350 REM--  33+....BUSTED
360 Q=0
370 FOR Q2=1 TO R(I)
380 X=P(I,Q2)
390 GOSUB 500
400 NEXT Q2
410 Q(I)=Q
420 RETURN
500 REM--SUBROUTINE TO ADD CARD X TO TOTAL Q.
510 X1=X: IF X1&gt;10 THEN X1=10:  REM  SAME AS X1=10 MIN X
520 Q1=Q+X1
530 IF Q&gt;=11 THEN 590
540 IF X&gt;1 THEN 570
550 Q=Q+11
560 RETURN
570 Q=Q1-11*(Q1&gt;=11)
580 RETURN
590 Q=Q1-(Q&lt;=21 AND Q1&gt;21)
600 IF Q&lt;33 THEN 620
610 Q=-1
620 RETURN
700 REM--CARD PRINTING SUBROUTINE
710 REM  D$ DEFINED ELSEWHERE
720 PRINT MID$(D$,3*X-2,3);
730 PRINT "  ";
740 RETURN
750 REM--ALTERNATIVE PRINTING ROUTINE
760 PRINT " ";MID$(D$,3*X-1,2);
770 PRINT "   ";
780 RETURN
800 REM--SUBROUTINE TO PLAY OUT A HAND.
810 REM--NO SPLITTING OR BLACKJACKS ALLOWED
820 H1=5
830 GOSUB 1410
840 H1=3
850 ON H GOTO 950,930
860 GOSUB 100
870 B(I)=B(I)*2
880 PRINT "RECEIVED A";
890 GOSUB 700
900 GOSUB 1100
910 IF Q&gt;0 THEN GOSUB 1300
920 RETURN
930 GOSUB 1320
940 RETURN
950 GOSUB 100
960 PRINT "RECEIVED A";
970 GOSUB 700
980 GOSUB 1100
990 IF Q&lt;0 THEN 940
1000 PRINT "HIT";
1010 GOTO 830
1100 REM--SUBROUTINE TO ADD A CARD TO ROW I
1110 R(I)=R(I)+1
1120 P(I,R(I))=X
1130 Q=Q(I)
1140 GOSUB 500
1150 Q(I)=Q
1160 IF Q&gt;=0 THEN 1190
1170 PRINT "...BUSTED"
1180 GOSUB 1200
1190 RETURN
1200 REM--SUBROUTINE TO DISCARD ROW I
1210 IF R(I)&lt;&gt;0 THEN 1230
1220 RETURN
1230 D=D+1
1240 D(D)=P(I,R(I))
1250 R(I)=R(I)-1
1260 GOTO 1210
1300 REM--PRINTS TOTAL OF HAND I
1310 PRINT
1320 AA=Q(I): GOSUB 3400
1325 PRINT "TOTAL IS";AA
1330 RETURN
1400 REM--SUBROUTINE TO READ REPLY
1410 REM  I$ DEFINED ELSEWHERE
1420 INPUT H$: H$=LEFT$(H$,1)
1430 FOR H=1 TO H1 STEP 2
1440 IF H$=MID$(I$,H,1) THEN 1480
1450 NEXT H
1460 PRINT "TYPE ";MID$(I$,1,H1-1);" OR ";MID$(I$,H1,2);" PLEASE";
1470 GOTO 1420
1480 H=(H+1)/2
1490 RETURN
1500 REM--PROGRAM STARTS HERE
1510 REM--INITIALIZE
1520 D$="N A  2  3  4  5  6  7N 8  9 10  J  Q  K"
1530 I$="H,S,D,/,"
1540 FOR I=1 TO 13
1550 FOR J=4*I-3 TO 4*I
1560 D(J)=I
1570 NEXT J
1580 NEXT I
1590 D=52
1600 C=53
1610 PRINT "DO YOU WANT INSTRUCTIONS";
1620 INPUT H$
1630 IF LEFT$(H$,1)="N" OR LEFT$(H$,1)="n" THEN 1760
1640 PRINT "THIS IS THE GAME OF 21. AS MANY AS 7 PLAYERS MAY PLAY THE"
1650 PRINT "GAME. ON EACH DEAL, BETS WILL BE ASKED FOR, AND THE"
1660 PRINT "PLAYERS' BETS SHOULD BE TYPED IN. THE CARDS WILL THEN BE"
1670 PRINT "DEALT, AND EACH PLAYER IN TURN PLAYS HIS HAND. THE"
1680 PRINT "FIRST RESPONSE SHOULD BE EITHER 'D', INDICATING THAT THE"
1690 PRINT "PLAYER IS DOUBLING DOWN, 'S', INDICATING THAT HE IS"
1700 PRINT "STANDING, 'H', INDICATING HE WANTS ANOTHER CARD, OR '/',"
1710 PRINT "INDICATING THAT HE WANTS TO SPLIT HIS CARDS. AFTER THE"
1720 PRINT "INITIAL RESPONSE, ALL FURTHER RESPONSES SHOULD BE 'S' OR"
1730 PRINT "'H', UNLESS THE CARDS WERE SPLIT, IN WHICH CASE DOUBLING"
1740 PRINT "DOWN IS AGAIN PERMITTED. IN ORDER TO COLLECT FOR"
1750 PRINT "BLACKJACK, THE INITIAL RESPONSE SHOULD BE 'S'."
1760 PRINT "NUMBER OF PLAYERS";
1770 INPUT N
1775 PRINT
1780 IF N&lt;1 OR N&gt;7 OR N&gt;INT(N) THEN 1760
1790 FOR I=1 TO 8: T(I)=0: NEXT I
1800 D1=N+1
1810 IF 2*D1+C&gt;=52 THEN GOSUB 120
1820 IF C=2 THEN C=C-1
1830 FOR I=1 TO N: Z(I)=0: NEXT I
1840 FOR I=1 TO 15: B(I)=0: NEXT I
1850 FOR I=1 TO 15: Q(I)=0: NEXT I
1860 FOR I=1 TO 7: S(I)=0: NEXT I
1870 FOR I=1 TO 15: R(I)=0: NEXT I
1880 PRINT "BETS:"
1890 FOR I=1 TO N: PRINT "#";I;: INPUT Z(I): NEXT I
1900 FOR I=1 TO N
1910 IF Z(I)&lt;=0 OR Z(I)&gt;500 THEN 1880
1920 B(I)=Z(I)
1930 NEXT I
1940 PRINT "PLAYER";
1950 FOR I=1 TO N
1960 PRINT I;"   ";
1970 NEXT I
1980 PRINT "DEALER"
1990 FOR J=1 TO 2
2000 PRINT TAB(5);
2010 FOR I=1 TO D1
2020 GOSUB 100
2030 P(I,J)=X
2040 IF J=1 OR I&lt;=N THEN GOSUB 750
2050 NEXT I
2060 PRINT
2070 NEXT J
2080 FOR I=1 TO D1
2090 R(I)=2
2100 NEXT I
2110 REM--TEST FOR INSURANCE
2120 IF P(D1,1)&gt;1 THEN 2240
2130 PRINT "ANY INSURANCE";
2140 INPUT H$
2150 IF LEFT$(H$,1)&lt;&gt;"Y" THEN 2240
2160 PRINT "INSURANCE BETS"
2170 FOR I=1 TO N: PRINT "#";I;: INPUT Z(I): NEXT I
2180 FOR I=1 TO N
2190 IF Z(I)&lt;0 OR Z(I)&gt;B(I)/2 THEN 2160
2200 NEXT I
2210 FOR I=1 TO N
2220 S(I)=Z(I)*(3*(-(P(D1,2)&gt;=10))-1)
2230 NEXT I
2240 REM--TEST FOR DEALER BLACKJACK
2250 L1=1: L2=1
2252 IF P(D1,1)=1 AND P(D1,2)&gt;9 THEN L1=0: L2=0
2253 IF P(D1,2)=1 AND P(D1,1)&gt;9 THEN L1=0: L2=0
2254 IF L1&lt;&gt;0 OR L2&lt;&gt;0 THEN 2320
2260 PRINT:PRINT "DEALER HAS A";MID$(D$,3*P(D1,2)-2,3);" IN THE HOLE ";
2270 PRINT "FOR BLACKJACK"
2280 FOR I=1 TO D1
2290 GOSUB 300
2300 NEXT I
2310 GOTO 3140
2320 REM--NO DEALER BLACKJACK
2330 IF P(D1,1)&gt;1 AND P(D1,1)&lt;10 THEN 2350
2340 PRINT:PRINT "NO DEALER BLACKJACK."
2350 REM--NOW PLAY THE HANDS
2360 FOR I=1 TO N
2370 PRINT "PLAYER";I;
2380 H1=7
2390 GOSUB 1410
2400 ON H GOTO 2550,2410,2510,2600
2410 REM--PLAYER WANTS TO STAND
2420 GOSUB 300
2430 IF Q(I)&lt;&gt;21 THEN 2490
2440 PRINT "BLACKJACK"
2450 S(I)=S(I)+1.5*B(I)
2460 B(I)=0
2470 GOSUB 1200
2480 GOTO 2900
2490 GOSUB 1320
2500 GOTO 2900
2510 REM--PLAYER WANTS TO DOUBLE DOWN
2520 GOSUB 300
2530 GOSUB 860
2540 GOTO 2900
2550 REM--PLAYER WANTS TO BE HIT
2560 GOSUB 300
2570 H1=3
2580 GOSUB 950
2590 GOTO 2900
2600 REM--PLAYER WANTS TO SPLIT
2610 L1=P(I,1): IF P(I,1)&gt;10 THEN L1=10
2612 L2=P(I,2): IF P(I,2)&gt;10 THEN L2=10
2614 IF L1=L2 THEN 2640
2620 PRINT "SPLITTING NOT ALLOWED."
2630 GOTO 2370
2640 REM--PLAY OUT SPLIT
2650 I1=I+D1
2660 R(I1)=2
2670 P(I1,1)=P(I,2)
2680 B(I+D1)=B(I)
2690 GOSUB 100
2700 PRINT "FIRST HAND RECEIVES A";
2710 GOSUB 700
2720 P(I,2)=X
2730 GOSUB 300
2740 PRINT
2750 GOSUB 100
2760 PRINT "SECOND HAND RECEIVES A";
2770 I=I1
2780 GOSUB 700
2790 P(I,2)=X
2800 GOSUB 300
2810 PRINT
2820 I=I1-D1
2830 IF P(I,1)=1 THEN 2900
2840 REM--NOW PLAY THE TWO HANDS
2850 PRINT "HAND";1-(I&gt;D1);
2860 GOSUB 800
2870 I=I+D1
2880 IF I=I1 THEN 2850
2890 I=I1-D1
2900 NEXT I
2910 GOSUB 300
2920 REM--TEST FOR PLAYING DEALER'S HAND
2930 FOR I=1 TO N
2940 IF R(I)&gt;0 OR R(I+D1)&gt;0 THEN 3010
2950 NEXT I
2960 PRINT "DEALER HAD A";
2970 X=P(D1,2)
2980 GOSUB 700
2990 PRINT " CONCEALED."
3000 GOTO 3140
3010 PRINT "DEALER HAS A";MID$(D$,3*P(D1,2)-2,3);" CONCEALED ";
3020 I=D1
3030 AA=Q(I): GOSUB 3400
3035 PRINT "FOR A TOTAL OF";AA
3040 IF AA&gt;16 THEN 3130
3050 PRINT "DRAWS";
3060 GOSUB 100
3070 GOSUB 750
3080 GOSUB 1100
3090 AA=Q: GOSUB 3400
3095 IF Q&gt;0 AND AA&lt;17 THEN 3060
3100 Q(I)=Q-(Q&lt;0)/2
3110 IF Q&lt;0 THEN 3140
3120 AA=Q: GOSUB 3400
3125 PRINT "---TOTAL IS";AA
3130 PRINT
3140 REM--TALLY THE RESULT
3150 REM
3160 Z$="LOSES PUSHES WINS "
3165 PRINT
3170 FOR I=1 TO N
3180 AA=Q(I): GOSUB 3400
3182 AB=Q(I+D1): GOSUB 3410
3184 AC=Q(D1): GOSUB 3420
3186 S(I)=S(I)+B(I)*SGN(AA-AC)+B(I+D1)*SGN(AB-AC)
3188 B(I+D1)=0
3200 PRINT "PLAYER";I;
3210 PRINT MID$(Z$,SGN(S(I))*6+7,6);" ";
3220 IF S(I)&lt;&gt;0 THEN 3250
3230 PRINT "      ";
3240 GOTO 3260
3250 PRINT ABS(S(I));
3260 T(I)=T(I)+S(I)
3270 PRINT "TOTAL=";T(I)
3280 GOSUB 1200
3290 T(D1)=T(D1)-S(I)
3300 I=I+D1
3310 GOSUB 1200
3320 I=I-D1
3330 NEXT I
3340 PRINT "DEALER'S TOTAL=";T(D1)
3345 PRINT
3350 GOSUB 1200
3360 GOTO 1810
3400 AA=AA+11*(AA&gt;=22): RETURN
3410 AB=AB+11*(AB&gt;=22): RETURN
3420 AC=AC+11*(AC&gt;=22): RETURN
</code></p>

<p>Yup, that is <em>long</em>. If you scrolled all the way down here, a bit of gameplay:</p>

<p>```sh
$ go run blackjack.go</p>

<p>Do you want to see instructions? (enter &lsquo;yes&rsquo; or &lsquo;no&rsquo;) yes</p>

<pre><code>Welcome to BlackJack!
------------------------------------
</code></pre>

<p>Here are the (simple!) rules:</p>

<ol>
<li>We begin by dealing out one card for me and two cards for you</li>
<li>The dealer (that&rsquo;s me!) must hit on 16 or less, and will stay on 17 or more.</li>
<li>Whoever has a hand that totals more than 21, loses.</li>
<li>I will deal from &lsquo;infinite decks&rsquo;.</li>
<li>The house limit is $500.00.</li>
</ol>


<p>Ok, let&rsquo;s begin!</p>

<p>How much money would you like to start with (enter a number between 100 and 500) ? 200</p>

<p>You have $200</p>

<p>What is your wager ? 20</p>

<p>Your first card is a Eight of Spades
Your second card is a Queen of Hearts</p>

<p>Dealer shows a King of Hearts</p>

<p>You have 18 showing.</p>

<p>Do you want a hit ? (enter &lsquo;yes&rsquo; or &lsquo;no&rsquo;) no
Dealer got a Jack of Diamonds.
Dealer has 20</p>

<p>You LOSE!</p>

<p>Play another hand? (enter &lsquo;yes&rsquo; or &lsquo;no&rsquo;) yes</p>

<p>You have $180</p>

<p>What is your wager ? 10</p>

<p>Your first card is a Three of Hearts
Your second card is a Ten of Clubs</p>

<p>Dealer shows a Three of Diamonds</p>

<p>You have 13 showing.</p>

<p>Do you want a hit ? (enter &lsquo;yes&rsquo; or &lsquo;no&rsquo;) yes</p>

<p>You got a Eight of Hearts.</p>

<p>You have 21 showing.</p>

<p>Do you want a hit ? (enter &lsquo;yes&rsquo; or &lsquo;no&rsquo;) no
Dealer got a Four of Clubs.
Dealer has 7</p>

<p>Dealer got a Ace of Diamonds.
Dealer has 17</p>

<p>Dealer got a Three of Clubs.
Dealer has 20</p>

<p>Dealer got a Three of Diamonds.
Dealer has 23</p>

<p>Dealer busted. You WIN!</p>

<p>&lt;&hellip; and so on &hellip;>
```</p>

<p>The only one left now is a game of Battleships. Stay tuned &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple subtraction ... and gambling]]></title>
    <link href="http://agam.github.io/blog/2015/01/11/simple-subtraction-dot-dot-dot-and-gambling/"/>
    <updated>2015-01-11T23:01:57+00:00</updated>
    <id>http://agam.github.io/blog/2015/01/11/simple-subtraction-dot-dot-dot-and-gambling</id>
    <content type="html"><![CDATA[<p>Continuing on the theme of the last two posts, here are two more examples, here are <em>two more</em>. The first is a simple change-counting program, which might fit the bill for a &ldquo;first program&rdquo;, and the second is a game of craps (not too interactive, unfortunately; all you do is place a bet &mdash; I did at least add a delay for the dice throw to make it seem less &hellip; er &hellip; automated).</p>

<h3>Change: Go Source</h3>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"math"
"strings"
</code></pre>

<p>)</p>

<p>type moneyUnit struct {</p>

<pre><code>name  string
value int
</code></pre>

<p>}</p>

<p>var moneyUnits = []moneyUnit{</p>

<pre><code>{"Hundred Dollar Bill", 100 * 100},
{"Fifty Dollar Bill", 50 * 100},
{"Twenty Dollar Bill", 20 * 100},
{"Ten Dollar Bill", 10 * 100},
{"Five Dollar Bill", 5 * 100},
{"One Dollar Bill", 100},
{"One-Half Dollar", 50},
{"Quarter", 25},
{"Dime", 10},
{"Nickel", 5},
{"Penny", 1},
</code></pre>

<p>}</p>

<p>func showUsage() {</p>

<pre><code>fmt.Println("\n         The Change-Maker   ")
fmt.Println("----------------------------------\n")
fmt.Println("I'll help you calculate the change for any item purchased.\n")
</code></pre>

<p>}</p>

<p>func getMoney(prompt string) float64 {</p>

<pre><code>for {
    fmt.Printf("%s : $", prompt)
    var answer float64
    fmt.Scan(&amp;answer)
    pennies := answer * 100
    roundPennies := math.Ceil(pennies)
    if roundPennies-pennies &gt; 1e-4 {
        fmt.Println("Error: please enter $XXXX.XX (i.e. up to two decimal places!)")
    } else {
        return answer
    }
}
</code></pre>

<p>}</p>

<p>func deductChange(pennies, unit int) (numUnits int, remaining int) {</p>

<pre><code>if pennies%unit == 0 {
    return pennies / unit, 0
} else {
    numUnits = pennies / unit
    remaining = pennies - numUnits*unit
    return
}
</code></pre>

<p>}</p>

<p>func showChange(pennies int) {</p>

<pre><code>for _, u := range moneyUnits {
    var numUnits int
    numUnits, pennies = deductChange(pennies, u.value)
    if numUnits &gt; 0 {
        fmt.Printf("%5d  %s(s)\n", numUnits, u.name)
    }
}
if pennies != 0 {
    panic("wtf")
}
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>showUsage()
for {
    cost := getMoney("Cost of item?")
    payment := getMoney("Amount of payment?")
    if payment == cost {
        fmt.Println("Aha! you don't need any change!\n")
    } else if payment-cost &gt; 0 {
        showChange(int((payment - cost) * 100))
    } else {
        fmt.Println("\nHey! you need to pay me some more for that!")
    }
    fmt.Printf("\nAnother item? (enter 'y' or 'n'): ")
    var another string
    fmt.Scan(&amp;another)
    if strings.ToLower(another) == "n" {
        break
    } else {
        fmt.Println()
    }
}
fmt.Println("\n\nThank you, come again!\n\n")
</code></pre>

<p>}
```</p>

<h3>Change: Basic Source</h3>

<p><code>basic
2 PRINT TAB(33);"CHANGE"
4 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
5 PRINT:PRINT:PRINT
6 PRINT "I, YOUR FRIENDLY MICROCOMPUTER, WILL DETERMINE"
8 PRINT "THE CORRECT CHANGE FOR ITEMS COSTING UP TO $100."
9 PRINT:PRINT
10 PRINT "COST OF ITEM";:INPUT A:PRINT "AMOUNT OF PAYMENT";:INPUT P
20 C=P-A:M=C:IF C&lt;&gt;0 THEN 90
25 PRINT "CORRECT AMOUNT, THANK YOU."
30 GOTO 400
90 IF C&gt;0 THEN 120
95 PRINT "SORRY, YOU HAVE SHORT-CHANGED ME $";A-P
100 GOTO 10
120 PRINT "YOUR CHANGE, $";C
130 D=INT(C/10)
140 IF D=0 THEN 155
150 PRINT D;"TEN DOLLAR BILL(S)"
155 C=M-(D*10)
160 E=INT(C/5)
170 IF E=0 THEN 185
180 PRINT E;"FIVE DOLLARS BILL(S)"
185 C=M-(D*10+E*5)
190 F=INT(C)
200 IF F=0 THEN 215
210 PRINT F;"ONE DOLLAR BILL(S)"
215 C=M-(D*10+E*5+F)
220 C=C*100
225 N=C
230 G=INT(C/50)
240 IF G=0 THEN 255
250 PRINT G;"ONE HALF DOLLAR(S)"
255 C=N-(G*50)
260 H=INT(C/25)
270 IF H=0 THEN 285
280 PRINT H;"QUARTER(S)"
285 C=N-(G*50+H*25)
290 I=INT(C/10)
300 IF I=0 THEN 315
310 PRINT I;"DIME(S)"
315 C=N-(G*50+H*25+I*10)
320 J=INT(C/5)
330 IF J=0 THEN 345
340 PRINT J;"NICKEL(S)"
345 C=N-(G*50+H*25+I*10+J*5)
350 K=INT(C+.5)
360 IF K=0 THEN 380
370 PRINT K;"PENNY(S)"
380 PRINT "THANK YOU, COME AGAIN."
390 PRINT:PRINT
400 GOTO 10
410 END
</code></p>

<h3>Change: Gameplay</h3>

<p>```sh
$ go run change.go</p>

<pre><code>     The Change-Maker
     ----------------------------------
</code></pre>

<p>I&rsquo;ll help you calculate the change for any item purchased.</p>

<p>Cost of item? : $4.56
Amount of payment? : $20
1  Ten Dollar Bill(s)
1  Five Dollar Bill(s)
1  Quarter(s)
1  Dime(s)
1  Nickel(s)
4  Penny(s)</p>

<p>Another item? (enter &lsquo;y&rsquo; or &lsquo;n&rsquo;): y</p>

<p>Cost of item? : $56.43
Amount of payment? : $525.50
4  Hundred Dollar Bill(s)
1  Fifty Dollar Bill(s)
1  Ten Dollar Bill(s)
1  Five Dollar Bill(s)
4  One Dollar Bill(s)
1  Nickel(s)
2  Penny(s)</p>

<p>Another item? (enter &lsquo;y&rsquo; or &lsquo;n&rsquo;): n</p>

<p>Thank you, come again!
```</p>

<h3>Craps: Go Source</h3>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"math/rand"
"strings"
"time"
</code></pre>

<p>)</p>

<p>const (</p>

<pre><code>playerStartingMoney = 100
minimumBetAmount    = 5
diceThrowDelayMs    = 300
pointBreakThrow     = 7
</code></pre>

<p>)</p>

<p>const (</p>

<pre><code>rollerPlayer = iota
rollerComputer
</code></pre>

<p>)</p>

<p>const (</p>

<pre><code>winStr       = "... and Win!"
loseStr      = "... and Lose!"
rollAgainStr = "... roll again ..."
</code></pre>

<p>)</p>

<p>var winningThrows = map[int]bool{</p>

<pre><code>7:  true,
11: true,
</code></pre>

<p>}</p>

<p>var losingThrows = map[int]bool{</p>

<pre><code>2:  true,
3:  true,
12: true,
</code></pre>

<p>}</p>

<p>func showUsage() {</p>

<pre><code>fmt.Printf("See rules? enter 'y' or 'n' : ")
var choice string
fmt.Scan(&amp;choice)
if strings.ToLower(choice) == "n" {
    return
}
fmt.Println("\n       Welcome to CRAPS!    ")
fmt.Println("----------------------------------------")
fmt.Println("\nHere are the rules:")
fmt.Println("- You roll a pair of dice and add up the score for each turn")
fmt.Println("- rolling a 7 or 11 on the first roll wins")
fmt.Println("- rolling a 2, 3 or 12 on the first roll loses")
fmt.Println("- any other number becomes your 'point', and you continue to roll")
fmt.Println("    - if you subsequently roll your 'point' again, you win")
fmt.Println("    - if you roll a 7, you lose")
fmt.Println("- When one of us loses, we switch dice")
fmt.Println("- You start with $100, and have to bet a minimum of $5 per turn")
fmt.Println("- You get the first turn")
fmt.Println("- To stop betting, just enter $0 as your bet amount")
fmt.Println("\n\nThat's it, let's go!\n\n")
</code></pre>

<p>}</p>

<p>func getBetMoney(total int) (bet int) {</p>

<pre><code>for {
    fmt.Printf("\nYou have $%d, how much would you like to bet? $", total)
    fmt.Scan(&amp;bet)
    if bet &gt; total {
        fmt.Println("Hey, you can't bet more than you have!")
    } else if bet &gt; 0 &amp;&amp; bet &lt; minimumBetAmount {
        fmt.Printf("Sorry buddy, you gotta place at least $%d on the table.\n", minimumBetAmount)
    } else {
        return
    }
}
</code></pre>

<p>}</p>

<p>func getDice(subject string) int {</p>

<pre><code>fmt.Printf("%s roll ", subject)
time.Sleep(diceThrowDelayMs * time.Millisecond)
dice1 := 1 + rand.Intn(6)
fmt.Printf("%d ", dice1)
time.Sleep(diceThrowDelayMs * time.Millisecond)
dice2 := 1 + rand.Intn(6)
fmt.Printf("and %d ", dice2)
time.Sleep(diceThrowDelayMs * time.Millisecond)
return dice1 + dice2
</code></pre>

<p>}</p>

<p>func playRound(roller int) bool {</p>

<pre><code>subject := "I"
possessive := "My"
if roller == rollerPlayer {
    subject = "You"
    possessive = "Your"
}

firstThrow := getDice(subject)

if winningThrows[firstThrow] {
    fmt.Println(winStr)
    return true
}
if losingThrows[firstThrow] {
    fmt.Println(loseStr)
    return false
}

fmt.Printf("so %s point is %d\n", possessive, firstThrow)
for {
    throw := getDice(subject)
    if throw == firstThrow {
        fmt.Printf("and make %s point!\n", possessive)
        return true
    }
    if throw == pointBreakThrow {
        fmt.Println(loseStr)
        return false
    }
    fmt.Println(rollAgainStr)
}
</code></pre>

<p>}</p>

<p>func updateMoney(won bool, total, bet int) (newTotal int) {</p>

<pre><code>if won {
    newTotal = total + bet
} else {
    newTotal = total - bet
}
return
</code></pre>

<p>}</p>

<p>func showQuitMessage() {</p>

<pre><code>fmt.Println("\nAh I wish I could quit this easily ... farewell, young gambler!\n")
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>showUsage()
rand.Seed(time.Now().Unix())

playerMoney := playerStartingMoney
for {
    fmt.Println("\n\nOk, your turn now\n")
    for {
        bet := getBetMoney(playerMoney)
        if bet == 0 {
            showQuitMessage()
            return
        }
        playerWon := playRound(rollerPlayer)
        playerMoney = updateMoney(playerWon, playerMoney, bet)
        if !playerWon {
            break
        }
    }

    fmt.Println("\n\nOk, my turn now\n")
    for {
        bet := getBetMoney(playerMoney)
        if bet == 0 {
            showQuitMessage()
            return
        }
        computerWon := playRound(rollerComputer)
        playerMoney = updateMoney(!computerWon, playerMoney, bet)
        if !computerWon {
            break
        }
    }
}
</code></pre>

<p>}
```</p>

<h3>Craps: Basic Source</h3>

<p><code>basic
5 PRINT TAB(33);"CRAPS"
10 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
12 PRINT:PRINT:PRINT
15 LET R=0
20 PRINT"2,3,12 ARE LOSERS; 4,5,6,8,9,10 ARE POINTS; 7,11 ARE NATURAL WINNERS."
21 LET T=1
22 PRINT "PICK A NUMBER AND INPUT TO ROLL DICE";
23 INPUT Z
24 LET X=(RND(0))
25 LET T =T+1
26 IF T&lt;=Z GOTO 24
27 PRINT"INPUT THE AMOUNT OF YOUR WAGER.";
28 INPUT F
30 PRINT "I WILL NOW THROW THE DICE"
40 LET E=INT(7*RND(1))
41 LET S=INT(7*RND(1))
42 LET X=E+S
50 IF X=7 GOTO 180
55 IF X=11 GOTO 180
60 IF X=1 GOTO 40
62 IF X=2 GOTO 195
65 IF X=0 GOTO 40
70 IF X=2 GOTO 200
80 IF X=3 GOTO 200
90 IF X=12 GOTO 200
125 IF X=5 GOTO 220
130 IF X =6 GOTO 220
140 IF X=8 GOTO 220
150 IF X=9 GOTO 220
160 IF X =10 GOTO 220
170 IF X=4 GOTO 220
180 PRINT X "- NATURAL....A WINNER!!!!"
185 PRINT X"PAYS EVEN MONEY, YOU WIN"F"DOLLARS"
190 GOTO 210
195 PRINT X"- SNAKE EYES....YOU LOSE."
196 PRINT "YOU LOSE"F "DOLLARS."
197 LET F=0-F
198 GOTO 210
200 PRINT X " - CRAPS...YOU LOSE."
205 PRINT "YOU LOSE"F"DOLLARS."
206 LET F=0-F
210 LET R= R+F
211 GOTO 320
220 PRINT X "IS THE POINT. I WILL ROLL AGAIN"
230 LET H=INT(7*RND(1))
231 LET Q=INT(7*RND(1))
232 LET O=H+Q
240 IF O=1 GOTO 230
250 IF O=7 GOTO 290
255 IF O=0 GOTO 230
260 IF O=X GOTO 310
270 PRINT O " - NO POINT. I WILL ROLL AGAIN"
280 GOTO 230
290 PRINT O "- CRAPS. YOU LOSE."
291 PRINT "YOU LOSE $"F
292 F=0-F
293 GOTO 210
300 GOTO 320
310 PRINT X"- A WINNER.........CONGRATS!!!!!!!!"
311 PRINT X "AT 2 TO 1 ODDS PAYS YOU...LET ME SEE..."2*F"DOLLARS"
312 LET F=2*F
313 GOTO 210
320 PRINT " IF YOU WANT TO PLAY AGAIN PRINT 5 IF NOT PRINT 2";
330 INPUT M
331 IF R&lt;0 GOTO 334
332 IF R&gt;0 GOTO 336
333 IF R=0 GOTO 338
334 PRINT "YOU ARE NOW UNDER $";-R
335 GOTO 340
336 PRINT "YOU ARE NOW AHEAD $";R
337 GOTO 340
338 PRINT "YOU ARE NOW EVEN AT 0"
340 IF M=5 GOTO 27
341 IF R&lt;0 GOTO 350
342 IF R&gt;0 GOTO 353
343 IF R=0 GOTO 355
350 PRINT"TOO BAD, YOU ARE IN THE HOLE. COME AGAIN."
351 GOTO 360
353 PRINT"CONGRATULATIONS---YOU CAME OUT A WINNER. COME AGAIN!"
354 GOTO 360
355 PRINT"CONGRATULATIONS---YOU CAME OUT EVEN, NOT BAD FOR AN AMATEUR"
360 END
</code></p>

<h3>Craps: Gameplay</h3>

<p>```sh
$ go run craps.go
See rules? enter &lsquo;y&rsquo; or &lsquo;n&rsquo; : y</p>

<pre><code>   Welcome to CRAPS!
   ----------------------------------------
</code></pre>

<p>Here are the rules:
&ndash; You roll a pair of dice and add up the score for each turn
&ndash; rolling a 7 or 11 on the first roll wins
&ndash; rolling a 2, 3 or 12 on the first roll loses
&ndash; any other number becomes your &lsquo;point&rsquo;, and you continue to roll</p>

<pre><code>- if you subsequently roll your 'point' again, you win
- if you roll a 7, you lose
</code></pre>

<ul>
<li>When one of us loses, we switch dice</li>
<li>You start with $100, and have to bet a minimum of $5 per turn</li>
<li>You get the first turn</li>
<li>To stop betting, just enter $0 as your bet amount</li>
</ul>


<p>That&rsquo;s it, let&rsquo;s go!</p>

<p>Ok, your turn now</p>

<p>You have $100, how much would you like to bet? $10
You roll 2 and 3 so Your point is 5
You roll 6 and 5 &hellip; roll again &hellip;
You roll 1 and 5 &hellip; roll again &hellip;
You roll 4 and 6 &hellip; roll again &hellip;
You roll 6 and 5 &hellip; roll again &hellip;
You roll 1 and 5 &hellip; roll again &hellip;
You roll 2 and 2 &hellip; roll again &hellip;
You roll 2 and 3 and make Your point!</p>

<p>You have $110, how much would you like to bet? $20
You roll 3 and 2 so Your point is 5
You roll 2 and 4 &hellip; roll again &hellip;
You roll 6 and 4 &hellip; roll again &hellip;
You roll 3 and 1 &hellip; roll again &hellip;
You roll 4 and 3 &hellip; and Lose!</p>

<p>Ok, my turn now</p>

<p>You have $90, how much would you like to bet? $0</p>

<p>Ah I wish I could quit this easily &hellip; farewell, young gambler!</p>

<p>```</p>

<p>Coming next: a different kind of gambling game (Blackjack?) and a slightly more involved two-player game (Battleship?)</p>
]]></content>
  </entry>
  
</feed>
