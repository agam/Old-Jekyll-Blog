<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: game | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/game/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-03-26T05:09:48+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[These pretzels are making me thirsty!]]></title>
    <link href="http://agam.github.io/blog/2015/01/10/these-pretzels-are-making-me-thirsty/"/>
    <updated>2015-01-10T07:29:26+00:00</updated>
    <id>http://agam.github.io/blog/2015/01/10/these-pretzels-are-making-me-thirsty</id>
    <content type="html"><![CDATA[<p>All right, here&rsquo;s <em>another</em> one of the series of hypothetically pedagogical text games in Go. This one is based on the original <em>Bagels</em>, which I then appropriated as <em>Pretzels</em>.</p>

<p>Here&rsquo;s the code:</p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"math/rand"
"time"
</code></pre>

<p>)</p>

<p>const (</p>

<pre><code>minRange  = 100
maxRange  = 999
numDigits = 3
maxTries  = 20
</code></pre>

<p>)</p>

<p>const (</p>

<pre><code>picoStr    = " -- PICO -- "
fermiStr   = " -- FERMI -- "
pretzelStr = " -- PRETZEL -- "
</code></pre>

<p>)</p>

<p>func showIntro() {</p>

<pre><code>fmt.Println("\nWelcome to 'PRETZELS' !!")
fmt.Println("------------------------")
fmt.Println(
    "\nHere are the rules. I'm going to guess a THREE-DIGIT number, and then " +
        "you have to guess it. I will give you clues as follows: \n" +
        "   PICO -- you got one digit correct, BUT in the wrong position\n" +
        "  FERMI -- you got on digit correct, AND in the right position\n" +
        "PRETZEL -- you got NO digits correct.\n")
fmt.Printf("You get %d chances to guess it!\n\n", maxTries)
</code></pre>

<p>}</p>

<p>func getDigits(num int, digits []int) {</p>

<pre><code>var i int
for {
    digits[i] = num % 10
    i++
    num /= 10
    if num == 0 {
        break
    }
}
</code></pre>

<p>}</p>

<p>func showFeedback(targetDigits []int, guess int) {</p>

<pre><code>guessDigits := make([]int, numDigits)
getDigits(guess, guessDigits)
somethingMatched := false
for i := 0; i &lt; len(guessDigits); i++ {
    if guessDigits[i] == targetDigits[i] {
        fmt.Printf(fermiStr)
        somethingMatched = true
        continue
    }
    for j := 0; j &lt; len(targetDigits); j++ {
        if guessDigits[i] == targetDigits[j] {
            fmt.Printf(picoStr)
            somethingMatched = true
            break
        }
    }
}
if !somethingMatched {
    fmt.Printf(pretzelStr)
}
fmt.Println()
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>showIntro()

rand.Seed(time.Now().Unix())
target := minRange + rand.Intn(maxRange-minRange)
targetDigits := make([]int, numDigits)
getDigits(target, targetDigits)

var numTries int
for {
    fmt.Printf("\nWhat is Guess #%d ? ", numTries+1)
    var guess int
    fmt.Scan(&amp;guess)

    if guess &lt; minRange || guess &gt; maxRange {
        fmt.Printf("You MUST choose a number between %d and %d, try again ...\n\n", minRange, maxRange)
        continue
    }
    showFeedback(targetDigits, guess)
    if guess == target {
        fmt.Println("\nYou got it!!\n")
        break
    }
    if numTries &gt; maxTries {
        fmt.Println("\nOOPS ... you ran out of chances! :(\n")
        fmt.Printf("(The number I thought of was %d)\n\n", target)
        break
    }
    numTries++
}
fmt.Println("\n\n     ... these pretzels are making me thirsty! ...\n")
</code></pre>

<p>}
```</p>

<p>and here&rsquo;s the eye-watering original:</p>

<p><code>basic
5 PRINT TAB(33);"BAGELS"
10 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY":PRINT:PRINT
15 REM *** BAGLES NUMBER GUESSING GAME
20 REM *** ORIGINAL SOURCE UNKNOWN BUT SUSPECTED TO BE
25 REM *** LAWRENCE HALL OF SCIENCE, U.C. BERKELY
30 DIM A1(6),A(3),B(3)
40 Y=0:T=255
50 PRINT:PRINT:PRINT
70 INPUT "WOULD YOU LIKE THE RULES (YES OR NO)";A$
90 IF LEFT$(A$,1)="N" THEN 150
100 PRINT:PRINT "I AM THINKING OF A THREE-DIGIT NUMBER.  TRY TO GUESS"
110 PRINT "MY NUMBER AND I WILL GIVE YOU CLUES AS FOLLOWS:"
120 PRINT "   PICO   - ONE DIGIT CORRECT BUT IN THE WRONG POSITION"
130 PRINT "   FERMI  - ONE DIGIT CORRECT AND IN THE RIGHT POSITION"
140 PRINT "   BAGELS - NO DIGITS CORRECT"
150 FOR I=1 TO 3
160 A(I)=INT(10*RND(1))
165 IF I-1=0 THEN 200
170 FOR J=1 TO I-1
180 IF A(I)=A(J) THEN 160
190 NEXT J
200 NEXT I
210 PRINT:PRINT "O.K.  I HAVE A NUMBER IN MIND."
220 FOR I=1 TO 20
230 PRINT "GUESS #";I,
240 INPUT A$
245 IF LEN(A$)&lt;&gt;3 THEN 630
250 FOR Z=1 TO 3:A1(Z)=ASC(MID$(A$,Z,1)):NEXT Z
260 FOR J=1 TO 3
270 IF A1(J)&lt;48 THEN 300
280 IF A1(J)&gt;57 THEN 300
285 B(J)=A1(J)-48
290 NEXT J
295 GOTO 320
300 PRINT "WHAT?"
310 GOTO 230
320 IF B(1)=B(2) THEN 650
330 IF B(2)=B(3) THEN 650
340 IF B(3)=B(1) THEN 650
350 C=0:D=0
360 FOR J=1 TO 2
370 IF A(J)&lt;&gt;B(J+1) THEN 390
380 C=C+1
390 IF A(J+1)&lt;&gt;B(J) THEN 410
400 C=C+1
410 NEXT J
420 IF A(1)&lt;&gt;B(3) THEN 440
430 C=C+1
440 IF A(3)&lt;&gt;B(1) THEN 460
450 C=C+1
460 FOR J=1 TO 3
470 IF A(J)&lt;&gt;B(J) THEN 490
480 D=D+1
490 NEXT J
500 IF D=3 THEN 680
505 IF C=0 THEN 545
520 FOR J=1 TO C
530 PRINT "PICO ";
540 NEXT J
545 IF D=0 THEN 580
550 FOR J=1 TO D
560 PRINT "FERMI ";
570 NEXT J
580 IF C+D&lt;&gt;0 THEN 600
590 PRINT "BAGELS";
600 PRINT
605 NEXT I
610 PRINT "OH WELL."
615 PRINT "THAT'S TWNETY GUESSES.  MY NUMBER WAS";100*A(1)+10*A(2)+A(3)
620 GOTO 700
630 PRINT "TRY GUESSING A THREE-DIGIT NUMBER.":GOTO 230
650 PRINT "OH, I FORGOT TO TELL YOU THAT THE NUMBER I HAVE IN MIND"
660 PRINT "HAS NO TWO DIGITS THE SAME.":GOTO 230
680 PRINT "YOU GOT IT!!!":PRINT
690 Y=Y+1
700 INPUT "PLAY AGAIN (YES OR NO)";A$
720 IF LEFT$(A$,1)="YES" THEN 150
730 IF Y=0 THEN 750
740 PRINT:PRINT "A";Y;"POINT BAGELS BUFF!!"
750 PRINT "HOPE YOU HAD FUN.  BYE."
999 END
</code></p>

<p>And just to show how much fun this is (copy-paste and try it!), here&rsquo;s a sample run:</p>

<p>```sh
$ go run pretzels.go</p>

<h2>Welcome to &lsquo;PRETZELS&rsquo; !!</h2>

<p>Here are the rules. I&rsquo;m going to guess a THREE-DIGIT number, and then you have to guess it. I will give you clues as follows:
   PICO &mdash; you got one digit correct, BUT in the wrong position
  FERMI &mdash; you got on digit correct, AND in the right position
PRETZEL &mdash; you got NO digits correct.</p>

<p>You get 20 chances to guess it!</p>

<p>What is Guess #1 ? 123
 &mdash; PRETZEL &mdash;</p>

<p>What is Guess #2 ? 456
 &mdash; PICO &mdash;</p>

<p>What is Guess #3 ? 789
 &mdash; PICO &mdash;  &mdash; PICO &mdash;</p>

<p>What is Guess #4 ? 100
 &mdash; PRETZEL &mdash;</p>

<p>What is Guess #5 ? 987
 &mdash; PICO &mdash;  &mdash; PICO &mdash;</p>

<p>What is Guess #6 ? 8797
You MUST choose a number between 100 and 999, try again &hellip;</p>

<p>What is Guess #6 ? 897
 &mdash; FERMI &mdash;  &mdash; FERMI &mdash;</p>

<p>What is Guess #7 ? 894
 &mdash; FERMI &mdash;  &mdash; FERMI &mdash;  &mdash; FERMI &mdash;</p>

<p>You got it!!</p>

<pre><code> ... these pretzels are making me thirsty! ...
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning 'basic' text games in Go: Rock, Paper, Scissors, Lizard, Spock]]></title>
    <link href="http://agam.github.io/blog/2015/01/08/rock/"/>
    <updated>2015-01-08T04:00:53+00:00</updated>
    <id>http://agam.github.io/blog/2015/01/08/rock</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been having some fun with the idea of simple text-based games in Go<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. The original BASIC games book<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> was not hard to find, and it was interesting to revisit it again.</p>

<p>The first thing that stared me in the face was just how <em>bad</em> (and by &ldquo;bad&rdquo; I mean <em>incomprehensible</em>) most of the code was. In my nostalgia I had completely lost sight of this.</p>

<p>The second thing was how nicely self-contained each game was, focussed on one simple idea, and implicitly pedagogical. Indeed, the games can be divided into a few distinct families<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<p>So I came up with a hypothetical organization for my hypothetical book &mdash; it would need some simple stuff to start out with (with for loops, conditionals, functions, and so on), and slowly introduce more stuff. <em>An explicit non-goal</em> would be teaching the language in its complete form (a link to <em>Effective Go</em><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> should suffice for the motivated reader).</p>

<p>In terms of Games, the rough plan I came up with was: start with some simple guessing game, then maybe a slightly more involved version, then a card game, then the classic <em>Battleship</em> around the mid-point, followed by a sort of <em>&ldquo;dungeon RPG&rdquo;</em> with some optional discussion at each point (e.g. should the computer in &ldquo;Battleship&rdquo; be dumb and random, or <em>learn</em>?)</p>

<p>To get an idea of what this might look like, I wrote the first four of these. Here is what might pass for the very first one, a modified version of <em>&ldquo;Rock, Paper, Scissors&rdquo;</em>.</p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"math/rand"
"strings"
"time"
</code></pre>

<p>)</p>

<p>const (</p>

<pre><code>rock = iota
paper
scissors
lizard
spock
maxOptions
</code></pre>

<p>)</p>

<p>var handOptions = []string{&ldquo;rock&rdquo;, &ldquo;paper&rdquo;, &ldquo;scissors&rdquo;, &ldquo;lizard&rdquo;, &ldquo;spock&rdquo;}</p>

<p>type precedence struct {</p>

<pre><code>hand1  int
reason string
hand2  int
</code></pre>

<p>}</p>

<p>var precedences = []precedence{</p>

<pre><code>{spock, "smashes", scissors},
{spock, "vaporises", rock},
{lizard, "posions", spock},
{lizard, "eats", paper},
{rock, "crushes", lizard},
{rock, "cruses", scissors},
{paper, "covers", rock},
{paper, "disproves", spock},
{scissors, "cuts", paper},
{scissors, "decapitates", lizard},
</code></pre>

<p>}</p>

<p>func showUsage() {</p>

<pre><code>fmt.Println("\n     Welcome to ROCK - PAPER - SCISSORS - LIZARD - SPOCK  ")
fmt.Println("----------------------------------------------------------\n")
fmt.Println("We each pick one of the following : \n")
for i := 0; i &lt; maxOptions; i++ {
    fmt.Printf("--&gt;  %s  &lt;--\n", handOptions[i])
}
fmt.Println()
</code></pre>

<p>}</p>

<p>func getPlayerChoice() int {</p>

<pre><code>for {
    fmt.Printf("\nEnter your choice : ")
    var choice string
    fmt.Scan(&amp;choice)

    choice = strings.ToLower(choice)

    for i := 0; i &lt; maxOptions; i++ {
        if handOptions[i] == choice {
            return i
        }
    }
}
</code></pre>

<p>}</p>

<p>func getComputerChoice() (choice int) {</p>

<pre><code>choice = rand.Intn(maxOptions)
fmt.Printf("I chose ")
for i := 0; i &lt; 3; i++ {
    fmt.Printf(".")
    time.Sleep(200 * time.Millisecond)
}
fmt.Printf(" %s\n\n", handOptions[choice])
return
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>showUsage()

rand.Seed(time.Now().Unix())
var playerWins, computerWins int

for {
    fmt.Printf("\nThe score is: Me %d, You %d\n", computerWins, playerWins)
    playerChoice := getPlayerChoice()
    computerChoice := getComputerChoice()

    playerWon := false
    computerWon := false
    for _, p := range precedences {
        if p.hand1 == playerChoice &amp;&amp; p.hand2 == computerChoice {
            fmt.Printf("Alas! %s %s %s! You Win! :(\n",
                handOptions[p.hand1], p.reason, handOptions[p.hand2])
            playerWon = true
        }
        if p.hand1 == computerChoice &amp;&amp; p.hand2 == playerChoice {
            fmt.Printf("Aha! %s %s %s! I win! :)\n",
                handOptions[p.hand1], p.reason, handOptions[p.hand2])
            computerWon = true
        }
    }

    if playerWon {
        playerWins++
    } else if computerWon {
        computerWins++
    } else {
        fmt.Println("Hey, look, it was a draw!\n\n")
    }

    fmt.Printf("\nPlay another round ?  (enter 'y' or 'n') : ")
    var another string
    fmt.Scan(&amp;another)
    if strings.ToLower(another) == "y" {
        continue
    } else {
        break
    }
}
fmt.Println("\nOh well, until next time then ... \n")
</code></pre>

<p>}
```</p>

<p>Try it out! It&rsquo;s meant to be simple and straightforward &mdash; but wait! Before you pass judgement, I present to you the <em>original</em> version:</p>

<p><code>basic
10 PRINT TAB(21);"GAME OF ROCK, SCISSORS, PAPER"
20 PRINT TAB(15);"CREATIVE COMPUTING  MORRISTOWN, NEW JERSEY"
25 PRINT:PRINT:PRINT
30 INPUT "HOW MANY GAMES";Q
40 IF Q&lt;11 THEN 60
50 PRINT "SORRY, BUT WE AREN'T ALLOWED TO PLAY THAT MANY.": GOTO 30
60 FOR G=1 TO Q
70 PRINT: PRINT "GAME NUMBER";G
80 X=INT(RND(1)*3+1)
90 PRINT "3=ROCK...2=SCISSORS...1=PAPER"
100 INPUT "1...2...3...WHAT'S YOUR CHOICE";K
110 IF (K-1)*(K-2)*(K-3)&lt;&gt;0 THEN PRINT "INVALID.": GOTO 90
120 PRINT "THIS IS MY CHOICE..."
130 ON X GOTO 140,150,160
140 PRINT "...PAPER": GOTO 170
150 PRINT "...SCISSORS": GOTO 170
160 PRINT "...ROCK"
170 IF X=K THEN 250
180 IF X&gt;K THEN 230
190 IF X=1 THEN 210
200 PRINT "YOU WIN!!!":H=H+1: GOTO 260
210 IF K&lt;&gt;3 THEN 200
220 PRINT "WOW!  I WIN!!!":C=C+1:GOTO 260
230 IF K&lt;&gt;1 OR X&lt;&gt;3 THEN 220
240 GOTO 200
250 PRINT "TIE GAME.  NO WINNER."
260 NEXT G
270 PRINT: PRINT "HERE IS THE FINAL GAME SCORE:"
280 PRINT "I HAVE WON";C;"GAME(S)."
290 PRINT "YOU HAVE WON";H;"GAME(S)."
300 PRINT "AND";Q-(C+H);"GAME(S) ENDED IN A TIE."
310 PRINT: PRINT "THANKS FOR PLAYING!!"
320 END
</code></p>

<p>Yes, folks, that is the kind of stuff I <em>cannot</em> believe I squinted over and read again and again :(</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>First mentioned <a href="http://agam.github.io/blog/2014/12/17/the-gardens-of-go/">here</a> a month ago<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://www.atariarchives.org/basicgames/">&ldquo;Basic Computer Games&rdquo;</a>, originally for the Atari<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>As in <a href="http://bitsavers.trailing-edge.com/pdf/dec/_Books/101_BASIC_Computer_Games_Mar75.pdf">this version with commentary</a>; see <em>Appendix A (pg 247)</em><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><a href="https://golang.org/doc/effective_go.html">&ldquo;Effective Go&rdquo;</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
