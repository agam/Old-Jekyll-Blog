<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cmake | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/cmake/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-01-12T00:05:58+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning how to build (part 2)]]></title>
    <link href="http://agam.github.io/blog/2013/09/09/building-stuff-part-2/"/>
    <updated>2013-09-09T00:00:00+00:00</updated>
    <id>http://agam.github.io/blog/2013/09/09/building-stuff-part-2</id>
    <content type="html"><![CDATA[<p>I wanted to get an idea of the state of open source C++ tools and idioms, so I decided to pick something small to start with.</p>

<h2>Raw materials: getting the libraries</h2>

<p>I already had <code>boost</code> and newly built versions of <code>gcc</code> and <code>libstdc++</code>.</p>

<p>First, I got another networking library I had heard about, <a href="https://github.com/google/cpp-netlib"><code>cpp-netlib</code></a>. (<code>git clone</code>, then <code>git submodule update</code>)</p>

<p>Next, I got a logging library <a href="https://code.google.com/p/google-glog/"><code>glog</code></a>, and a perf library <a href="https://code.google.com/p/gperftools/"><code>gperftools</code></a></p>

<p>(Both of these required me to download a <code>.tar.gz</code> file that needed to be uncompressed)</p>

<p>At this point, there was already a problem of how to build stuff (!)</p>

<p>Glog/Gperftools came with the usual <code>autoconf</code> system, but <code>cpp-netlib</code> had to be built with <code>CMake</code>.</p>

<p><code>sh
cmake ~/Documents/Code/AmpWorld/cpp-netlib \
  -DCMAKE_BUILD_TYPE=Debug \
  -DCMAKE_C_COMPILER=/usr/clang_3_3/bin/clang \
  -DCMAKE_CXX_COMPILER=/usr/clang_3_3/bin/clang++
</code></p>

<p>Initial problems getting this to work (in roughly chronological order) were:</p>

<ul>
<li>I had run <code>git submodule update</code> without <code>git submodule init</code>, so I had to clear out <code>CMake</code> temporaries, then run <code>init</code> and <code>update</code> to get them</li>
<li><code>Gperftools</code> didn&rsquo;t build on my machine, and required me to first install <code>libunwind</code></li>
<li>I had not specified boost include dirs, I had to run (in my case) <code>export BOOST_INCLUDEDIR=/opt/boost/boost_1_54_0</code></li>
<li>I had not installed the boost libraries that were <em>not</em> header-only (filesystem, regex, date_time, unit_test_framework, etc)</li>
<li>I couldn&rsquo;t figure out how to pass the right include paths through cmake, I ended up setting the environment variables instead
  (In my case this meant <code>export C_INCLUDE_PATH=255</code>.</li>
<li>After these four, I still got compilation errors
(e.g. <code>boost/bind/mem_fn_template.hpp:610:30: error: no matching function for call to 'get_pointer'</code>)</li>
<li>I added <code>-DCMAKE_LIBRARY_PATH=/usr/gcc_4_7/lib64</code> to cmake, and ran <code>make</code> again</li>
<li>Now I had different linker errors &hellip; <em>sigh</em> &hellip; undefined references to basic C++ library symbols like <code>string</code> in boost code</li>
<li>Guessed that this might have been because I had built <em>boost</em> with <em>gcc</em></li>
<li>Tried building the relevant Boost libraries again. This time when I ran &ldquo;<code>bootstrap.sh</code>&rdquo; again, I got:
<code>error: No best alternative for libs/coroutine/build/allocator_sources</code></li>
<li>WTF (!) &hellip; found <a href="http://superuser.com/questions/614472/error-while-installing-boost-1-54">a Superuser post that explained</a> a workaround,
which was to edit <code>libs/coroutine/build/Jamfile.v2</code>
&hellip; and now I get <em>other</em> weird errors: <code>./boost/python/detail/wrap_python.hpp:75:24: fatal error: patchlevel.h: No such file or directory</code></li>
<li>Needed to install stuff: <code>sudo apt-get install python-dev</code></li>
<li>Now everything <em>almost</em> worked, but one of the files failed to compile:
<code>cpp-netlib/http/src/network/protocol/http/client.ipp:18: undefined reference to network::logging::log(network::logging::log_record const&amp;)'</code></li>
<li>This error was truly bizarre because I located the source file that had this call (<code>logging/src/network/logging/logging.hpp</code>)
and it very explicitly disabled the copy constructor that the linker was complaining of being undefined !</li>
<li>Digging around in the corresponding <code>CMakeLists.txt</code> suggests this might possibly be due to logging being disabled</li>
<li>(<em>Will this never end ?</em>) <code>/usr/bin/ld: cannot find -lcppnetlib-logging</code></li>
<li>Fine, just turn of the f&amp;*ing tests</li>
</ul>


<p>So finally, this is what worked:</p>

<p><code>sh
export CC=/usr/gcc_4_7/bin/gcc4.7
export CXX=/usr/gcc_4_7/bin/g++4.7
export LD_LIBRARY_PATH=
  /usr/gcc_4_7/lib:/usr/gcc_4_7/lib64:/opt/boost/boost_1_54_0/stage/lib:$LD_LIBRARY_PATH
/usr/local/bin/cmake \
 -DCPP-NETLIB_BUILD_TESTS=OFF \
 -DCPP-NETLIB_BUILD_EXAMPLES=ON \
 -DCPP-NETLIB_DISABLE_LOGGING=OFF \
 -DCMAKE_BUILD_TYPE=Debug \
 -DCMAKE_INCLUDE_PATH=/usr/gcc_4_7/include/c++/4.7.3/ \
 -DCMAKE_LIBRARY_PATH=/usr/gcc_4_7/lib64 \
 ~/Documents/Code/AmpWorld/cpp-netlib
</code></p>

<p>Finally, even this didn&rsquo;t install the libraries where I wanted them. Finally I gave up and just hacked it up:</p>

<p><code>sh
`for f in `find /home/agam/Documents/Code/AmpWorld/cpp-netlib/ | grep 'lib.*a$'`; \
 do sudo cp $f /opt/cpp-static-libs/; done`
</code></p>

<h2>Into the furnace: a simple sample</h2>

<p>So far so good. Now it was &ldquo;hello world&rdquo; time (something that used atleast two of these libraries).</p>

<p>Or for a more basic step, replicate <a href="http://cpp-netlib.org/0.10.1/examples/http/hello_world_client.html">cpp-netlib&rsquo;s hello world</a> first.</p>

<p>This was the initial version, from the web page referred above.</p>

<p>```c</p>

<h1>include &lt;protocol/http/client.hpp></h1>

<h1>include <string></h1>

<h1>include <iostream></h1>

<p>namespace http = network::http;</p>

<p>int main(int argc, char*argv[]) {
  if (argc != 2) {</p>

<pre><code>std::cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; "&lt;url&gt;" &lt;&lt; std::endl;
return 1;                      
</code></pre>

<p>  }</p>

<p>  try {</p>

<pre><code>http::client client;           
http::client::request request(argv[1]);
http::client::response response = client.get(request);

// Print to standard output  
std::cout &lt;&lt; "Received: " &lt;&lt; body(response);                                                                                                                                                               
</code></pre>

<p>  } catch (std::exception&amp; e) {</p>

<pre><code>std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
return 1;                      
</code></pre>

<p>  }                              <br/>
}</p>

<p>}  // end namespace              <br/>
```</p>

<p>(The version in the example on the web page referred above was different in many ways, I&rsquo;ll leave that as an exercise for the reader :) )</p>

<p>Trying to compile it thus:</p>

<p><code>g++4.7 -std=c++11 hello-world.cpp -Icpp-netlib/http/src/ -Icpp-netlib/message/src/ -Icpp-netlib/uri/src/  -I/opt/boost/boost_1_54_0 -lcppnetlib-http-client</code></p>

<p>(almost there, now I get <code>/usr/bin/ld: cannot find -lcppnetlib-http-client</code>)</p>

<p>After a round of tacking on libraries while I continued to get <code>undefined reference</code> errors, I gave up and decided it was time to get a makefile ready.</p>

<p>For reference (or shame, or disgust, or trivia), the one-liner I had at this point had grown to</p>

<p><code>sh
g++4.7 hello-world.cpp \
  -L/opt/cpp-static-libs/ \
  -lcppnetlib-uri -lcppnetlib-http-client -lcppnetlib-http-message-wrappers \
  -lcppnetlib-http-client-connections -lcppnetlib-constants \
  -lcppnetlib-http-message -lcppnetlib-message -lcppnetlib-logging \
  -L/opt/boost/boost_1_54_0/stage/lib/ -lboost_system -lboost_regex \
  -lssl -lcrypt -std=c++11 \
  -Icpp-netlib/http/src/ -Icpp-netlib/message/src/ -Icpp-netlib/uri/src/ \
  -I/opt/boost/boost_1_54_0
</code></p>

<h2>Scaffolding and Fire: Creating a makefile</h2>

<p>Time to learn CMake ! Here&rsquo;s <a href="http://mathnathan.com/2010/07/getting-started-with-cmake/">a good tutorial</a> or actually here&rsquo;s <a href="http://web.cs.swarthmore.edu/~adanner/tips/cmake.php">a better one</a></p>

<p>This is what I came up with for <code>CMakeLists.txt</code> :</p>

<p>```cmake
cmake_minimum_required(VERSION 2.8)                                                                                                                                                                                                                                          <br/>
project(hello-world)</p>

<p>add_definitions(-std=c++11)</p>

<p>set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})</p>

<h1>Search paths</h1>

<p>set(CPP-NETLIB-SRC
  /home/agam/Documents/Code/AmpWorld/cpp-netlib)
include_directories(
  /opt/boost/boost_1_54_0
  /opt/cpp-static-libs
  ${CPP-NETLIB-SRC}/http/src
  ${CPP-NETLIB-SRC}/message/src                                                                                                      <br/>
  ${CPP-NETLIB-SRC}/uri/src                                                                                                          <br/>
  ${CPP-NETLIB-SRC}/logging/src)
link_directories(
  /opt/boost/boost_1_54_0/stage/lib                                                                                                  <br/>
  /opt/cpp-static-libs)</p>

<h1>CppNetlib libraries</h1>

<p>set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})                                                                   <br/>
set(CPP-NETLIB-LIBS,                                                                                                                 <br/>
  cppnetlib-uri
  cppnetlib-message
  cppnetlib-message-directives
  cppnetlib-message-wrappers                                                                                                         <br/>
  cppnetlib-http-message-wrappers
  cppnetlib-http-message                                                                                                             <br/>
  cppnetlib-constants
  cppnetlib-http-client
  cppnetlib-http-client-connections                                                                                                  <br/>
  cppnetlib-logging)</p>

<h1>Boost dependencies</h1>

<p>find_package(Boost 1.51 REQUIRED system regex)                                                                                       <br/>
set(BOOST_LIBS,                                                                                                                      <br/>
  ${Boost_SYSTEM_LIBRARY}                                                                                                            <br/>
  ${Boost_REGEX_LIBRARY})</p>

<h1>Other external libraries</h1>

<p>set(EXTERNAL_LIBS,
  ssl
  crypto)</p>

<h1>Our final output</h1>

<p>add_executable(hello-world hello-world.cpp)
target_link_libraries(hello-world                                                                                                    <br/>
  ${BOOST_LIBS}
  ${EXTERNAL_LIBS}                                                                                                                   <br/>
  ${CPP-NETLIB-LIBS})
```</p>

<p>However when I tried to build,</p>

<p><code>sh
$ make
Scanning dependencies of target hello-world
[100%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o
Linking CXX executable hello-world
CMakeFiles/hello-world.dir/hello-world.cpp.o: In function `(anonymous namespace)::get_filename(network::uri const&amp;)':
hello-world.cpp:(.text+0x22): undefined reference to `network::uri::path() const'
CMakeFiles/hello-world.dir/hello-world.cpp.o: In function `main':
hello-world.cpp:(.text+0x1ee): undefined reference to `network::http::client::client()'
hello-world.cpp:(.text+0x231): undefined reference to `network::http::request::request(std::string const&amp;)'
...
&lt;more undefined reference errors&gt;
</code></p>

<p>Eventually (minutes, hours, later! I&rsquo;ll spare you the pain) and after becoming lightly skilled in the arts of CMake, I realized that what I needed to do (or one of the things that I <em>could</em> do) was to explicitly declare the path of the static library, and specify their order.</p>

<p>So I then ended up with something like this (omitting the common parts with the listing above):</p>

<p>```cmake</p>

<h1>Specify static libraries explicitly to make Cmake happy</h1>

<p>add_library(CPPNETLIB_URI STATIC IMPORTED)
set_property(TARGET CPPNETLIB_URI PROPERTY
  IMPORTED_LOCATION /opt/cpp-static-libs/libcppnetlib-uri.a)
add_library(CPPNETLIB_MESSAGE STATIC IMPORTED)
set_property(TARGET CPPNETLIB_MESSAGE PROPERTY
  IMPORTED_LOCATION /opt/cpp-static-libs/libcppnetlib-message.a)
add_library(CPPNETLIB_MESSAGE_DIRECTIVES STATIC IMPORTED)
set_property(TARGET CPPNETLIB_MESSAGE_DIRECTIVES PROPERTY
  IMPORTED_LOCATION /opt/cpp-static-libs/libcppnetlib-message-directives.a)
add_library(CPPNETLIB_MESSAGE_WRAPPERS STATIC IMPORTED)
set_property(TARGET CPPNETLIB_MESSAGE_WRAPPERS PROPERTY
  IMPORTED_LOCATION /opt/cpp-static-libs/libcppnetlib-message-wrappers.a)
add_library(CPPNETLIB_HTTP_MESSAGE STATIC IMPORTED)
set_property(TARGET CPPNETLIB_HTTP_MESSAGE PROPERTY
  IMPORTED_LOCATION /opt/cpp-static-libs/libcppnetlib-http-message.a)
add_library(CPPNETLIB_HTTP_MESSAGE_WRAPPERS STATIC IMPORTED)
set_property(TARGET CPPNETLIB_HTTP_MESSAGE_WRAPPERS PROPERTY
  IMPORTED_LOCATION /opt/cpp-static-libs/libcppnetlib-http-message-wrappers.a)
add_library(CPPNETLIB_CONSTANTS STATIC IMPORTED)
set_property(TARGET CPPNETLIB_CONSTANTS PROPERTY
  IMPORTED_LOCATION /opt/cpp-static-libs/libcppnetlib-constants.a)
add_library(CPPNETLIB_HTTP_CLIENT STATIC IMPORTED)
set_property(TARGET CPPNETLIB_HTTP_CLIENT PROPERTY
  IMPORTED_LOCATION /opt/cpp-static-libs/libcppnetlib-http-client.a)
add_library(CPPNETLIB_HTTP_CLIENT_CONNECTINS STATIC IMPORTED)
set_property(TARGET CPPNETLIB_HTTP_CLIENT_CONNECTINS PROPERTY
  IMPORTED_LOCATION /opt/cpp-static-libs/libcppnetlib-http-client-connections.a)
add_library(CPPNETLIB_LOGGING STATIC IMPORTED)
set_property(TARGET CPPNETLIB_LOGGING PROPERTY
  IMPORTED_LOCATION /opt/cpp-static-libs/libcppnetlib-logging.a)</p>

<p>set(CPPNETLIB_LIBS
  CPPNETLIB_MESSAGE_WRAPPERS
  CPPNETLIB_HTTP_MESSAGE
  CPPNETLIB_MESSAGE
  CPPNETLIB_HTTP_CLIENT
  CPPNETLIB_MESSAGE_DIRECTIVES
  CPPNETLIB_HTTP_CLIENT_CONNECTINS
  CPPNETLIB_URI
  CPPNETLIB_LOGGING
  CPPNETLIB_CONSTANTS
  CPPNETLIB_HTTP_MESSAGE_WRAPPERS
  )
```</p>

<p>So, not only did I have to set the <code>IMPORTED_LOCATION</code> of each library (there <em>has</em> to be a better way to do this, doesn&rsquo;t there ?!) but I also had to juggle around their order relative to each other before passing <code>${CPPNETLIB_LIBS}</code> to <code>target_link_libraries</code></p>

<h2>Forging a networking hello-world, or &lsquo;all I want is a wget&rsquo;</h2>

<p>Once this was done, I could successfully do the following:</p>

<p><code>sh
$ mkdir build &amp;&amp; cd build
$ cmake ..
$ make
</code></p>

<p>Scanning dependencies of target hello-world
[100%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o
Linking CXX executable hello-world
[100%] Built target hello-world</p>

<p>About %$#ing time, eh ?</p>

<p>Well, it still doesn&rsquo;t <em>quite</em> work.</p>

<p>Before we see the non-working case, it&rsquo;s useful to see what happens on bad input:</p>

<p><code>sh
$ ./hello-world foo
[network http/client/base.ipp:78] client_base_pimpl::client_base_pimpl(client_options const &amp;)
[network http/client/base.ipp:80] creating owned io_service.
[network http/client/base.ipp:85] creating owned simple_connection_manager
[network http/client/simple_connection_manager.ipp:24] simple_connection_manager_pimpl::simple_connection_manager_pimpl(client_options const &amp;)
[network http/client/simple_connection_manager.ipp:26] creating simple connection factory
[network http/client/connection/simple_connection_factory.ipp:57] simple_connection_factory::simple_connection_factory()
[network http/client/connection/connection_delegate_factory.ipp:22] connection_delegate_factory::connection_delegate_factory()
[network http/client/connection/resolver_delegate_factory.ipp:18] resolver_delegate_factory::resolver_delegate_factory()
[network http/client/connection/simple_connection_factory.ipp:33] simple_connection_factory_pimpl::simple_connection_factory_pimpl(...)
[network http/client/simple_connection_manager.ipp:61] simple_connection_manager::simple_connection_manager(client_options const &amp;)
[network http/client/base.ipp:46] client_base::client_base()
[network http/client/facade.ipp:19] basic_client_facade::basic_client_facade()
[network http/client.ipp:18] client::client()
[network http/client/base.ipp:68] client_base::~client_base()
[network http/client/base.ipp:98] client_base_pimpl::~client_base_pimpl()
[network http/client/simple_connection_manager.ipp:73] simple_connection_manager::reset()
[network http/client/simple_connection_manager.ipp:83] simple_connection_manager::~simple_connection_manager()
[network http/client/simple_connection_manager.ipp:48] simple_connection_manager_pimpl::~simple_connection_manager_pimpl()
[network http/client/connection/simple_connection_factory.ipp:82] simple_connection_factory::~simple_connection_factory()
[network http/client/connection/resolver_delegate_factory.ipp:29] resolver_delegate_factory::~resolver_delegate_factory()
[network http/client/connection/connection_delegate_factory.ipp:47] connection_delegate_factory::~connection_delegate_factory()
[network http/client/connection_manager.ipp:16] connection_manager::~connection_manager()
Exception: Unable to parse URI string.
</code></p>

<p>When I ran <code>time ./hello-world http://www.google.com</code>, I got</p>

<p><code>sh
real    4m0.135s
user    0m0.020s
sys     0m0.012s
</code></p>

<p>There were a series of calls of the following form:</p>

<p><code>sh
[network http/client/connection/normal_delegate.ipp:38] normal_delegate::read_some(...)
[network http/client/connection/normal_delegate.ipp:39] scheduling asynchronous read some...
[network http/client/connection/normal_delegate.ipp:41] scheduled asynchronous read some...
[network http/client/connection/async_normal.ipp:237] http_async_connection_pimpl::handle_received_data(...)
[network http/client/connection/async_normal.ipp:252] processing data chunk, no error encountered so far...
[network http/client/connection/async_normal.ipp:380] parsing body...
[network http/client/connection/async_normal.ipp:414] connection still active...
[network http/client/connection/async_normal.ipp:440] no callback provided, appending to body...
[network http/client/connection/normal_delegate.ipp:38] normal_delegate::read_some(...)
[network http/client/connection/normal_delegate.ipp:39] scheduling asynchronous read some...
[network http/client/connection/normal_delegate.ipp:41] scheduled asynchronous read some...
[network http/client/connection/async_normal.ipp:237] http_async_connection_pimpl::handle_received_data(...)
[network http/client/connection/async_normal.ipp:252] processing data chunk, no error encountered so far...
[network http/client/connection/async_normal.ipp:380] parsing body...
[network http/client/connection/async_normal.ipp:382] end of the line.
[network http/client/connection/async_normal.ipp:399] no callback provided, appending to body...
</code></p>

<p>after which it seemed to pause for a few minutes before printing out the received body.</p>

<p>However, this seemed to depend on the url in question. For example, trying it on a static web page that forms part of this blog, <code>$ time ./hello-world http://agam.github.io/posts/building-boost-clang-gcc.html</code> yielded</p>

<p><code>sh
real    0m10.154s
user    0m0.024s
sys     0m0.004s
</code></p>

<p>That&rsquo;s enough, for me, for now. Maybe I&rsquo;ll try the <a href="http://pocoproject.org/">Poco libraries</a> next and see if they are any better.</p>
]]></content>
  </entry>
  
</feed>
