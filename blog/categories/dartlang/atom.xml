<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dartlang | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/dartlang/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2016-04-04T23:05:06-07:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Object Thinking]]></title>
    <link href="http://agam.github.io/blog/2016/03/02/object-thinking/"/>
    <updated>2016-03-02T23:59:30-08:00</updated>
    <id>http://agam.github.io/blog/2016/03/02/object-thinking</id>
    <content type="html"><![CDATA[<p>I picked up <a href="http://www.amazon.com/Object-Thinking-Developer-Reference-David/dp/0735619654"><em>&ldquo;Object Thinking&rdquo;</em></a> by David West recently, which is an unusual computer programming text, in that it devotes much (most?) of its pages to &ldquo;philosophy&rdquo;.</p>

<p>Somewhere towards the beginning, there&rsquo;s this example of writing a program to count the frequencies of words, first in Pascal, then in Smalltalk written like Pascal, and finally in Smalltalk written in the &ldquo;proper&rdquo; OO style.</p>

<p>I thought I&rsquo;d attempt the same but with Go and Dart instead &hellip;</p>

<p><strong>Note (1)</strong>: this is <em>not</em> about one language being better than another or something of the sort; the point is rather that the style is independent of the language, is meant only to contrast (in the author&rsquo;s opinion) purely procedural vs purely object-oriented styles of programming.</p>

<p><strong>Note (2)</strong>: some of the code below may be idiomatic, don&rsquo;t get upset, this is just for fun, I&rsquo;m trying to match the original Pascal and Smalltalk as closely as possible.</p>

<p>First of all, the classic procedural program.</p>

<p>```go
package main</p>

<p>import &ldquo;fmt&rdquo;
import &ldquo;bufio&rdquo;
import &ldquo;os&rdquo;</p>

<p>func main() {</p>

<pre><code>fmt.Printf("Enter line: ")
bio := bufio.NewReader(os.Stdin)
line, _, err := bio.ReadLine()
if err != nil {
    return
}
var f [26]int
for i := 0; i &lt; 26; i++ {
    f[i] = 0
}

for i := 0; i &lt; len(line); i++ {
    c := line[i]
    k := c - 'a'
    if k &gt;= 0 &amp;&amp; k &lt; 26 {
        f[k] = f[k] + 1
    }
}

fmt.Println("Frequencies :-")
for i := 0; i &lt; 26; i++ {
    fmt.Printf("%d ", f[i])
}
</code></pre>

<p>}
```</p>

<p>Second, a language that supports object-orientation, but used in a procedural style.</p>

<p>```dart
import &lsquo;dart:io&rsquo;;</p>

<p>main() {
  var f = new List(26);
  stdout.write(&ldquo;Enter line: &rdquo;);
  var line = stdin.readLineSync();</p>

<p>  for (int i = 0; i &lt; 26; i++) {</p>

<pre><code>f[i] = 0;
</code></pre>

<p>  }</p>

<p>  var lowerCaseA = &ldquo;a&rdquo;.codeUnitAt(0);
  for (int i = 0; i &lt; line.length; i++) {</p>

<pre><code>var c = line.codeUnitAt(i);
var k = c - lowerCaseA;
if (k &gt;= 0 &amp;&amp; k &lt; 26) {
  f[k] = f[k] + 1;
}
</code></pre>

<p>  }</p>

<p>  print(&ldquo;Frequencies :&ndash;&rdquo;);
  stdout.write(f);
}
```</p>

<p>Third, an object-oriented program (or, you could call it a functional program too, and then make a meta-point that I won&rsquo;t).</p>

<p>```dart
import &lsquo;dart:io&rsquo;;</p>

<p>main() {
  var f = new Map();
  stdout.write(&ldquo;Enter line: &rdquo;);
  var line = stdin.readLineSync();
  line.runes.toList().forEach((e) {</p>

<pre><code>    f.putIfAbsent(e, () =&gt; 0);
    f[e]++;
  });
</code></pre>

<p>  print(&ldquo;Frequencies :&ndash;&rdquo;);
  print(f);
}
```</p>

<p>Unfortunately, the original analogy might not be preserved very well, because (1) Dart is <em>way</em> more verbose than Smalltalk, and (2) I showed whole programs here, rather than relevant fragments.</p>
]]></content>
  </entry>
  
</feed>
