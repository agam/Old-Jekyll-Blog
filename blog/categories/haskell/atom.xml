<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: haskell, | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-05-29T19:34:09+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haskell/Math]]></title>
    <link href="http://agam.github.io/blog/2014/11/12/haskell-slash-math/"/>
    <updated>2014-11-12T02:05:43+00:00</updated>
    <id>http://agam.github.io/blog/2014/11/12/haskell-slash-math</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t recall the very first articles I might have read about Haskell, but the first non-short text was Real World Haskell, which I went through the year it came out. I didn&rsquo;t write any code at that time (a mistake!)</p>

<p>Then, a coupffle of years later, I thought I&rsquo;d try my hand at <a href="https://projecteuler.net/">Project Euler</a> with Haskell. I did the first 10-15 and then got bored.</p>

<p><em>Another</em> couple of years later, I decided to &ldquo;try it out&rdquo; again. This time, it was by starting a static blog (this one!) in <a href="http://jaspervdj.be/hakyll/">Hakyll</a>, and disassembling some trivial programs. This also didn&rsquo;t last, and after my initial brush with &ldquo;<a href="https://www.haskell.org/haskellwiki/Cabal/Survival">cabal</a> <a href="http://www.well-typed.com/blog/2014/09/how-we-might-abolish-cabal-hell-part-1/">hell</a>&rdquo;, I switched to <a href="http://jekyllrb.com/">Jekyll</a> instead.</p>

<p>I poked around with <a href="http://www.yesodweb.com/">Yesod</a> and its various <a href="https://hackage.haskell.org/package/shakespeare">&ldquo;shakespearean&rdquo;</a> plugins, and gave that up too.</p>

<p>At one point I found myself asking the question: &ldquo;Why am I doing this in Haskell at all?&rdquo; And the answer, obviously, was that (of course!) I <em>didn&rsquo;t need to</em>. So I lost interest altogether.</p>

<p>Now I realize these were all misguided efforts. What I should have done was to approach the whole thing from a more <em>fundamental</em> plane, the way SICP introduces Scheme. So, I&rsquo;ve decided to make my way through <a href="http://www.amazon.com/Haskell-Programming-Second-Edition-Computing/dp/0954300696">The Haskell Road to Maths, Logic and Programming</a>, trying as hard as I can to <em>not</em> let preconceived notions filter through, and to take it all in with a &ldquo;beginner&rsquo;s mind&rdquo;.</p>

<p>It&rsquo;s going to be a while :)</p>

<br><br>


<p><em>P.S. Emacs support for Haskell is pretty sweet. Here&rsquo;s a n00b-level screenshot showing a &ldquo;SLIME-style&rdquo; ghci session</em></p>

<p><img class="center" src="/images/haskell-emacs-ghci.png"></p>

<p><strong>Update:</strong> Someone suggested I should read <em>a more recent</em> book, <a href="http://www.cs.nott.ac.uk/~gmh/book.html">Programming in Haskell</a> by Graham Hutton, so I guess I&rsquo;ll do that first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala/Haskell/Go]]></title>
    <link href="http://agam.github.io/blog/2014/08/04/scala-slash-haskell-slash-go/"/>
    <updated>2014-08-04T19:33:51+00:00</updated>
    <id>http://agam.github.io/blog/2014/08/04/scala-slash-haskell-slash-go</id>
    <content type="html"><![CDATA[<p>Ok, Scala is neat. It&rsquo;s certainly the <em>only</em> way I can bring myself to use the JVM. The idea of everything being an object is a good one. You can &lsquo;cheat&rsquo; a bit since you can use statements, mix in side effects, do whatever, but I understand the compromises for Java-interop, without which it would would have been just another unused academic language.</p>

<p>It seems to be a <em>completely unopinionated</em> language, which IMO seems not so great since there are too many ways to do anything, so in practice you&rsquo;d have to pick some subset of features and stick with that, enforced as a style guide rather than by the compiler (much like all reasonable C++ programming is done today).</p>

<p>Even if you never plan to use Scala, the two courses on Coursera are recommended viewing.</p>

<p>Having done that, would I still use Scala? If I needed to use the JVM or existing Java libraries, this is a no-brainer. But without that constraint? Not quite sure. One of Haskell (for the type safety) or Go (for the reactive concurrency) might fit the bill just as well.</p>

<p>Anyway, I&rsquo;m still working through these videos and I&rsquo;ve yet to build anything half-way complex with it, so take all this with a grain of salt.</p>

<p>One open question I do have is whether Scala benefits from subtyping (which Haskell lacks). I&rsquo;ve heard/read many viewpoints on this but haven&rsquo;t come to a conclusion yet &hellip;</p>

<p><strong>Update</strong>: I got some feedback to the effect of &ldquo;you&rsquo;re an idiot, you should just drop everything and use Go instead&rdquo;, so I&rsquo;m going to try that for a while and report back in &hellip; many months? Maybe.</p>
]]></content>
  </entry>
  
</feed>
