<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: poco | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/poco/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2015-01-07T06:24:32+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic HTTP Client with Poco]]></title>
    <link href="http://agam.github.io/blog/2013/09/29/http-client-with-poco/"/>
    <updated>2013-09-29T00:00:00+00:00</updated>
    <id>http://agam.github.io/blog/2013/09/29/http-client-with-poco</id>
    <content type="html"><![CDATA[<p>After my previous terrible experience with <code>cpp-netlib</code>, I was very very pleasantly surprised by how well this went.</p>

<p>You can get the Poco C++ libraries <a href="http://pocoproject.org/">here</a></p>

<p>This is the short <code>wget</code> equivalent &hellip;</p>

<p>```c</p>

<h1>include <algorithm>  // for copy</h1>

<h1>include <iterator></h1>

<h1>include <string></h1>

<h1>include <iostream>   // for cout, istream</h1>

<h1>include &lt;Poco/Exception.h></h1>

<h1>include &lt;Poco/Net/HTTPClientSession.h></h1>

<h1>include &lt;Poco/Net/HTTPRequest.h></h1>

<h1>include &lt;Poco/Net/HTTPResponse.h></h1>

<h1>include &lt;Poco/Path.h></h1>

<h1>include &lt;Poco/URI.h></h1>

<p>using string = std::string;</p>

<p>int main(int argc, char*argv[]) {
  if (argc != 2) {</p>

<pre><code>std::cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " &lt;url&gt;" &lt;&lt; std::endl;
return 1;
</code></pre>

<p>  }</p>

<p>  try {</p>

<pre><code>// Initialize session
Poco::URI uri(argv[1]);
Poco::Net::HTTPClientSession client_session(uri.getHost(), uri.getPort());

// Prepare and send request
string path(uri.getPathAndQuery());
Poco::Net::HTTPRequest req(Poco::Net::HTTPRequest::HTTP_GET,
    path, Poco::Net::HTTPMessage::HTTP_1_1);
client_session.sendRequest(req);

// Get response
Poco::Net::HTTPResponse res;
std::istream&amp; is = client_session.receiveResponse(res);

// Print to standard output
std::copy(std::istream_iterator&lt;char&gt;(is),
    std::istream_iterator&lt;char&gt;(),
    std::ostream_iterator&lt;char&gt;(std::cout));
</code></pre>

<p>  } catch (Poco::Exception&amp; e) {</p>

<pre><code>std::cerr &lt;&lt; "Exception: " &lt;&lt; e.what() &lt;&lt; std::endl;
return 1;
</code></pre>

<p>  }</p>

<p>  std::cout &lt;&lt; &ldquo;Completed communication&rdquo;;
  return 0;
}
```</p>

<p>Thanks to my struggles getting the previous <code>cpp-netlib</code> example to build, I at least got very familiar with <code>cmake</code>. As a result, getting this example to build was a breeze:</p>

<p>```cmake
cmake_minimum_required(VERSION 2.8)
project(hello-world)</p>

<p>add_definitions(-std=c++11)</p>

<h1>Search paths</h1>

<p>include_directories(
  /opt/boost/boost_1_54_0
  /usr/local/include)
link_directories(
  /opt/boost/boost_1_54_0/stage/lib
  /usr/local/lib)</p>

<h1>Boost dependencies</h1>

<p>find_package(Boost 1.51 REQUIRED system regex)
set(BOOST_LIBS
  ${Boost_SYSTEM_LIBRARY}
  ${Boost_REGEX_LIBRARY}
  )</p>

<h1>Other external libraries</h1>

<p>find_package(OpenSSL)
find_library(LIBCRYPTO crypto)
find_library(POCO_FOUNDATION PocoFoundation)
find_library(POCO_NET PocoNet)
set(EXTERNAL_LIBS
  ${OPENSSL_LIBRARIES}
  ${LIBCRYPTO}
  ${POCO_FOUNDATION}
  ${POCO_NET}
  )</p>

<h1>Our final output</h1>

<p>add_executable(hello-world hello-world.cpp)
target_link_libraries(hello-world
  ${BOOST_LIBS}
  ${EXTERNAL_LIBS})
```</p>

<p>And it worked fine too:</p>

<p><code>sh
time ./hello-world http://www.google.com
&lt;html&gt;&lt;head&gt;&lt;metahttp-equiv="content-type"content="text/html;charset= ...(skipped rest)
real    0m0.424s
user    0m0.004s
sys     0m0.012s
</code></p>

<p>I&rsquo;m sure I&rsquo;ll be using more of POCO in the future!</p>
]]></content>
  </entry>
  
</feed>
