<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hakyll | Agam's Mashed-Up Pome]]></title>
  <link href="http://agam.github.io/blog/categories/hakyll/atom.xml" rel="self"/>
  <link href="http://agam.github.io/"/>
  <updated>2014-01-29T02:16:22+00:00</updated>
  <id>http://agam.github.io/</id>
  <author>
    <name><![CDATA[Agam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving to Jekyll]]></title>
    <link href="http://agam.github.io/blog/2013/11/15/moving-to-jekyll/"/>
    <updated>2013-11-15T00:00:00+00:00</updated>
    <id>http://agam.github.io/blog/2013/11/15/moving-to-jekyll</id>
    <content type="html"><![CDATA[<p>Wait, what ? Seriously ? Yes, seriously.</p>

<p>If it goes well you&rsquo;re reading this on my Jekyll-generated static blog (or
perhaps <a href="http://www.tumblr.com">something else</a>). In that case, you should know
that this post and the ones before it were generated by <a href="http://jaspervdj.be/hakyll/">Hakyll</a>. It was fun, I made my point, but I have a general <em>be-more-practical-than-ideological</em> theme going in my life, and this is part of that.</p>

<p>For future reference, this is what my Hakyll blog looked like (!)</p>

<p><img src="/images/pre-jekyll-blog.png" alt="Pre-Jekyll Blog" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hakyll broken ?]]></title>
    <link href="http://agam.github.io/blog/2013/03/20/hakyll-broken/"/>
    <updated>2013-03-20T00:00:00+00:00</updated>
    <id>http://agam.github.io/blog/2013/03/20/hakyll-broken</id>
    <content type="html"><![CDATA[<p>I noticed that the dates in my blog were all wrong, and now the blog
doesn&rsquo;t build.</p>

<p>```sh
ghc &mdash;make blog.hs
[1 of 1] Compiling Main             ( blog.hs, blog.o )</p>

<p>blog.hs:27:12:</p>

<pre><code>Not in scope: `list'
Perhaps you meant `last' (imported from Prelude)
</code></pre>

<p>blog.hs:29:21: Not in scope: `pageCompiler'</p>

<p>blog.hs:30:17: Not in scope: `applyTemplateCompiler'</p>

<p>blog.hs:31:17: Not in scope: `relativizeUrlsCompiler'</p>

<p>blog.hs:34:27:</p>

<pre><code>Not in scope: `constA'
Perhaps you meant `const' (imported from Prelude)
</code></pre>

<p>blog.hs:35:18: Not in scope: `setField'</p>

<p>blog.hs:36:13: Not in scope: `requireAllA'</p>

<p>blog.hs:37:13: Not in scope: `applyTemplateCompiler'</p>

<p>blog.hs:38:13: Not in scope: `applyTemplateCompiler'</p>

<p>blog.hs:39:13: Not in scope: `relativizeUrlsCompiler'</p>

<p>blog.hs:43:21: Not in scope: `pageCompiler'</p>

<p>blog.hs:44:17: Not in scope: `applyTemplateCompiler'</p>

<p>blog.hs:45:17: Not in scope: `applyTemplateCompiler'</p>

<p>blog.hs:46:17: Not in scope: `relativizeUrlsCompiler'
```</p>

<p>The price to pay for using a system in flux &hellip; oh well, time to read up on
the <a href="http://jaspervdj.be/hakyll/tutorials/04-compilers.html">hakyll
transition</a> from v3 to v4.</p>

<p>Alright, that isn&rsquo;t good enough &hellip; need some &lsquo;patterns&rsquo; to work with.
Luckily, I found <a href="http://wmasson.com/">another Hakyll blog</a> that made the jump, and shameless
plagiarized. (So thank you, <code>wmasson</code>!)</p>

<p>Well, I didn&rsquo;t even plagiarize well. I used tabs instead of spaces at one
point and stared at a <code>parse error on input `='</code> error message for
<em>some time</em>.</p>

<p>I spent some more time staring at</p>

<p>```
blog.hs:39:47:</p>

<pre><code>Couldn't match expected type `Item String'
            with actual type `[Item String]'
Expected type: [Item String] -&gt; [Item String]
  Actual type: [Item String] -&gt; [[Item String]]
In the second argument of `(.)', namely `recentFirst'
In the second argument of `($)', namely `take 3 . recentFirst'
</code></pre>

<p>```</p>

<p>&hellip; and then I realized that the signature of <code>postList</code> was wrong and should have its second argument as <code>([Item String] -&gt; Compiler [Item String])</code> instead of <code>([Item String] -&gt; [Item String])</code>.
Had to change <code>prep &lt;$&gt; loadAll pattern</code> to <code>prep =&lt;&lt; loadAll pattern</code> to accomodate this change.</p>

<p>Somehow the type signature of the main page function didn&rsquo;t match, so I modified the <code>postList</code> function to take a <code>listmodifier</code>; this way I could pass in <code>id</code> for the list of all posts and <code>(take 3)</code> for the main page.</p>

<p>I also had to change the date format from <code>%d %m %Y</code> to <code>%Y-%m-%d</code>, since I was getting an</p>

<p><code>
[ERROR] Hakyll.Web.Template.Context.getItemUTC: could not parse time for ...
</code></p>

<p>error message, looking at the <a href="https://github.com/jaspervdj/hakyll/blob/master/src/Hakyll/Web/Template/Context.hs#L200">source</a> I found that only a few formats were supported.</p>

<p>Finally, right at the end, I clobbered the git submodule in my output directory when I did a <code>./blog rebuild</code>. So to bring it back, I had to</p>

<p><code>sh
$ rm -f .gitmodules
$ ./blog clean
Removing _site...
Removing _cache...
Removing _cache/tmp...
$ git rm -r _site
rm '_site'
$ git submodule add --force git@github.com:agam/agam.github.com.git _site
Reactivating local git directory for submodule '_site'.
$ cd _site
$ git checkout master
$ cd ..
$ ./blog build
</code></p>

<p>So &hellip; no outward change in appearance, but a lot of time wasted, and all because I was bold enough to run <code>cabal update</code>.</p>

<p>Yes, I know. Sad.</p>

<p>But it works! (atleast the chronological sorting works again).</p>

<p><em><strong>Update:</strong></em> <a href="https://github.com/agam/hakyll-source/commit/9af1c492dc34e2ffb677a619ac86113a8a716703">This diff</a> might help to show the changes required.
<em><strong>Update:</strong></em> Just for fun, I tweaked the CSS of the page a bit, to make it a little less bland.</p>

<p><em>Update</em>: I have sinced moved to <a href="http://jekyllrb.com/">Jekyll</a>, so if Hakyll
has moved on to a different version, this blog post should be considered
obsolete.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hakyll: multiple posts and more]]></title>
    <link href="http://agam.github.io/blog/2013/01/04/hakyll-multiple-posts-and-more/"/>
    <updated>2013-01-04T00:00:00+00:00</updated>
    <id>http://agam.github.io/blog/2013/01/04/hakyll-multiple-posts-and-more</id>
    <content type="html"><![CDATA[<p>At the moment, my blog is basically a single page. This is boring, so let&rsquo;s expand it to handle multiple pages. Also, each page should be templatized in turn, so that we can add a footer to handle analytics, comments, etc.</p>

<h2>Multiple posts</h2>

<p>I&rsquo;ll do this step by step. First, I&rsquo;ll ignore the index page and just add support for the posts. So <code>blog.hs</code> gets a new &ldquo;match&rdquo; rule.</p>

<p>```haskell</p>

<pre><code>match "posts/*" $ do
    route     $ setExtension "html"
    compile   $ pageCompiler
        &gt;&gt;&gt; applyTemplateCompiler "templates/post.html"
        &gt;&gt;&gt; relativizeUrlsCompiler
</code></pre>

<p>```</p>

<p>I modified <code>index.markdown</code> to explicitly point to the two posts for now (i.e. this one and the previous one).</p>

<p>Also, I created <code>templates/post.html</code>, which has some basic boilerplate difference from the template used to serve the index page :&ndash;</p>

<p>```html</p>

<pre><code>    &lt;h1&gt;$$title$$&lt;/h1&gt;
&lt;br&gt;
&lt;h2&gt;$$date$$&lt;/h2&gt;
&lt;br&gt;

    $$body$$
</code></pre>

<p>```</p>

<p>Ok, <code>ghc --make blog.hs &amp;&amp; ./blog preview</code> confirms that all is well.</p>

<h2>Analytics and Comments</h2>

<p>I&rsquo;ll be brief here, since you probably already know this, and this isn&rsquo;t relevant to hakyll in anyway. There are many commenting systems out there, I found <a href="http://www.disqus.com">Disqus</a> to be really quick to set up.</p>

<p>Enter your username, password, site url, and you&rsquo;ll be shown a list of hosting platforms; just select <em>Universal Code</em> from the list, then copy-paste the javascript into the html footer of your post template. Done. Your posts now have comments!</p>

<p>Similarly, if you want to track site visits, <a href="www.google.com/analytics/">Google Analytics</a> is a quick solution. Sign up for a new account, enter the website name, and then get your &ldquo;tracking code&rdquo;, which is a bit of javascript you (again) tack on to the end of each post&rsquo;s html.</p>

<h2>Showing a list of posts</h2>

<p>At a minimum, we&rsquo;d like to show the last few posts on the index page, and provide a link to the list of <em>all</em> posts.</p>

<p>Let&rsquo;s do the second item first. To do this, we&rsquo;ll create a pseudo-page that will be defined based on the list of posts found in the <code>posts/</code> subdirectory.</p>

<p>(BTW this is heavily <del>inspired by</del> copy-pasted from <a href="https://github.com/jaspervdj/hakyll-examples/blob/master/feedblog/hakyll.hs">this hakyll example</a>)</p>

<p>Since we want to have a &lsquo;list of posts&rsquo; on the index page as well, this common functionality can be abstracted out.</p>

<p>```haskell
addPostList :: Compiler (Page String, [Page String]) (Page String)
addPostList = setFieldA &ldquo;posts&rdquo; $</p>

<pre><code>arr (reverse . chronological)
    &gt;&gt;&gt; require "templates/postitem.html" (\p t -&gt; map (applyTemplate t) p)
    &gt;&gt;&gt; arr mconcat
    &gt;&gt;&gt; arr pageBody
</code></pre>

<p>```</p>

<p>Now create a rudimentary html fragment that will hold the &lsquo;post summary&rsquo;</p>

<p><code>html
&lt;li&gt;
   &lt;a href="$ url $"&gt;$ title $&lt;/a&gt; - &lt;em&gt;$ date $&lt;/em&gt;
&lt;/li&gt;
</code></p>

<p>Finally, to tie it together, add a match for <code>posts.html</code>, which will be the entry point to show the list of all posts.</p>

<p>```haskell</p>

<pre><code>match "posts.html" $ route idRoute 
create "posts.html" $ constA mempty
    &gt;&gt;&gt; arr (setField "title" "All posts")
    &gt;&gt;&gt; requireAllA "posts/*" addPostList
    &gt;&gt;&gt; applyTemplateCompiler "templates/posts.html"
    &gt;&gt;&gt; applyTemplateCompiler "templates/default.html"
    &gt;&gt;&gt; relativizeUrlsCompiler
</code></pre>

<p>```</p>

<h2>Showing a subset of all posts on the index page</h2>

<p>Initially, I had some trouble getting this to work, for some reason the <code>match "posts/*"</code> wasn&rsquo;t working, and I commented out the <code>match "index.html"</code> and retained the <code>index.markdown</code> that I had.</p>

<p>Turned out to be another ommission on my part, I had to replace</p>

<p>```haskell</p>

<pre><code>match "index.html" $ do
create "index.html" $ constA mempty
</code></pre>

<p>```</p>

<p>with</p>

<p>```haskell</p>

<pre><code>match "index.html" $ route idRoute
create "index.html" $ constA mempty
</code></pre>

<p>```</p>

<p>&hellip; and then it works!</p>

<p>Getting the list of the last (say) 3 posts is achieved by having a line similar to the one in the handler for <code>posts.html</code>, except instead of just</p>

<p>```haskell</p>

<pre><code>&gt;&gt;&gt; requireAllA "posts/*" addPostList
</code></pre>

<p>```</p>

<p>we now have</p>

<p>```haskell</p>

<pre><code>    &gt;&gt;&gt; requireAllA "posts/*" (id *** arr (take 3 . reverse . chronological) &gt;&gt;&gt; addPostList)
</code></pre>

<p>```</p>

<h2>CSS-ifying</h2>

<p>You probably know more about this than me, but if you don&rsquo;t want a black-and white, crammed together bunch of text, you probably want atleast a couple of css rules for your headers and the body text etc. I cobbled together mine based on some random examples I found online, pick yours as you see fit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting up and running with Hakyll]]></title>
    <link href="http://agam.github.io/blog/2012/12/22/beginning-with-hakyll/"/>
    <updated>2012-12-22T00:00:00+00:00</updated>
    <id>http://agam.github.io/blog/2012/12/22/beginning-with-hakyll</id>
    <content type="html"><![CDATA[<p>I looked around at the usual suspects (wordpress, blogspot, etc) but then stumbled across the recent static website idea when I read &ldquo;powerd by Jekyll&rdquo; in a blog footer. Soon enough I came across Hakyll, and decided to give it a go, if only to learn Haskell a bit better.</p>

<p>The first few examples I came across were hosted on Linode etc, so my initial plan was to use this new blog to try out another new (for me) tool and host it on Google Compute Engine. But after reading up a bit on that, I realized I didn&rsquo;t want to deal with provisioning and storage and all, and that&rsquo;s when I realized that I could just host it on a platform that already supports static websites: Github Pages.</p>

<p>So there are a few steps here: getting hakyll, setting it up for my blog, setting it up with github, etc, and I&rsquo;ll go over them, in no particular order.</p>

<h2>Getting Hakyll</h2>

<p><code>bash
cabal install hakyll
</code></p>

<p>This will fetch al the required packages (and it took <em>quite</em> some time when I ran it, roughly as long as it might take <del>me</del>one to torrent an episode of a television series that <del>I am</del>one is currently watching). Of course, this depends on you already having <code>cabal</code> installed. If not, you should get the <a href="http://www.haskell.org/platform/">Haskell Platform</a> first.</p>

<p>If this works as intended, you should see a lot of output as <code>cabal</code> goes and compiles and installs a bunch of packages, ending with something like this:</p>

<p><code>
Installing library in /home/agam/.cabal/lib/hakyll-3.4.0.0/ghc-7.4.1
Registering hakyll-3.4.0.0...
</code></p>

<h2>Know how to use git and github</h2>

<p>I&rsquo;m assuming you have atleast an newbie level understanding of <a href="http://git-scm.com/">git</a> (which is what I have) and an account at <a href="http://www.github.com">github</a>.</p>

<p>This <a href="http://sixrevisions.com/resources/git-tutorials-beginners/">list of git tutorials</a> is a good starting point to learn git, though I recommend <a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/">Git Magic</a> (if only because I know the author, and frankly I found other tutorials either shallow or boring, by comparison).</p>

<p>If you haven&rsquo;t used either git <em>or</em> github previously, I would recommend going through <a href="http://try.github.com/">Try Github</a> as it does a good job of walking you through the few core workflows you&rsquo;ll need to use.</p>

<h2>Know <strong>some</strong> haskell</h2>

<p>Ok, this is something I can&rsquo;t talk about here, mostly because I don&rsquo;t know it well myself, but also because it is really, really beyond the scope of this blog.</p>

<p>You can <a href="http://tryhaskell.org/">try haskell</a> for a while and come back; my personal opinion is that it&rsquo;s overhyped as being hard, while actually being sort of fun, and people who try to sell it to you as some mystical super-hard iq-prerequisite-required sort of thing are just $@#holes.</p>

<p>Still, you do need to know atleast some Haskell to use Hakyll, so I&rsquo;ll leave it at that.</p>

<h2>Set up github</h2>

<p>To host github pages, you need to create a repo of the form <code>username/username.github.com</code>. So <a href="https://github.com/new">do that now</a>.
The code for the site will live in a different repo (yeah, this part is a drag compared to Jekyll, where github &lsquo;automagically&rsquo; build the blog on commit, and then takes care of serving the right pages.</p>

<p>To get the same effect in our hakyll blog here, we&rsquo;ll have to set the pages repo as a <em>submodule</em> of the source repo. To do that, run</p>

<p>```bash
git submodule add <a href="https://github.com/agam/agam.github.com.git">https://github.com/agam/agam.github.com.git</a> _site</p>

<p>```</p>

<p>Don&rsquo;t forget to add the second argument specifying the folder that the submodule is embedded under.</p>

<p>If you leave this out, it will be embedded under the name of the repo (e.g. in this case, there would be a directory created called <code>agam.github.com</code>). I did this, and then had to do the following to get rid of it :&ndash;</p>

<p>(Thanks to <a href="http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule">this stackoverflow post</a>!)</p>

<p>(1) Edit <code>.gitmodules</code> to remove the offending section. In my case, this showed up as
```
[submodule &ldquo;agam.github.com&rdquo;]</p>

<pre><code>path = agam.github.com
url = https://github.com/agam/agam.github.com.git
</code></pre>

<p>```</p>

<p>(2) Remove the corresponding section from <code>.git/config</code>. In my case, this showed up as
```
[submodule &ldquo;agam.github.com&rdquo;]</p>

<pre><code>url = https://github.com/agam/agam.github.com.git
</code></pre>

<p>```</p>

<p>(3) Run <code>git rm</code> to remove the directory. Again, in my case, this meant running <code>git rm --cached agam.github.com</code></p>

<h2>Setting up hakyll: Overview</h2>

<p>Now for the actual structure of the blog, there are two ways to go: My plan is to go with the <a href="https://github.com/jaspervdj/hakyll-examples/tree/master/brochure">basic example</a> in the <a href="http://jaspervdj.be/hakyll/tutorials/02-basics.html">rudimentary hakyll docs</a> and build up from there to add support for multiple posts, pages, widgets, comments, etc.</p>

<p>The other option is to use one of the <a href="http://jaspervdj.be/hakyll/examples.html">existing large, customized hakyll blogs</a> and adapt them to your use.</p>

<p>Which option you use is up to you, the rest of this blog post talks about initial changes I made to the example site, and I&rsquo;ll mention any additional structural features in a separate blog post.</p>

<h2>Setting up hakyll: Details</h2>

<p>You can ignore this part really, if you&rsquo;ve successfully adapted the other blogs as mentioned above. I&rsquo;m taking the approach of starting with a single index page with a single post and building up from there.</p>

<p>So in the first iteration, I had a <code>css</code> folder (with the same contents as the example) and a <code>templates</code> folder (which contained a barebones <code>default.html</code>). I had a file <code>blog.hs</code> with this code:</p>

<p>```haskell
{&ndash;# LANGUAGE OverloadedStrings #&ndash;}</p>

<p>import Control.Arrow ((>>>))</p>

<p>import Hakyll</p>

<p>main :: IO()
main = hakyll $ do</p>

<pre><code>match "images/*" $ do
    route    idRoute
    compile copyFileCompiler

match "css/*" $ do
    route    idRoute
    compile compressCssCompiler

match "templates/*" $ compile templateCompiler

match (list ["about.markdown", "index.markdown"]) $ do
    route     $ setExtension "html"
    compile   $ pageCompiler
    &gt;&gt;&gt; applyTemplateCompiler "templates/default.html"
        &gt;&gt;&gt; relativizeUrlsCompiler
</code></pre>

<p>```</p>

<p>To generate the static html, run</p>

<p><code>bash
ghc --make blog.hs
</code></p>

<p>(Now this is the point where the &lsquo;know some haskell&rsquo; rule applies, since if you&rsquo;re like me, you&rsquo;ll make some stupid typo and have to contend with something like</p>

<p>```</p>

<pre><code>Couldn't match expected type `RulesM b0'
            with actual type `cat0 a0 c0'
</code></pre>

<p>```</p>

<p>and wonder <em>wtf</em> just happened &hellip; in this case, I hadn&rsquo;t indented the arrows between the compilers in the last two lines!)</p>

<p>If all goes well, you should see</p>

<p><code>
[1 of 1] Compiling Main             ( blog.hs, blog.o )
Linking blog ...
</code></p>

<p>Then, run</p>

<p><code>
./blog build
</code></p>

<p>(replace &lsquo;blog&rsquo; with whatever <code>foo.hs</code> contains the &lsquo;main&rsquo; function)</p>

<p>This is where I encountered another error:</p>

<p><code>
  [ ERROR] Hakyll.Web.readPandocWith: I don't know how to read a file of the type Binary for: about.pandoc
</code></p>

<p>(Once again, my typo: I had used <code>about.pandoc</code> when I meant to say, of course, <code>about.markdown</code>. Recompiled, built, saw the following:</p>

<p><code>
Initialising
  [   0ms] Creating store
  [  15ms] Creating provider
Adding new compilers
Compiling templates/default.html
  [      ] Checking cache: OK
  [   0ms] Total compile time
Compiling about.markdown
  [      ] Checking cache: modified
  [   1ms] Total compile time
  [   0ms] Routing to about.html
Compiling css/default.css
  [   1ms] Total compile time
  [   0ms] Routing to css/default.css
Compiling css/syntax.css
  [   1ms] Total compile time
  [   0ms] Routing to css/syntax.css
Compiling index.markdown
  [      ] Checking cache: modified
  [  31ms] Total compile time
  [   0ms] Routing to index.html
</code></p>

<p>So if you see any errors, <strong>Don&rsquo;t Panic</strong>. It&rsquo;ll turn out to have a simple explanation.)</p>

<p>You can also, at this point, run <code>./blog preview</code>, and then <a href="http://0.0.0.0:8000">check it out</a> in your browser.</p>

<h2>Pushing to Github</h2>

<p>Ok, so the blog&rsquo;s basically one stupid black-and-white single page (no problem, we&rsquo;ll add to that later). To get this basic example up and running, make sure you <code>git add</code> all the files you created.</p>

<p>In general, this will be a 4 step process:&ndash;</p>

<ol>
<li>Edit posts</li>
<li><code>blog build</code> to generate site contents inside _site (replace <code>blog</code> with whatever you call your <code>.hs</code> file)</li>
<li><code>cd _site</code> then <code>git add -i</code> and <code>git commit -m "new post etc"</code> and <code>git push origin master</code>. The blog is now live on Github Pages!</li>
<li><code>cd ..</code> followed by another commit and push to check in your modified post(s)</li>
</ol>


<hr />

<p>For reference, my hakyll source lives <a href="https://github.com/agam/hakyll-source">here</a> and the static website is generated <a href="https://github.com/agam/agam.github.com">here</a></p>

<p><em>Continue on to <a href="/blog/2013/01/04/hakyll-multiple-posts-and-more/">part 2</a></em></p>

<p><em><strong>Update</strong></em>: Since the writing of this post, Hakyll has gone from 3.x to 4.x and changed its DSL significantly (see <a href="/posts/hakyll-broken.html">a post on that</a>).</p>
]]></content>
  </entry>
  
</feed>
